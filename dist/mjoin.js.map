{"version":3,"sources":["mjoin.ts"],"names":[],"mappings":"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","file":"mjoin.js","sourcesContent":["import * as knex from 'knex';\n\nimport Editor, {IDtRequest, IDtResponse} from './editor';\nimport Field from './field';\nimport NestedData from './nestedData';\n\ninterface IJoinTable {\n    table?: string;\n    parent: string|string[];\n    child: string|string[];\n}\n\n/**\n * The MJoin class provides a one-to-many join link for Editor. This can\n * be useful in cases were an attribute can take multiple values at the\n * same time - for example cumulative security access levels.\n *\n * Typically the MJoin class should be used with a link table, but this is\n * optional. Please note that if you don't use a link table you should be\n * aware that on edit the linked rows are deleted and then reinserted, thus\n * if any values should be retained they should also be submitted.\n *\n * Please refer to the Editor Node documentation for further information\n * https://editor.datatables.net/manual/node\n *\n * @export\n * @class Mjoin\n * @extends {NestedData}\n */\nexport default class Mjoin extends NestedData {\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n    * Private parameters\n    */\n\n    private _table: string;\n    private _editor: Editor;\n    private _name: string;\n    private _get: boolean = true;\n    private _set: boolean = true;\n    private _where: any[] = [];\n    private _fields: Field[] = [];\n    private _links: string[] = [];\n    private _order: string;\n    private _join: IJoinTable = {\n        child: '',\n        parent: ''\n    };\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Constructor\n     */\n\n     /**\n      * Creates an instance of Mjoin.\n      *\n      * @param {string} table Table name being joined to\n      */\n    constructor( table: string ) {\n        super();\n\n        this.table( table );\n        this.name( table );\n    }\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Public methods\n     */\n\n    /**\n     * Get or field by name, or add a field instance.\n     *\n     * @param {(Field|string)} nameOrField Field instance to add, or field name to get\n     * @returns Mjoin instance if adding a field, Field instance if getting a field.\n     */\n    public field( nameOrField: Field|string ) {\n        if ( typeof nameOrField === 'string' ) {\n            for ( let i = 0, ien = this._fields.length ; i < ien ; i++ ) {\n                if ( this._fields[i].name() === nameOrField ) {\n                    return this._fields[i];\n                }\n            }\n\n            throw new Error( 'Unknown field: ' + nameOrField );\n        }\n\n        this._fields.push( nameOrField );\n        return this;\n    }\n\n    /**\n     * Get the fields assigned to this instance.\n     * @returns {Field[]} Array of fields\n     */\n    public fields(): Field[];\n    /**\n     * Add one or more fields to the instance.\n     * @param {...Field[]} fields Fields to add\n     * @returns {Mjoin} Self for chaining\n     */\n    public fields(...fields: Field[]): Mjoin;\n    public fields(...fields: Field[]): any {\n        if ( fields === undefined || fields.length === 0 ) {\n            return this._fields;\n        }\n\n        this._fields.push.apply( this._fields, fields );\n\n        return this;\n    }\n\n    /**\n     * Get the `get` flag for all fields in the Mjoin instance.\n     *\n     * @returns {boolean} True if gettable, false otherwise.\n     */\n    public get(): boolean;\n    /**\n     * Set the `get` flag for all fields in the Mjoin instance.\n     * When set to false no read operations will occur on the join tables.\n     *\n     * @param {boolean} flag `true` to mark as readable, false otherwise\n     * @returns {Mjoin} Self for chaining\n     */\n    public get(flag: boolean): Mjoin;\n    public get(flag?: boolean): any {\n        if ( flag === undefined ) {\n            return this._get;\n        }\n\n        this._get = flag;\n        return this;\n    }\n\n    /**\n     * Create a join link between two tables. The order of the fields does not\n     * matter, but each field must contain the table name as well as the field\n     * name.\n     *\n     * This method can be called a maximum of two times for an Mjoin instance:\n     *\n     * * First time, creates a link between the Editor host table and a join\n     *   table\n     * * Second time creates the links required for a link table.\n     *\n     * Please refer to the Editor Mjoin documentation for further details:\n     * https://editor.datatables.net/manual/php\n     *\n     * @param {string} field1 Table and field name\n     * @param {string} field2 Table and field name\n     * @returns {Mjoin} Self for chaining\n     */\n    public link( field1: string, field2: string ): Mjoin {\n        if ( field1.indexOf('.') === -1 || field2.indexOf('.') === -1 ) {\n            throw new Error( 'Mjoin fields must contain both the table name and the column name' );\n        }\n\n        if ( this._links.length === 4 ) {\n            throw new Error( 'Mjoin link method cannot be called more than twice for a single instance' );\n        }\n\n        // Add to list - it is resolved later on\n        this._links.push( field1 );\n        this._links.push( field2 );\n\n        return this;\n    }\n\n    /**\n     * Get the instance's configured name.\n     *\n     * The `name` of the Join is the JSON property key that is used when\n     * 'getting' the data, and the HTTP property key (in a JSON style) when\n     * 'setting' data. Typically the name of the db table will be used here,\n     * but this method allows that to be overridden.\n     *\n     * @returns {string} Current name.\n     */\n    public name(): string;\n    /**\n     * Set the instance's name\n     *\n     * @param {string} name Name to set\n     * @returns {Mjoin} Self for chaining\n     */\n    public name(name: string): Mjoin;\n    public name(name?: string): any {\n        if ( name === undefined ) {\n            return this._name;\n        }\n\n        this._name = name;\n        return this;\n    }\n\n    /**\n     * Get the column name to order the data by\n     *\n     * @returns {string} SQL column name\n     */\n    public order(): string;\n    /**\n     * Specify the property that the data will be sorted by.\n     *\n     * @param {string} order SQL column name to order the data by\n     * @returns {Mjoin} Self for chaining\n     */\n    public order(order: string): Mjoin;\n    public order(order?: string): any {\n        if ( order === undefined ) {\n            return this._order;\n        }\n\n        this._order = order;\n        return this;\n    }\n\n    /**\n     * Get the current `set` property for the instance.\n     *\n     * When set to false no write operations will occur on the join tables.\n     * This can be useful when you want to display information which is joined,\n     * but want to only perform write operations on the parent table.\n     *\n     * @returns {boolean} Set configuration\n     */\n    public set(): boolean;\n    /**\n     * Set the instance's set property\n     *\n     * @param {(boolean)} flag Set flag.\n     * @returns {Mjoin} Self for chaining.\n     */\n    public set(flag: boolean): Mjoin;\n    public set(flag?: boolean): any {\n        if ( flag === undefined ) {\n            return this._set;\n        }\n\n        this._set = flag;\n        return this;\n    }\n\n    /**\n     * Get join table name.\n     *\n     * Please note that this will also set the {@link name} used by the Join\n     * as well. This is for convenience as the JSON output / HTTP input will\n     * typically use the same name as the database name. If you want to set a\n     * custom name, the {@link name} method must be called ***after*** this one.\n     *\n     * @returns {string} Join table name\n     */\n    public table(): string;\n    /**\n     * Set column join name\n     *\n     * @param {string} table Join table name\n     * @returns {Mjoin} Self for chaining\n     */\n    public table(table: string): Mjoin;\n    public table(table?: string): any {\n        if ( table === undefined ) {\n            return this._table;\n        }\n\n        this._table = table;\n        return this;\n    }\n\n    /**\n     * Get the array of conditions applied to the method.\n     *\n     * @returns {any[]} Knex where conditions.\n     */\n    public where(): any[];\n    /**\n     * Where condition to add to the query used to get data from the database.\n     * Note that this is applied to the child table.\n     *\n     * @param {*} cond Knex query condition\n     * @returns {Mjoin} Self for chaining.\n     */\n    public where(cond: any): Mjoin;\n    public where(cond?: any): any {\n        if ( cond === undefined ) {\n            return this._where;\n        }\n\n        this._where.push( cond );\n\n        return this;\n    }\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Internal methods\n     */\n\n    /**\n     * @ignore\n     */\n    public async data( editor: Editor, response: IDtResponse ): Promise<void> {\n        if ( ! this._get ) {\n            return;\n        }\n\n        this._prepare( editor );\n        let fields = this.fields();\n        let join = this._join;\n\n        // This is something that will likely come in a future version, but it\n        // is a relatively low use feature. Please get in touch if this is\n        // something you require.\n        if ( editor.pkey().length > 1 ) {\n            throw new Error( 'Mjoin is not currently supported with a compound primary key for the main table' );\n        }\n\n        // If the Editor primary key is join key, then it is read automatically\n        // and into Editor's primary key store\n        let dteTable = editor.table()[0];\n        let joinField = join.table ?\n            join.parent[0] :\n            join.parent;\n\n        let pkeyIsJoin = joinField === editor.pkey()[0] ||\n                         dteTable + '.' + joinField === editor.pkey()[0];\n\n        // Build the basic query\n        let query = editor.db()( dteTable )\n            .distinct( dteTable + '.' + joinField + ' as dteditor_pkey' );\n\n        let order = this.order();\n        if ( order ) {\n            let a = order.split( ' ' );\n\n            if ( a.length > 1 ) {\n                query.orderBy( a[0], a[1] );\n            }\n            else {\n                query.orderBy( a );\n            }\n        }\n\n        this._applyWhere( query );\n\n        for ( let i = 0, ien = fields.length ; i < ien ; i++ ) {\n            let field = fields[i];\n\n            if ( field.apply('get') && field.getValue() === undefined ) {\n                let dbField = field.dbField();\n\n                if (dbField.indexOf('(') !== -1 ) {\n                    query.select( editor.db().raw( dbField + ' as \"' + dbField + '\"' ) );\n                }\n                else if ( dbField.indexOf('.') === -1 ) {\n                    query.select( this._table + '.' + dbField + ' as ' + dbField );\n                }\n                else {\n                    query.select( dbField );\n                }\n            }\n        }\n\n        // Create the joins\n        if ( join.table ) {\n            query.rightJoin( join.table, dteTable + '.' + join.parent[0], '=', join.table + '.' + join.parent[1] );\n            query.rightJoin( this._table, this._table + '.' + join.child[0], '=', join.table + '.' + join.child[1] );\n        }\n        else {\n            query.rightJoin( this._table, join.parent, '=', join.child );\n        }\n\n        let res = await query;\n        let readField = '';\n\n        if ( this._propExists( dteTable + '.' + joinField, response.data[0] ) ) {\n            readField = dteTable + '.' + joinField;\n        }\n        else if ( this._propExists( joinField.toString(), response.data[0] ) ) {\n            readField = joinField.toString();\n        }\n        else if ( !pkeyIsJoin ) {\n            throw new Error(\n                \"Join was performed on the field '\" + joinField + \"' which was not \" +\n                \"included in the Editor field list. The join field must be \" +\n                \"included as a regular field in the Editor instance.\"\n            );\n        }\n\n        // Map the data to the primary key for fast loop up\n        let joinMap = {};\n\n        for ( let i = 0, ien = res.length ; i < ien ; i++ ) {\n            let inner = {};\n\n            for ( let j = 0, jen = fields.length ; j < jen ; j++ ) {\n                fields[j].write( inner, res[i] );\n            }\n\n            let lookup = res[i].dteditor_pkey;\n\n            if ( ! joinMap[ lookup ] ) {\n                joinMap[ lookup ] = [];\n            }\n\n            joinMap[ lookup ].push( inner );\n        }\n\n        // Loop over the data in the original response and do a join based on\n        // the mapped data\n        for ( let i = 0, ien = response.data.length ; i < ien ; i++ ) {\n            let data = response.data[i];\n            let linkField = pkeyIsJoin ?\n                data['DT_RowId'].replace( editor.idPrefix(), '' ) :\n                this._readProp( readField, data );\n\n            if ( joinMap[ linkField ] ) {\n                data[ this._name ] = joinMap[ linkField ];\n            }\n            else {\n                data[ this._name ] = [];\n            }\n        }\n\n        // Field options\n        for ( let i = 0, ien = fields.length ; i < ien ; i++ ) {\n            let opts = await fields[i].optionsExec( editor.db() );\n\n            if ( opts ) {\n                let name = this.name() + '[].' + fields[i].name();\n\n                response.options[ name ] = opts;\n            }\n        }\n    }\n\n    /**\n     * @ignore\n     */\n    public async create( editor: Editor, parentId: string, data: object ): Promise<void> {\n        // If not settable, or the many count for the join was not submitted\n        // then we do nothing\n        if (\n            ! this._set ||\n            ! data[ this._name ] ||\n            ! data[ this._name + '-many-count']\n        ) {\n            return;\n        }\n\n        this._prepare( editor );\n        let db = editor.db();\n\n        for ( let i = 0, ien = data[ this._name ].length ; i < ien ; i++ ) {\n            await this._insert( db, parentId, data[ this._name ][i] );\n        }\n    }\n\n    /**\n     * @ignore\n     */\n    public async update( editor: Editor, parentId: string, data: object ): Promise<void> {\n        if ( ! this._set || ! data[ this._name + '-many-count'] ) {\n            return;\n        }\n\n        // WARNING - this will remove rows and then readd them. Any\n        // data not in the field list WILL BE LOST\n        await this.remove( editor, [parentId] );\n        await this.create( editor, parentId, data );\n    }\n\n    /**\n     * @ignore\n     */\n    public async remove( editor: Editor, ids: string[] ): Promise<void> {\n        if ( ! this._set ) {\n            return;\n        }\n\n        this._prepare( editor );\n        let db = editor.db();\n        let join = this._join;\n\n        if ( join.table ) {\n            let query = db( join.table );\n\n            for ( let i = 0, ien = ids.length ; i < ien ; i++ ) {\n                query.orWhere( { [join.parent[1]]: ids[i] } );\n            }\n\n            await query.del();\n        }\n        else {\n            let query = db( this._table );\n\n            query.where( function() {\n                for ( let i = 0, ien = ids.length ; i < ien ; i++ ) {\n                    query.orWhere( { [join.child.toString()]: ids[i] } );\n                }\n            } );\n\n            this._applyWhere( query );\n\n            await query.del();\n        }\n    }\n\n    /**\n     * @ignore\n     */\n    public async validate( errors, editor: Editor, data: object ): Promise<void> {\n        if ( ! this._set || ! data[ this._name ] ) {\n            return;\n        }\n\n        this._prepare( editor );\n        let joinData = data[ this._name ];\n\n        for ( let i = 0, ien = joinData.length ; i < ien ; i++ ) {\n            await this._validateFields( errors, editor, joinData[i], this._name + '[].' );\n        }\n    }\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Private methods\n     */\n    private _applyWhere( query: knex ): void {\n        let where = this._where;\n\n        for ( let i = 0, ien = where.length ; i < ien ; i++ ) {\n            query.where( where[i] );\n        }\n    }\n\n    private async _insert( db: knex, parentId: string, data: object ): Promise<void> {\n        let join = this._join;\n        let fields = this.fields();\n\n        if ( join.table ) {\n            // Insert keys into the join table\n            await db( join.table )\n                .insert( {\n                    [join.parent[1]]: parentId,\n                    [join.child[1]]: data[ join.child[0] ]\n                } );\n        }\n        else {\n            // Insert values into the target table\n            let set = {\n                [join.child.toString()]: parentId\n            };\n\n            for ( let i = 0, ien = fields.length ; i < ien ; i++ ) {\n                let field = fields[i];\n\n                if ( field.apply('create', data) ) {\n                    set[ field.dbField() ] = field.val( 'set', data );\n                }\n            }\n\n            await db( this._table )\n                .insert( set );\n        }\n    }\n\n    private _prepare( editor: Editor ): void {\n        this._editor = editor;\n\n        let links = this._links;\n        let editorTable = editor.table()[0];\n        let joinTable = this.table();\n\n        // FUTURE aliasParentTable\n\n        if ( links.length === 2 ) {\n            // No link table\n            let f1 = links[0].split('.');\n            let f2 = links[1].split('.');\n\n            if ( f1[0] === editorTable ) {\n                this._join.parent = f1[1];\n                this._join.child = f2[1];\n            }\n            else {\n                this._join.parent = f2[1];\n                this._join.child = f1[1];\n            }\n        }\n        else {\n            // Link table\n            let f1 = links[0].split('.');\n            let f2 = links[1].split('.');\n            let f3 = links[2].split('.');\n            let f4 = links[3].split('.');\n\n            // Discover the name of the link table\n            if ( f1[0] !== editorTable && f1[0] !== joinTable ) {\n                this._join.table = f1[0];\n            }\n            else if ( f2[0] !== editorTable && f2[0] !== joinTable ) {\n                this._join.table = f2[0];\n            }\n            else if ( f3[0] !== editorTable && f3[0] !== joinTable ) {\n                this._join.table = f3[0];\n            }\n            else {\n                this._join.table = f4[0];\n            }\n\n            this._join.parent = [ f1[1], f2[1] ];\n            this._join.child = [ f3[1], f4[1] ];\n        }\n    }\n\n    private async _validateFields( errors, editor: Editor, data: object, prefix: string ): Promise<void> {\n        let fields = this.fields();\n\n        for ( let i = 0, ien = fields.length ; i < ien ; i++ ) {\n            let field = fields[i];\n            let validation = await field.validate( data, editor );\n\n            if ( validation !== true ) {\n                errors.push( {\n                    name: prefix + field.name(),\n                    status: validation\n                } );\n            }\n        }\n    }\n}\n"]}