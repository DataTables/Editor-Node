{"version":3,"sources":["mjoin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,iCAAuC;AACvC,qCAAmC;AACnC,2CAAsC;AAiBtC;;;;;;;;;;;;;;;;GAgBG;AACH;IAAmC,yBAAU;IA0B5C;;OAEG;IAEH;;;;OAIG;IACH,eAAY,KAAa;QAAzB,YACC,iBAAO,SAIP;QA9BO,UAAI,GAAY,IAAI,CAAC;QACrB,eAAS,GAAgB,EAAE,CAAC;QAC5B,UAAI,GAAY,eAAO,CAAC,IAAI,CAAC;QAC7B,YAAM,GAAU,EAAE,CAAC;QACnB,aAAO,GAAY,EAAE,CAAC;QACtB,YAAM,GAAa,EAAE,CAAC;QAEtB,WAAK,GAAe;YAC3B,KAAK,EAAE,EAAE;YACT,MAAM,EAAE,EAAE;SACV,CAAC;QACM,iBAAW,GAGd,EAAE,CAAC;QAcP,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAClB,KAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;IAClB,CAAC;IAcM,qBAAK,GAAZ,UAAa,WAA2B;QACvC,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;YACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBACxD,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,WAAW,EAAE;oBAC3C,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;iBACvB;aACD;YAED,MAAM,IAAI,KAAK,CAAC,iBAAiB,GAAG,WAAW,CAAC,CAAC;SACjD;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/B,OAAO,IAAI,CAAC;IACb,CAAC;IAaM,sBAAM,GAAb;QAAc,gBAAkB;aAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;YAAlB,2BAAkB;;QAC/B,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YAChD,OAAO,IAAI,CAAC,OAAO,CAAC;SACpB;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAE9C,OAAO,IAAI,CAAC;IACb,CAAC;IAgBM,mBAAG,GAAV,UAAW,IAAc;QACxB,IAAI,IAAI,KAAK,SAAS,EAAE;YACvB,OAAO,IAAI,CAAC,IAAI,CAAC;SACjB;QAED,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,OAAO,IAAI,CAAC;IACb,CAAC;IAuBM,wBAAQ,GAAf,UACC,KAAa,EACb,MAAyB,EACzB,QAAwC,EACxC,MAAsC;QADtC,yBAAA,EAAA,oBAAwC;QACxC,uBAAA,EAAA,kBAAsC;QAEtC,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;YACjC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;gBACnB,MAAM,EAAE,EAAE;gBACV,MAAM,EAAE,EAAE;gBACV,EAAE,EAAE,MAAM;gBACV,QAAQ,EAAE,EAAE;gBACZ,KAAK,OAAA;aACL,CAAC,CAAC;SACH;aACI;YACJ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;gBACnB,MAAM,QAAA;gBACN,MAAM,QAAA;gBACN,QAAQ,UAAA;gBACR,KAAK,OAAA;aACL,CAAC,CAAC;SACH;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAED;;;;;;;;;;;;;;;;;OAiBG;IACI,oBAAI,GAAX,UAAY,MAAc,EAAE,MAAc;QACzC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;YAC7D,MAAM,IAAI,KAAK,CAAC,mEAAmE,CAAC,CAAC;SACrF;QAED,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YAC7B,MAAM,IAAI,KAAK,CACd,0EAA0E,CAC1E,CAAC;SACF;QAED,wCAAwC;QACxC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEzB,OAAO,IAAI,CAAC;IACb,CAAC;IAoBM,oBAAI,GAAX,UAAY,IAAa;QACxB,IAAI,IAAI,KAAK,SAAS,EAAE;YACvB,OAAO,IAAI,CAAC,KAAK,CAAC;SAClB;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,OAAO,IAAI,CAAC;IACb,CAAC;IAeM,qBAAK,GAAZ,UAAa,KAAc;QAC1B,IAAI,KAAK,KAAK,SAAS,EAAE;YACxB,OAAO,IAAI,CAAC,MAAM,CAAC;SACnB;QAED,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,OAAO,IAAI,CAAC;IACb,CAAC;IAoBM,mBAAG,GAAV,UAAW,IAAc;QACxB,IAAI,IAAI,KAAK,SAAS,EAAE;YACvB,OAAO,IAAI,CAAC,IAAI,CAAC;SACjB;QAED,IAAI,IAAI,KAAK,IAAI,EAAE;YAClB,IAAI,CAAC,IAAI,GAAG,eAAO,CAAC,IAAI,CAAC;SACzB;aACI,IAAI,IAAI,KAAK,KAAK,EAAE;YACxB,IAAI,CAAC,IAAI,GAAG,eAAO,CAAC,IAAI,CAAC;SACzB;aACI;YACJ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACjB;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAoBM,qBAAK,GAAZ,UAAa,KAAc;QAC1B,IAAI,KAAK,KAAK,SAAS,EAAE;YACxB,OAAO,IAAI,CAAC,MAAM,CAAC;SACnB;QAED,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,OAAO,IAAI,CAAC;IACb,CAAC;IAED;;;;;;OAMG;IACI,yBAAS,GAAhB,UAAiB,SAAiB,EAAE,EAAmB;QACtD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;YACrB,SAAS,WAAA;YACT,EAAE,IAAA;SACF,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACb,CAAC;IAgBM,qBAAK,GAAZ,UAAa,IAAU;QACtB,IAAI,IAAI,KAAK,SAAS,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC;SACnB;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEvB,OAAO,IAAI,CAAC;IACb,CAAC;IAED;;OAEG;IAEH;;OAEG;IACU,oBAAI,GAAjB,UAAkB,MAAc,EAAE,QAAqB;;;;;;wBACtD,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;4BACf,sBAAO;yBACP;wBAED,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;wBAClB,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;wBACvB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;wBAEtB,sEAAsE;wBACtE,kEAAkE;wBAClE,yBAAyB;wBACzB,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE;4BAC7B,MAAM,IAAI,KAAK,CACd,iFAAiF,CACjF,CAAC;yBACF;6BAEG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAApB,wBAAoB;wBAGnB,QAAQ,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC7B,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;wBACtD,aAAa,GAChB,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;wBACrE,UAAU,GACb,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;wBAC9E,eAAe,GAClB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;wBAE9E,UAAU,GACb,SAAS,KAAK,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;4BAC9B,aAAa,GAAG,GAAG,GAAG,SAAS,KAAK,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;wBAGlD,KAAK,GAAG,MAAM;6BAChB,EAAE,EAAE;6BACJ,KAAK,CAAC,QAAQ,CAAC;6BACf,MAAM,CAAC,aAAa,GAAG,GAAG,GAAG,SAAS,GAAG,mBAAmB,CAAC,CAAC;wBAE5D,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;wBACzB,IAAI,KAAK,EAAE;4BACN,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;4BAEzB,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;gCACjB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;6BAC1B;iCACI;gCACJ,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;6BACjB;yBACD;wBAED,KAAS,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;4BAC9C,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;4BAEtB,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,QAAQ,EAAE,KAAK,SAAS,EAAE;gCACrD,OAAO,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;gCAE9B,IAAI,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;oCAChC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,GAAG,OAAO,GAAG,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC;iCACjE;qCACI,IAAI,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;oCACrC,KAAK,CAAC,MAAM,CAAC,eAAe,GAAG,GAAG,GAAG,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC,CAAC;iCACjE;qCACI;oCACJ,KAAK,CAAC,MAAM,CAAC,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC,CAAC;iCACzC;6BACD;yBACD;wBAED,mBAAmB;wBACnB,IAAI,IAAI,CAAC,KAAK,EAAE;4BACf,KAAK,CAAC,SAAS,CACd,IAAI,CAAC,KAAK,EACV,aAAa,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EACpC,GAAG,EACH,IAAI,CAAC,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CACjC,CAAC;4BACF,KAAK,CAAC,SAAS,CACd,UAAU,GAAG,MAAM,GAAG,eAAe,EACrC,eAAe,GAAG,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EACrC,GAAG,EACH,IAAI,CAAC,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAChC,CAAC;yBACF;6BACI;4BACJ,KAAK,CAAC,SAAS,CACd,UAAU,GAAG,MAAM,GAAG,eAAe,EACrC,eAAe,GAAG,GAAG,GAAG,IAAI,CAAC,KAAK,EAClC,GAAG,EACH,aAAa,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CACjC,CAAC;yBACF;wBAED,IAAA,kBAAQ,EAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;wBAChC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;wBAEpB,SAAS,GAAG,EAAE,CAAC;wBACnB,IAAI,IAAI,CAAC,WAAW,CAAC,aAAa,GAAG,GAAG,GAAG,SAAS,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;4BACxE,SAAS,GAAG,aAAa,GAAG,GAAG,GAAG,SAAS,CAAC;yBAC5C;6BACI,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;4BAClE,SAAS,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;yBACjC;6BACI,IAAI,CAAC,UAAU,EAAE;4BACrB,MAAM,IAAI,KAAK,CACd,mCAAmC;gCAClC,SAAS;gCACT,kBAAkB;gCAClB,4DAA4D;gCAC5D,qDAAqD,CACtD,CAAC;yBACF;wBAED,4DAA4D;wBAC5D,6EAA6E;wBAC7E,wDAAwD;wBACxD,4EAA4E;wBAC5E,sCAAsC;wBACtC,kFAAkF;wBAClF,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,EAAE;4BAC5B,OAAO,GAAG,EAAE,CAAC;4BACb,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;4BAEzB,KAAS,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gCAC5C,SAAS,GAAG,UAAU;oCACzB,CAAC,CAAE,IAAI,CAAC,CAAC,CAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAC;oCAC1D,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gCAEtC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;6BACxB;4BAED,KAAK,CAAC,OAAO,CAAC,aAAa,GAAG,GAAG,GAAG,SAAS,EAAE,OAAO,CAAC,CAAC;yBACxD;wBAES,qBAAM,KAAK,EAAA;;wBAAjB,GAAG,GAAG,SAAW;wBAGjB,OAAO,GAAG,EAAE,CAAC;wBAEjB,KAAS,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;4BAC3C,KAAK,GAAG,EAAE,CAAC;4BAEf,KAAS,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gCAClD,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;6BAC/B;4BAEG,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;4BAElC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gCACrB,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;6BACrB;4BAED,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;yBAC5B;wBAED,qEAAqE;wBACrE,kBAAkB;wBAClB,KAAS,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;4BACrD,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BACxB,SAAS,GAAG,UAAU;gCACzB,CAAC,CAAE,IAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAC;gCACvD,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;4BAEnC,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;gCACvB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;6BACtC;iCACI;gCACJ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;6BACtB;yBACD;;;;;;KAEF;IAED;;;;;;;;OAQG;IACU,uBAAO,GAApB,UAAqB,OAAO,EAAE,EAAE,EAAE,OAAO;;;;;;wBACpC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;wBAGlB,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBACvC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBAClB,QAAQ,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;6BAE3B,QAAQ,EAAR,wBAAQ;wBACA,qBAAM,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,EAAA;;wBAAvC,IAAI,GAAG,SAAgC;wBAE3C,IAAI,IAAI,EAAE;4BACL,SAAO,IAAI,CAAC,IAAI,EAAE,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;4BAElD,OAAO,CAAC,MAAI,CAAC,GAAG,IAAI,CAAC;yBACrB;;;wBAX2C,CAAC,EAAE,CAAA;;;;;;KAcjD;IAED;;OAEG;IACU,sBAAM,GAAnB,UAAoB,MAAc,EAAE,QAAgB,EAAE,IAAY;;;;;;wBACjE,eAAe;wBACf,IAAI,IAAI,CAAC,IAAI,KAAK,eAAO,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,eAAO,CAAC,IAAI,EAAE;4BAC/D,sBAAO;yBACP;wBAED,mEAAmE;wBACnE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,EAAE;4BAC3D,sBAAO;yBACP;wBAED,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;wBAClB,EAAE,GAAG,MAAM,CAAC,EAAE,EAAE,CAAC;wBAEZ,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBACrD,qBAAM,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAA;;wBAArD,SAAqD,CAAC;;;wBADC,CAAC,EAAE,CAAA;;;;;;KAG3D;IAED;;OAEG;IACU,sBAAM,GAAnB,UAAoB,MAAc,EAAE,QAAgB,EAAE,IAAY;;;;;wBACjE,eAAe;wBACf,IAAI,IAAI,CAAC,IAAI,KAAK,eAAO,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,eAAO,CAAC,IAAI,EAAE;4BAC7D,sBAAO;yBACP;wBAED,mEAAmE;wBACnE,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,SAAS,EAAE;4BACnD,sBAAO;yBACP;wBAED,2DAA2D;wBAC3D,0CAA0C;wBAC1C,qBAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAA;;wBAFrC,2DAA2D;wBAC3D,0CAA0C;wBAC1C,SAAqC,CAAC;wBACtC,qBAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,EAAA;;wBAAzC,SAAyC,CAAC;;;;;KAC1C;IAED;;OAEG;IACU,sBAAM,GAAnB,UAAoB,MAAc,EAAE,GAAa;;;;;;;wBAChD,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;4BACf,sBAAO;yBACP;wBAED,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;wBAClB,EAAE,GAAG,MAAM,CAAC,EAAE,EAAE,CAAC;wBACjB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;6BAElB,IAAI,CAAC,KAAK,EAAV,wBAAU;wBACT,KAAK,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAEtC,KAAS,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;4BAC/C,KAAK,CAAC,OAAO,WAAE,GAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAG,GAAG,CAAC,CAAC,CAAC,MAAE,CAAC;yBAC1C;wBAED,qBAAM,KAAK,EAAA;;wBAAX,SAAW,CAAC;;;wBAGR,UAAQ,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBAEvC,OAAK,CAAC,KAAK,CAAC;;4BACX,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gCAC/C,OAAK,CAAC,OAAO,WAAE,GAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAG,GAAG,CAAC,CAAC,CAAC,MAAE,CAAC;6BACjD;wBACF,CAAC,CAAC,CAAC;wBAEH,IAAI,CAAC,WAAW,CAAC,OAAK,CAAC,CAAC;wBAExB,qBAAM,OAAK,EAAA;;wBAAX,SAAW,CAAC;;;;;;KAEb;IAED;;OAEG;IACU,wBAAQ,GAArB,UAAsB,MAAM,EAAE,MAAc,EAAE,IAAY,EAAE,MAAc;;;;;;wBACzE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;4BACf,sBAAO;yBACP;wBAED,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;wBAClB,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;wBAClC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,IAAI,IAAI,CAAC;wBAE9D,2DAA2D;wBAC3D,IAAI,MAAM,KAAK,MAAM,IAAI,cAAc,KAAK,IAAI,EAAE;4BACjD,sBAAO;yBACP;wBAEQ,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBACjD,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;wBAC1B,qBAAM,SAAS,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EAAA;;wBAAlD,GAAG,GAAG,SAA4C;wBAEtD,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;4BAC5B,MAAM,CAAC,IAAI,CAAC;gCACX,IAAI,EAAE,SAAS,CAAC,SAAS;gCACzB,MAAM,EAAE,GAAG;6BACX,CAAC,CAAC;yBACH;;;wBATsD,CAAC,EAAE,CAAA;;;wBAYlD,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,QAAQ,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBAC7C,qBAAM,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,KAAK,EAAE,MAAM,CAAC,EAAA;;wBAAnF,SAAmF,CAAC;;;wBADrC,CAAC,EAAE,CAAA;;;;;;KAGnD;IAED;;OAEG;IACK,2BAAW,GAAnB,UAAoB,KAAkC;QACrD,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QAExB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YACjD,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACtB;IACF,CAAC;IAEa,uBAAO,GAArB,UAAsB,EAAQ,EAAE,QAAgB,EAAE,IAAY;;;;;;;wBACzD,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;wBAClB,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;6BAEvB,IAAI,CAAC,KAAK,EAAV,wBAAU;wBACb,kCAAkC;wBAClC,qBAAM,EAAE;iCACN,MAAM;gCACN,GAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAG,QAAQ;gCAC1B,GAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oCACnC;iCACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAA;;wBANlB,kCAAkC;wBAClC,SAKkB,CAAC;;;wBAIf,GAAG;4BACN,GAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAG,QAAQ;+BACjC,CAAC;wBAEF,KAAS,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;4BAC9C,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;4BAEtB,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE;gCAChC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;6BAC9C;yBACD;wBAED,qBAAM,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAA;;wBAAtC,SAAsC,CAAC;;;;;;KAExC;IAEO,wBAAQ,GAAhB,UAAiB,MAAc;QAC9B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QACxB,IAAI,WAAW,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;QACpC,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QAC7B,IAAI,aAAa,GAChB,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;QAElF,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,gBAAgB;YAChB,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC7B,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAE7B,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,aAAa,EAAE;gBAC5B,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC1B,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;aACzB;iBACI;gBACJ,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC1B,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;aACzB;SACD;aACI;YACJ,aAAa;YACb,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC7B,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC7B,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC7B,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAE7B,sCAAsC;YACtC,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,aAAa,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;gBACnD,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;aACzB;iBACI,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,aAAa,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;gBACxD,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;aACzB;iBACI,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,aAAa,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;gBACxD,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;aACzB;iBACI;gBACJ,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;aACzB;YAED,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;SAClC;IACF,CAAC;IAEa,+BAAe,GAA7B,UACC,MAAM,EACN,MAAc,EACd,IAAY,EACZ,MAAc,EACd,MAAc;;;;;;wBAEV,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;wBAElB,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBACvC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBACL,qBAAM,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,EAAA;;wBAA7D,UAAU,GAAG,SAAgD;wBAEjE,IAAI,UAAU,KAAK,IAAI,EAAE;4BACxB,MAAM,CAAC,IAAI,CAAC;gCACX,IAAI,EAAE,MAAM,GAAG,KAAK,CAAC,IAAI,EAAE;gCAC3B,MAAM,EAAE,UAAU;6BAClB,CAAC,CAAC;yBACH;;;wBAT4C,CAAC,EAAE,CAAA;;;;;;KAWjD;IA7wBa,aAAO,GAAG,eAAO,CAAC;IA8wBjC,YAAC;CA/wBD,AA+wBC,CA/wBkC,oBAAU,GA+wB5C;kBA/wBoB,KAAK","file":"mjoin.js","sourcesContent":["import * as knex from 'knex';\nimport {Knex} from 'knex';\n\nimport Editor, {IDtRequest, IDtResponse, ILeftJoin} from './editor';\nimport Field, {SetType} from './field';\nimport {leftJoin} from './helpers';\nimport NestedData from './nestedData';\n\ninterface IJoinTable {\n\ttable?: string;\n\tparent: string | string[];\n\tchild: string | string[];\n}\n\n/**\n * Grouped validation\n */\nexport type IMjoinValidator = (\n\teditor: Editor,\n\taction: string,\n\tdata: IDtRequest\n) => Promise<true | string>;\n\n/**\n * The MJoin class provides a one-to-many join link for Editor. This can\n * be useful in cases were an attribute can take multiple values at the\n * same time - for example cumulative security access levels.\n *\n * Typically the MJoin class should be used with a link table, but this is\n * optional. Please note that if you don't use a link table you should be\n * aware that on edit the linked rows are deleted and then reinserted, thus\n * if any values should be retained they should also be submitted.\n *\n * Please refer to the Editor Node documentation for further information\n * https://editor.datatables.net/manual/node\n *\n * @export\n * @class Mjoin\n * @extends {NestedData}\n */\nexport default class Mjoin extends NestedData {\n\tpublic static SetType = SetType;\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Private parameters\n\t */\n\n\tprivate _table: string;\n\tprivate _editor: Editor;\n\tprivate _name: string;\n\tprivate _get: boolean = true;\n\tprivate _leftJoin: ILeftJoin[] = [];\n\tprivate _set: SetType = SetType.Both;\n\tprivate _where: any[] = [];\n\tprivate _fields: Field[] = [];\n\tprivate _links: string[] = [];\n\tprivate _order: string;\n\tprivate _join: IJoinTable = {\n\t\tchild: '',\n\t\tparent: ''\n\t};\n\tprivate _validators: Array<{\n\t\tfieldName: string;\n\t\tfn: IMjoinValidator;\n\t}> = [];\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Constructor\n\t */\n\n\t/**\n\t * Creates an instance of Mjoin.\n\t *\n\t * @param {string} table Table name being joined to\n\t */\n\tconstructor(table: string) {\n\t\tsuper();\n\n\t\tthis.table(table);\n\t\tthis.name(table);\n\t}\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Public methods\n\t */\n\n\t/**\n\t * Get or field by name, or add a field instance.\n\t *\n\t * @param {(Field|string)} nameOrField Field instance to add, or field name to get\n\t * @returns Mjoin instance if adding a field, Field instance if getting a field.\n\t */\n\tpublic field(nameOrField: string);\n\tpublic field(nameOrField: Field);\n\tpublic field(nameOrField: Field | string) {\n\t\tif (typeof nameOrField === 'string') {\n\t\t\tfor (let i = 0, ien = this._fields.length; i < ien; i++) {\n\t\t\t\tif (this._fields[i].name() === nameOrField) {\n\t\t\t\t\treturn this._fields[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new Error('Unknown field: ' + nameOrField);\n\t\t}\n\n\t\tthis._fields.push(nameOrField);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the fields assigned to this instance.\n\t * @returns {Field[]} Array of fields\n\t */\n\tpublic fields(): Field[];\n\t/**\n\t * Add one or more fields to the instance.\n\t * @param {...Field[]} fields Fields to add\n\t * @returns {Mjoin} Self for chaining\n\t */\n\tpublic fields(...fields: Field[]): Mjoin;\n\tpublic fields(...fields: Field[]): any {\n\t\tif (fields === undefined || fields.length === 0) {\n\t\t\treturn this._fields;\n\t\t}\n\n\t\tthis._fields.push.apply(this._fields, fields);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the `get` flag for all fields in the Mjoin instance.\n\t *\n\t * @returns {boolean} True if gettable, false otherwise.\n\t */\n\tpublic get(): boolean;\n\t/**\n\t * Set the `get` flag for all fields in the Mjoin instance.\n\t * When set to false no read operations will occur on the join tables.\n\t *\n\t * @param {boolean} flag `true` to mark as readable, false otherwise\n\t * @returns {Mjoin} Self for chaining\n\t */\n\tpublic get(flag: boolean): Mjoin;\n\tpublic get(flag?: boolean): any {\n\t\tif (flag === undefined) {\n\t\t\treturn this._get;\n\t\t}\n\n\t\tthis._get = flag;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a left join condition to the Mjoin instance, allowing it to operate\n\t * over multiple tables.\n\t *\n\t * In this form the method will take a function as the second parameter which\n\t * is a Knex callback function allowing a complex join expression to be built.\n\t * @param {string} table Table name to do a join onto\n\t * @param {function} condition\n\t * @returns {Editor} Self for chaining\n\t */\n\tpublic leftJoin(table: string, condition: Function): Mjoin;\n\t/**\n\t * Add a left join condition to the Mjoin instance, allowing it to operate\n\t * over multiple tables.\n\t * @param {string} table Table name to do a join onto\n\t * @param {string} field1 Field from the parent table to use as the join link\n\t * @param {string} operator Join condition (`=`, '<`, etc)\n\t * @param {string} field2 Field from the child table to use as the join link\n\t * @returns {Editor} Self for chaining\n\t */\n\tpublic leftJoin(table: string, field1: string, operator: string, field2: string): Mjoin;\n\tpublic leftJoin(\n\t\ttable: string,\n\t\tfield1: string | Function,\n\t\toperator: string | undefined = undefined,\n\t\tfield2: string | undefined = undefined\n\t): Mjoin {\n\t\tif (typeof field1 === 'function') {\n\t\t\tthis._leftJoin.push({\n\t\t\t\tfield1: '',\n\t\t\t\tfield2: '',\n\t\t\t\tfn: field1,\n\t\t\t\toperator: '',\n\t\t\t\ttable\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis._leftJoin.push({\n\t\t\t\tfield1,\n\t\t\t\tfield2,\n\t\t\t\toperator,\n\t\t\t\ttable\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Create a join link between two tables. The order of the fields does not\n\t * matter, but each field must contain the table name as well as the field\n\t * name.\n\t *\n\t * This method can be called a maximum of two times for an Mjoin instance:\n\t *\n\t * * First time, creates a link between the Editor host table and a join\n\t *   table\n\t * * Second time creates the links required for a link table.\n\t *\n\t * Please refer to the Editor Mjoin documentation for further details:\n\t * https://editor.datatables.net/manual/php\n\t *\n\t * @param {string} field1 Table and field name\n\t * @param {string} field2 Table and field name\n\t * @returns {Mjoin} Self for chaining\n\t */\n\tpublic link(field1: string, field2: string): Mjoin {\n\t\tif (field1.indexOf('.') === -1 || field2.indexOf('.') === -1) {\n\t\t\tthrow new Error('Mjoin fields must contain both the table name and the column name');\n\t\t}\n\n\t\tif (this._links.length === 4) {\n\t\t\tthrow new Error(\n\t\t\t\t'Mjoin link method cannot be called more than twice for a single instance'\n\t\t\t);\n\t\t}\n\n\t\t// Add to list - it is resolved later on\n\t\tthis._links.push(field1);\n\t\tthis._links.push(field2);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the instance's configured name.\n\t *\n\t * The `name` of the Join is the JSON property key that is used when\n\t * 'getting' the data, and the HTTP property key (in a JSON style) when\n\t * 'setting' data. Typically the name of the db table will be used here,\n\t * but this method allows that to be overridden.\n\t *\n\t * @returns {string} Current name.\n\t */\n\tpublic name(): string;\n\t/**\n\t * Set the instance's name\n\t *\n\t * @param {string} name Name to set\n\t * @returns {Mjoin} Self for chaining\n\t */\n\tpublic name(name: string): Mjoin;\n\tpublic name(name?: string): any {\n\t\tif (name === undefined) {\n\t\t\treturn this._name;\n\t\t}\n\n\t\tthis._name = name;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the column name to order the data by\n\t *\n\t * @returns {string} SQL column name\n\t */\n\tpublic order(): string;\n\t/**\n\t * Specify the property that the data will be sorted by.\n\t *\n\t * @param {string} order SQL column name to order the data by\n\t * @returns {Mjoin} Self for chaining\n\t */\n\tpublic order(order: string): Mjoin;\n\tpublic order(order?: string): any {\n\t\tif (order === undefined) {\n\t\t\treturn this._order;\n\t\t}\n\n\t\tthis._order = order;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the current `set` property for the field.\n\t *\n\t * @returns {SetType} Set configuration\n\t */\n\tpublic set(): SetType;\n\t/**\n\t * Set the field's `set` configuration.\n\t *\n\t * A field can be marked as read only using this option, to be set only\n\t * during an create or edit action or to be set during both actions. This\n\t * provides the ability to have fields that are only set when a new row is\n\t * created (for example a \"created\" time stamp).\n\t *\n\t * @param {(boolean|SetType)} flag Set flag.\n\t * @returns {Field} Self for chaining.\n\t */\n\tpublic set(flag: boolean | SetType): Field;\n\tpublic set(flag?: boolean): any {\n\t\tif (flag === undefined) {\n\t\t\treturn this._set;\n\t\t}\n\n\t\tif (flag === true) {\n\t\t\tthis._set = SetType.Both;\n\t\t}\n\t\telse if (flag === false) {\n\t\t\tthis._set = SetType.None;\n\t\t}\n\t\telse {\n\t\t\tthis._set = flag;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get join table name.\n\t *\n\t * Please note that this will also set the {@link name} used by the Join\n\t * as well. This is for convenience as the JSON output / HTTP input will\n\t * typically use the same name as the database name. If you want to set a\n\t * custom name, the {@link name} method must be called ***after*** this one.\n\t *\n\t * @returns {string} Join table name\n\t */\n\tpublic table(): string;\n\t/**\n\t * Set column join name\n\t *\n\t * @param {string} table Join table name\n\t * @returns {Mjoin} Self for chaining\n\t */\n\tpublic table(table: string): Mjoin;\n\tpublic table(table?: string): any {\n\t\tif (table === undefined) {\n\t\t\treturn this._table;\n\t\t}\n\n\t\tthis._table = table;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set a validator for the array of data (not on a field basis)\n\t *\n\t * @param fieldName Name of the field that any error should be shown\n\t *   against on the client-side\n\t * @param fn Callback function for validation\n\t */\n\tpublic validator(fieldName: string, fn: IMjoinValidator): this {\n\t\tthis._validators.push({\n\t\t\tfieldName,\n\t\t\tfn\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the array of conditions applied to the method.\n\t *\n\t * @returns {any[]} Knex where conditions.\n\t */\n\tpublic where(): any[];\n\t/**\n\t * Where condition to add to the query used to get data from the database.\n\t * Note that this is applied to the child table.\n\t *\n\t * @param {*} cond Knex query condition\n\t * @returns {Mjoin} Self for chaining.\n\t */\n\tpublic where(cond: any): Mjoin;\n\tpublic where(cond?: any): any {\n\t\tif (cond === undefined) {\n\t\t\treturn this._where;\n\t\t}\n\n\t\tthis._where.push(cond);\n\n\t\treturn this;\n\t}\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Internal methods\n\t */\n\n\t/**\n\t * @ignore\n\t */\n\tpublic async data(editor: Editor, response: IDtResponse): Promise<void> {\n\t\tif (!this._get) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._prepare(editor);\n\t\tlet fields = this.fields();\n\t\tlet join = this._join;\n\n\t\t// This is something that will likely come in a future version, but it\n\t\t// is a relatively low use feature. Please get in touch if this is\n\t\t// something you require.\n\t\tif (editor.pkey().length > 1) {\n\t\t\tthrow new Error(\n\t\t\t\t'Mjoin is not currently supported with a compound primary key for the main table'\n\t\t\t);\n\t\t}\n\n\t\tif (response.data.length) {\n\t\t\t// If the Editor primary key is join key, then it is read automatically\n\t\t\t// and into Editor's primary key store\n\t\t\tlet dteTable = editor.table()[0];\n\t\t\tlet joinField = join.table ? join.parent[0] : join.parent;\n\t\t\tlet dteTableAlias =\n\t\t\t\tdteTable.indexOf(' ') !== -1 ? dteTable.split(/ (as )?/i)[2] : dteTable;\n\t\t\tlet mJoinTable =\n\t\t\t\tthis._table.indexOf(' ') !== -1 ? this._table.split(/ (as )?/i)[0] : this._table;\n\t\t\tlet mJoinTableAlias =\n\t\t\t\tthis._table.indexOf(' ') !== -1 ? this._table.split(/ (as )?/i)[2] : this._table;\n\n\t\t\tlet pkeyIsJoin =\n\t\t\t\tjoinField === editor.pkey()[0] ||\n\t\t\t\tdteTableAlias + '.' + joinField === editor.pkey()[0];\n\n\t\t\t// Build the basic query\n\t\t\tlet query = editor\n\t\t\t\t.db()\n\t\t\t\t.table(dteTable)\n\t\t\t\t.select(dteTableAlias + '.' + joinField + ' as dteditor_pkey');\n\n\t\t\tlet order = this.order();\n\t\t\tif (order) {\n\t\t\t\tlet a = order.split(' ');\n\n\t\t\t\tif (a.length > 1) {\n\t\t\t\t\tquery.orderBy(a[0], a[1]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tquery.orderBy(a);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let i = 0, ien = fields.length; i < ien; i++) {\n\t\t\t\tlet field = fields[i];\n\n\t\t\t\tif (field.apply('get') && field.getValue() === undefined) {\n\t\t\t\t\tlet dbField = field.dbField();\n\n\t\t\t\t\tif (dbField.indexOf('(') !== -1) {\n\t\t\t\t\t\tquery.select(editor.db().raw(dbField + ' as \"' + dbField + '\"'));\n\t\t\t\t\t}\n\t\t\t\t\telse if (dbField.indexOf('.') === -1) {\n\t\t\t\t\t\tquery.select(mJoinTableAlias + '.' + dbField + ' as ' + dbField);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tquery.select(dbField + ' as ' + dbField);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Create the joins\n\t\t\tif (join.table) {\n\t\t\t\tquery.innerJoin(\n\t\t\t\t\tjoin.table,\n\t\t\t\t\tdteTableAlias + '.' + join.parent[0],\n\t\t\t\t\t'=',\n\t\t\t\t\tjoin.table + '.' + join.parent[1]\n\t\t\t\t);\n\t\t\t\tquery.innerJoin(\n\t\t\t\t\tmJoinTable + ' as ' + mJoinTableAlias,\n\t\t\t\t\tmJoinTableAlias + '.' + join.child[0],\n\t\t\t\t\t'=',\n\t\t\t\t\tjoin.table + '.' + join.child[1]\n\t\t\t\t);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tquery.innerJoin(\n\t\t\t\t\tmJoinTable + ' as ' + mJoinTableAlias,\n\t\t\t\t\tmJoinTableAlias + '.' + join.child,\n\t\t\t\t\t'=',\n\t\t\t\t\tdteTableAlias + '.' + join.parent\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tleftJoin(query, this._leftJoin);\n\t\t\tthis._applyWhere(query);\n\n\t\t\tlet readField = '';\n\t\t\tif (this._propExists(dteTableAlias + '.' + joinField, response.data[0])) {\n\t\t\t\treadField = dteTableAlias + '.' + joinField;\n\t\t\t}\n\t\t\telse if (this._propExists(joinField.toString(), response.data[0])) {\n\t\t\t\treadField = joinField.toString();\n\t\t\t}\n\t\t\telse if (!pkeyIsJoin) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Join was performed on the field \"' +\n\t\t\t\t\t\treadField +\n\t\t\t\t\t\t'\" which was not ' +\n\t\t\t\t\t\t'included in the Editor field list. The join field must be ' +\n\t\t\t\t\t\t'included as a regular field in the Editor instance.'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Get list of pkey values and apply as a WHERE IN condition\n\t\t\t// This is primarily useful in server-side processing mode and when filtering\n\t\t\t// the table as it means only a sub-set will be selected\n\t\t\t// This is only applied for \"sensible\" data sets.172 It will just complicate\n\t\t\t// matters for really large data sets:\n\t\t\t// https://stackoverflow.com/questions/21178390/in-clause-limitation-in-sql-server\n\t\t\tif (response.data.length < 1000) {\n\t\t\t\tlet whereIn = [];\n\t\t\t\tlet data = response.data;\n\n\t\t\t\tfor (let i = 0, ien = data.length; i < ien; i++) {\n\t\t\t\t\tlet linkValue = pkeyIsJoin\n\t\t\t\t\t\t? (data[i] as any).DT_RowId.replace(editor.idPrefix(), '')\n\t\t\t\t\t\t: this._readProp(readField, data[i]);\n\n\t\t\t\t\twhereIn.push(linkValue);\n\t\t\t\t}\n\n\t\t\t\tquery.whereIn(dteTableAlias + '.' + joinField, whereIn);\n\t\t\t}\n\n\t\t\tlet res = await query;\n\n\t\t\t// Map the data to the primary key for fast loop up\n\t\t\tlet joinMap = {};\n\n\t\t\tfor (let i = 0, ien = res.length; i < ien; i++) {\n\t\t\t\tlet inner = {};\n\n\t\t\t\tfor (let j = 0, jen = fields.length; j < jen; j++) {\n\t\t\t\t\tfields[j].write(inner, res[i]);\n\t\t\t\t}\n\n\t\t\t\tlet lookup = res[i].dteditor_pkey;\n\n\t\t\t\tif (!joinMap[lookup]) {\n\t\t\t\t\tjoinMap[lookup] = [];\n\t\t\t\t}\n\n\t\t\t\tjoinMap[lookup].push(inner);\n\t\t\t}\n\n\t\t\t// Loop over the data in the original response and do a join based on\n\t\t\t// the mapped data\n\t\t\tfor (let i = 0, ien = response.data.length; i < ien; i++) {\n\t\t\t\tlet data = response.data[i];\n\t\t\t\tlet linkField = pkeyIsJoin\n\t\t\t\t\t? (data as any).DT_RowId.replace(editor.idPrefix(), '')\n\t\t\t\t\t: this._readProp(readField, data);\n\n\t\t\t\tif (joinMap[linkField]) {\n\t\t\t\t\tdata[this._name] = joinMap[linkField];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdata[this._name] = [];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get options for the fields in this join.\n\t *\n\t * @param options Options object\n\t * @param db      Database connection object\n\t * @param refresh Refresh indication flag\n\t *\n\t * @internal\n\t */\n\tpublic async options(options, db, refresh) {\n\t\tlet fields = this.fields();\n\n\t\t// Field options\n\t\tfor (let i = 0, ien = fields.length; i < ien; i++) {\n\t\t\tlet field = fields[i];\n\t\t\tlet optsInst = field.options();\n\n\t\t\tif (optsInst) {\n\t\t\t\tlet opts = await optsInst.exec(db, refresh);\n\n\t\t\t\tif (opts) {\n\t\t\t\t\tlet name = this.name() + '[].' + fields[i].name();\n\n\t\t\t\t\toptions[name] = opts;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic async create(editor: Editor, parentId: string, data: object): Promise<void> {\n\t\t// Not settable\n\t\tif (this._set !== SetType.Create && this._set !== SetType.Both) {\n\t\t\treturn;\n\t\t}\n\n\t\t// The many count for the join was not submitted then we do nothing\n\t\tif (!data[this._name] || !data[this._name + '-many-count']) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._prepare(editor);\n\t\tlet db = editor.db();\n\n\t\tfor (let i = 0, ien = data[this._name].length; i < ien; i++) {\n\t\t\tawait this._insert(db, parentId, data[this._name][i]);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic async update(editor: Editor, parentId: string, data: object): Promise<void> {\n\t\t// Not settable\n\t\tif (this._set !== SetType.Edit && this._set !== SetType.Both) {\n\t\t\treturn;\n\t\t}\n\n\t\t// The many count for the join was not submitted then we do nothing\n\t\tif (data[this._name + '-many-count'] === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\t// WARNING - this will remove rows and then readd them. Any\n\t\t// data not in the field list WILL BE LOST\n\t\tawait this.remove(editor, [parentId]);\n\t\tawait this.create(editor, parentId, data);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic async remove(editor: Editor, ids: string[]): Promise<void> {\n\t\tif (!this._set) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._prepare(editor);\n\t\tlet db = editor.db();\n\t\tlet join = this._join;\n\n\t\tif (join.table) {\n\t\t\tlet query = db.del().from(join.table);\n\n\t\t\tfor (let i = 0, ien = ids.length; i < ien; i++) {\n\t\t\t\tquery.orWhere({[join.parent[1]]: ids[i]});\n\t\t\t}\n\n\t\t\tawait query;\n\t\t}\n\t\telse {\n\t\t\tlet query = db.del().from(this._table);\n\n\t\t\tquery.where(function () {\n\t\t\t\tfor (let i = 0, ien = ids.length; i < ien; i++) {\n\t\t\t\t\tquery.orWhere({[join.child.toString()]: ids[i]});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis._applyWhere(query);\n\n\t\t\tawait query;\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic async validate(errors, editor: Editor, data: object, action: string): Promise<void> {\n\t\tif (!this._set) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._prepare(editor);\n\t\tlet joinData = data[this._name] || [];\n\t\tlet submittedCount = data[this._name + '-many-count'] || null;\n\n\t\t// On edit, an empty submission means we are doing nothing.\n\t\tif (action === 'edit' && submittedCount === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let j = 0, jen = this._validators.length; j < jen; j++) {\n\t\t\tlet validator = this._validators[j];\n\t\t\tlet res = await validator.fn(editor, action, joinData);\n\n\t\t\tif (typeof res === 'string') {\n\t\t\t\terrors.push({\n\t\t\t\t\tname: validator.fieldName,\n\t\t\t\t\tstatus: res\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0, ien = joinData.length; i < ien; i++) {\n\t\t\tawait this._validateFields(errors, editor, joinData[i], this._name + '[].', action);\n\t\t}\n\t}\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Private methods\n\t */\n\tprivate _applyWhere(query: Knex.QueryBuilder<any, any>): void {\n\t\tlet where = this._where;\n\n\t\tfor (let i = 0, ien = where.length; i < ien; i++) {\n\t\t\tquery.where(where[i]);\n\t\t}\n\t}\n\n\tprivate async _insert(db: Knex, parentId: string, data: object): Promise<void> {\n\t\tlet join = this._join;\n\t\tlet fields = this.fields();\n\n\t\tif (join.table) {\n\t\t\t// Insert keys into the join table\n\t\t\tawait db\n\t\t\t\t.insert({\n\t\t\t\t\t[join.parent[1]]: parentId,\n\t\t\t\t\t[join.child[1]]: data[join.child[0]]\n\t\t\t\t})\n\t\t\t\t.from(join.table);\n\t\t}\n\t\telse {\n\t\t\t// Insert values into the target table\n\t\t\tlet set = {\n\t\t\t\t[join.child.toString()]: parentId\n\t\t\t};\n\n\t\t\tfor (let i = 0, ien = fields.length; i < ien; i++) {\n\t\t\t\tlet field = fields[i];\n\n\t\t\t\tif (field.apply('create', data)) {\n\t\t\t\t\tset[field.dbField()] = field.val('set', data);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait db.insert(set).from(this._table);\n\t\t}\n\t}\n\n\tprivate _prepare(editor: Editor): void {\n\t\tthis._editor = editor;\n\n\t\tlet links = this._links;\n\t\tlet editorTable = editor.table()[0];\n\t\tlet joinTable = this.table();\n\t\tlet dteTableAlias =\n\t\t\teditorTable.indexOf(' ') !== -1 ? editorTable.split(/ (as )?/i)[2] : editorTable;\n\n\t\tif (links.length === 2) {\n\t\t\t// No link table\n\t\t\tlet f1 = links[0].split('.');\n\t\t\tlet f2 = links[1].split('.');\n\n\t\t\tif (f1[0] === dteTableAlias) {\n\t\t\t\tthis._join.parent = f1[1];\n\t\t\t\tthis._join.child = f2[1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._join.parent = f2[1];\n\t\t\t\tthis._join.child = f1[1];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Link table\n\t\t\tlet f1 = links[0].split('.');\n\t\t\tlet f2 = links[1].split('.');\n\t\t\tlet f3 = links[2].split('.');\n\t\t\tlet f4 = links[3].split('.');\n\n\t\t\t// Discover the name of the link table\n\t\t\tif (f1[0] !== dteTableAlias && f1[0] !== joinTable) {\n\t\t\t\tthis._join.table = f1[0];\n\t\t\t}\n\t\t\telse if (f2[0] !== dteTableAlias && f2[0] !== joinTable) {\n\t\t\t\tthis._join.table = f2[0];\n\t\t\t}\n\t\t\telse if (f3[0] !== dteTableAlias && f3[0] !== joinTable) {\n\t\t\t\tthis._join.table = f3[0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._join.table = f4[0];\n\t\t\t}\n\n\t\t\tthis._join.parent = [f1[1], f2[1]];\n\t\t\tthis._join.child = [f3[1], f4[1]];\n\t\t}\n\t}\n\n\tprivate async _validateFields(\n\t\terrors,\n\t\teditor: Editor,\n\t\tdata: object,\n\t\tprefix: string,\n\t\taction: string\n\t): Promise<void> {\n\t\tlet fields = this.fields();\n\n\t\tfor (let i = 0, ien = fields.length; i < ien; i++) {\n\t\t\tlet field = fields[i];\n\t\t\tlet validation = await field.validate(data, editor, null, action);\n\n\t\t\tif (validation !== true) {\n\t\t\t\terrors.push({\n\t\t\t\t\tname: prefix + field.name(),\n\t\t\t\t\tstatus: validation\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n"]}