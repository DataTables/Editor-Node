{"version":3,"sources":["columnControl.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,EAAE,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AAC9C,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAE5B,MAAM,CAAC,OAAO,OAAO,aAAa;WACnB,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,IAAI,EAAE,UAAU;IAmCtF;;;;;;;;;OASG;IACH,OAAO,CAAC,MAAM,CAAC,QAAQ;IAuCvB;;;;;;;;OAQG;IACH,OAAO,CAAC,MAAM,CAAC,UAAU;IAuCzB;;;;;;;;OAQG;IACH,OAAO,CAAC,MAAM,CAAC,QAAQ;CAoCvB","file":"columnControl.d.ts","sourcesContent":["import Editor, { IDtRequest } from './editor';\nimport { Knex } from 'knex';\n\nexport default class ColumnControl {\n\tpublic static ssp(editor: Editor, query: Knex.QueryBuilder<any, any>, http: IDtRequest) {\n\t\tfor (let i = 0; i < http.columns.length; i++) {\n\t\t\tlet column = http['columns'][i];\n\n\t\t\tif (column.columnControl) {\n\t\t\t\tlet field = editor.field(column['data']);\n\n\t\t\t\t// `<input>` based searches\n\t\t\t\tif (column.columnControl.search) {\n\t\t\t\t\tlet search = column.columnControl.search;\n\t\t\t\t\tlet value = search.value;\n\t\t\t\t\tlet logic = search.logic;\n\t\t\t\t\tlet type = search.type;\n\n\t\t\t\t\tif (type === 'num') {\n\t\t\t\t\t\tColumnControl._sspNumber(query, field, value, logic);\n\t\t\t\t\t}\n\t\t\t\t\telse if (type === 'date') {\n\t\t\t\t\t\tColumnControl._sspDate(query, field, value, logic, search.mask);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tColumnControl._sspText(query, field, value, logic);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// SearchList\n\t\t\t\tif (column.columnControl.list) {\n\t\t\t\t\tlet list = column.columnControl.list;\n\n\t\t\t\t\tquery.whereIn(field.dbField(), list);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Add conditions to a query for a ColumnControl date search.\n\t *\n\t * @param query Query to add the conditions to\n\t * @param field Field for the column in question\n\t * @param value Search term\n\t * @param logic Search logic\n\t * @param mask Mask value\n\t * @returns void\n\t */\n\tprivate static _sspDate(query, field, value, logic, mask) {\n\t\tlet dbField = field.dbField();\n\t\tlet search = '(?)';\n\n\t\t// Only support date and time masks. This departs from the client side which allows\n\t\t// any component in the date/time to be masked out.\n\t\tif (mask === 'YYYY-MM-DD') {\n\t\t\tdbField = 'DATE(' + dbField + ')';\n\t\t\tsearch = 'DATE(?)';\n\t\t}\n\t\telse if (mask === 'hh:mm:ss') {\n\t\t\tdbField = 'TIME(' + dbField + ')';\n\t\t\tsearch = 'TIME(?)';\n\t\t}\n\n\t\tif (logic === 'empty') {\n\t\t\tquery.whereNull(field.dbField());\n\t\t}\n\t\telse if (logic === 'notEmpty') {\n\t\t\tquery.whereNotNull(field.dbField());\n\t\t}\n\t\telse if (value === '') {\n\t\t\t// Empty search value means no search for the other logic operators\n\t\t\treturn;\n\t\t}\n\t\telse if (logic === 'equal') {\n\t\t\tquery.whereRaw(dbField + ' = ' + search, [value]);\n\t\t}\n\t\telse if (logic === 'notEqual') {\n\t\t\tquery.whereRaw(dbField + ' != ' + search, [value]);\n\t\t}\n\t\telse if (logic === 'greater') {\n\t\t\tquery.whereRaw(dbField + ' > ' + search, [value]);\n\t\t}\n\t\telse if (logic === 'less') {\n\t\t\tquery.whereRaw(dbField + ' < ' + search, [value]);\n\t\t}\n\t}\n\n\t/**\n\t * Add conditions to a query for a ColumnControl number search.\n\t *\n\t * @param query Query to add the conditions to\n\t * @param field Field for the column in question\n\t * @param value Search term\n\t * @param logic Search logic\n\t * @returns void\n\t */\n\tprivate static _sspNumber(query, field, value, logic) {\n\t\tif (logic === 'empty') {\n\t\t\tquery.where((q) => {\n\t\t\t\tq.whereNull(field.dbField());\n\t\t\t\tq.orWhere(field.dbField(), '=', '');\n\t\t\t});\n\t\t}\n\t\telse if (logic === 'notEmpty') {\n\t\t\tquery.where((q) => {\n\t\t\t\tq.whereNotNull(field.dbField());\n\t\t\t\tq.where(field.dbField(), '!=', '');\n\t\t\t});\n\t\t}\n\t\telse if (value === '') {\n\t\t\t// Empty search value means no search for the other logic operators\n\t\t\treturn;\n\t\t}\n\t\telse if (logic === 'equal') {\n\t\t\tquery.where(field.dbField(), '=', value);\n\t\t}\n\t\telse if (logic === 'notEqual') {\n\t\t\tquery.where(field.dbField(), '!=', value);\n\t\t}\n\t\telse if (logic === 'greater') {\n\t\t\tquery.where(field.dbField(), '>', value);\n\t\t}\n\t\telse if (logic === 'greaterOrEqual') {\n\t\t\tquery.where(field.dbField(), '>=', value);\n\t\t}\n\t\telse if (logic === 'less') {\n\t\t\tquery.where(field.dbField(), '<', value);\n\t\t}\n\t\telse if (logic === 'lessOrEqual') {\n\t\t\tquery.where(field.dbField(), '<=', value);\n\t\t}\n\n\t\tconsole.log(query.toSQL());\n\t}\n\n\t/**\n\t * Add conditions to a query for a ColumnControl test search.\n\t *\n\t * @param query Query to add the conditions to\n\t * @param field Field for the column in question\n\t * @param value Search term\n\t * @param logic Search logic\n\t * @returns void\n\t */\n\tprivate static _sspText(query, field, value, logic) {\n\t\tif (logic === 'empty') {\n\t\t\tquery.where((q) => {\n\t\t\t\tq.whereNull(field.dbField());\n\t\t\t\tq.orWhere(field.dbField(), '=', '');\n\t\t\t});\n\t\t}\n\t\telse if (logic === 'notEmpty') {\n\t\t\tquery.where((q) => {\n\t\t\t\tq.whereNotNull(field.dbField());\n\t\t\t\tq.where(field.dbField(), '!=', '');\n\t\t\t});\n\t\t}\n\t\telse if (value === '') {\n\t\t\t// Empty search value means no search for the other logic operators\n\t\t\treturn;\n\t\t}\n\t\telse if (logic === 'equal') {\n\t\t\tquery.where(field.dbField(), '=', value);\n\t\t}\n\t\telse if (logic === 'notEqual') {\n\t\t\tquery.where(field.dbField(), '!=', value);\n\t\t}\n\t\telse if (logic === 'contains') {\n\t\t\tquery.where(field.dbField(), 'like', '%' + value + '%');\n\t\t}\n\t\telse if (logic === 'notContains') {\n\t\t\tquery.where(field.dbField(), 'not like', '%' + value + '%');\n\t\t}\n\t\telse if (logic === 'starts') {\n\t\t\tquery.where(field.dbField(), 'like', value + '%');\n\t\t}\n\t\telse if (logic === 'ends') {\n\t\t\tquery.where(field.dbField(), 'like', '%' + value);\n\t\t}\n\t}\n}\n"]}