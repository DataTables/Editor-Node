{"version":3,"sources":["editor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yBAA2B;AAG3B,iCAAuC;AAGvC,2CAAsC;AAItC;;;;GAIG;AACH,IAAY,MAeX;AAfD,WAAY,MAAM;IACjB,qCAAqC;IACrC,mCAAI,CAAA;IAEJ,wBAAwB;IACxB,uCAAM,CAAA;IAEN,6BAA6B;IAC7B,mCAAI,CAAA;IAEJ,+BAA+B;IAC/B,uCAAM,CAAA;IAEN,qBAAqB;IACrB,uCAAM,CAAA;AACP,CAAC,EAfW,MAAM,GAAN,cAAM,KAAN,cAAM,QAejB;AAyJD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH;IAAoC,0BAAU;IAyD7C;;;;;;;;OAQG;IACH,gBAAa,EAAe,EAAE,KAA6B,EAAE,IAA4B;QAA5E,mBAAA,EAAA,SAAe;QAAE,sBAAA,EAAA,YAA6B;QAAE,qBAAA,EAAA,WAA4B;QAAzF,YACC,iBAAO,SAaP;QA1CO,aAAO,GAAY,EAAE,CAAC;QAGtB,eAAS,GAAW,MAAM,CAAC;QAC3B,WAAK,GAAY,EAAE,CAAC;QACpB,WAAK,GAAa,CAAC,IAAI,CAAC,CAAC;QACzB,YAAM,GAAa,EAAE,CAAC;QACtB,kBAAY,GAAY,KAAK,CAAC;QAC9B,YAAM,GAAG,EAAE,CAAC;QACZ,eAAS,GAAgB,EAAE,CAAC;QAC5B,UAAI,GAAgB,EAAE,CAAC;QACvB,aAAO,GAAG,EAAE,CAAC;QAEb,eAAS,GAAY,KAAK,CAAC;QAG3B,YAAM,GAAY,KAAK,CAAC;QACxB,gBAAU,GAAU,EAAE,CAAC;QAc9B,EAAE,CAAC,CAAE,EAAG,CAAC,CAAC,CAAC;YACV,KAAI,CAAC,EAAE,CAAE,EAAE,CAAE,CAAC;QACf,CAAC;QAED,EAAE,CAAC,CAAE,KAAM,CAAC,CAAC,CAAC;YACb,KAAI,CAAC,KAAK,CAAE,KAAK,CAAE,CAAC;QACrB,CAAC;QAED,EAAE,CAAC,CAAE,IAAK,CAAC,CAAC,CAAC;YACZ,KAAI,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;QACnB,CAAC;;IACF,CAAC;IA3ED;;;;;;;;OAQG;IACW,aAAM,GAApB,UAAsB,IAAgB;QACrC,EAAE,CAAC,CAAE,CAAE,IAAI,IAAI,CAAE,IAAI,CAAC,MAAO,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;QACpB,CAAC;QAED,MAAM,CAAC,CAAE,IAAI,CAAC,MAAO,CAAC,CAAC,CAAC;YACvB,KAAK,QAAQ;gBACZ,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;YAEtB,KAAK,MAAM;gBACV,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;YAEpB,KAAK,QAAQ;gBACZ,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;YAEtB,KAAK,QAAQ;gBACZ,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;YAEtB;gBACC,MAAM,IAAI,KAAK,CAAE,yBAAyB,GAAG,IAAI,CAAC,MAAM,CAAE,CAAC;QAC7D,CAAC;IACF,CAAC;IA+CD;;;OAGG;IACI,qBAAI,GAAX;QACC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IAaM,mBAAE,GAAT,UAAU,EAAS;QAClB,EAAE,CAAC,CAAE,EAAE,KAAK,SAAU,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBAC7B,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBACvB,IAAI,CAAC,GAAG,CAAC;QACX,CAAC;QAED,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAmBM,sBAAK,GAAZ,UAAa,KAAW;QACvB,EAAE,CAAC,CAAE,KAAK,KAAK,SAAU,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAE,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,KAAM,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAED,0BAA0B;QAC1B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAE,KAAK,CAAE,CAAC;QAE9B,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAED;;;;;OAKG;IACI,sBAAK,GAAZ,UAAc,WAAyB;QACtC,EAAE,CAAC,CAAE,OAAO,WAAW,KAAK,QAAS,CAAC,CAAC,CAAC;YACvC,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;gBAC3D,EAAE,CAAC,CAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,WAAY,CAAC,CAAC,CAAC;oBAC9C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACxB,CAAC;YACF,CAAC;YAED,MAAM,IAAI,KAAK,CAAE,iBAAiB,GAAG,WAAW,CAAE,CAAC;QACpD,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAE,WAAW,CAAE,CAAC;QACjC,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAaM,uBAAM,GAAb;QAAc,gBAAkB;aAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;YAAlB,2BAAkB;;QAC/B,EAAE,CAAC,CAAE,MAAM,KAAK,SAAS,IAAI,MAAM,CAAC,MAAM,KAAK,CAAE,CAAC,CAAC,CAAC;YACnD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACrB,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,OAAO,EAAE,MAAM,CAAE,CAAC;QAEhD,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAmBM,yBAAQ,GAAf,UAAgB,QAAiB;QAChC,EAAE,CAAC,CAAE,QAAQ,KAAK,SAAU,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACvB,CAAC;QAED,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAED;;;;;OAKG;IACI,uBAAM,GAAb;QACC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC1B,CAAC;IAsBM,qBAAI,GAAX;QAAY,cAAgB;aAAhB,UAAgB,EAAhB,qBAAgB,EAAhB,IAAgB;YAAhB,yBAAgB;;QAC3B,EAAE,CAAC,CAAE,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,KAAK,CAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACnB,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAE,CAAC;QAE1C,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA+BG;IACI,yBAAQ,GAAf,UAAiB,KAAa,EAAE,MAAc,EAAE,QAAgB,EAAE,MAAc;QAC/E,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE;YACpB,MAAM,QAAA;YACN,MAAM,QAAA;YACN,QAAQ,UAAA;YACR,KAAK,OAAA;SACL,CAAE,CAAC;QAEJ,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAED;;;;;;;OAOG;IACI,mBAAE,GAAT,UAAW,IAAY,EAAE,QAAkB;QAC1C,EAAE,CAAC,CAAE,CAAE,IAAI,CAAC,OAAO,CAAE,IAAI,CAAG,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,OAAO,CAAE,IAAI,CAAE,GAAG,EAAE,CAAC;QAC3B,CAAC;QAED,IAAI,CAAC,OAAO,CAAE,IAAI,CAAE,CAAC,IAAI,CAAE,QAAQ,CAAE,CAAC;QAEtC,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAmBM,sBAAK,GAAZ,UAAa,KAAuB;QACnC,EAAE,CAAC,CAAE,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,KAAK,CAAE,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;QAED,EAAE,CAAC,CAAE,OAAO,KAAK,KAAK,QAAS,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAE,KAAK,CAAE,CAAC;QAC3B,CAAC;QACD,IAAI,CAAC,CAAC;YACL,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAE,CAAC;QAC9C,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAkBM,4BAAW,GAAlB,UAAmB,WAAqB;QACvC,EAAE,CAAC,CAAE,WAAW,KAAK,SAAU,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC1B,CAAC;QAED,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAiBM,qBAAI,GAAX,UAAY,IAAsB;QACjC,EAAE,CAAC,CAAE,IAAI,KAAK,SAAU,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACnB,CAAC;QAED,EAAE,CAAC,CAAE,OAAO,IAAI,KAAK,QAAS,CAAC,CAAC,CAAC;YAEhC,IAAI,CAAC,KAAK,GAAG,CAAE,IAAI,CAAE,CAAC;QACvB,CAAC;QACD,IAAI,CAAC,CAAC;YACL,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACnB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAED;;;;;;;OAOG;IACI,4BAAW,GAAlB,UAAoB,GAAW,EAAE,IAAqB;QAArB,qBAAA,EAAA,YAAqB;QACrD,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QACvB,IAAI,EAAE,GAAG,EAAE,CAAC;QACZ,IAAI,GAAG,CAAC;QAER,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;YACnD,IAAI,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAErB,EAAE,CAAC,CAAE,IAAK,CAAC,CAAC,CAAC;gBACZ,GAAG,GAAG,GAAG,CAAE,MAAM,CAAE,KAAK,SAAS,CAAC,CAAC;oBAClC,GAAG,CAAE,MAAM,CAAE,CAAC,CAAC;oBACf,IAAI,CAAC;YACP,CAAC;YACD,IAAI,CAAC,CAAC;gBACL,GAAG,GAAG,IAAI,CAAC,SAAS,CAAE,MAAM,EAAE,GAAG,CAAE,CAAC;YACrC,CAAC;YAED,EAAE,CAAC,CAAE,GAAG,KAAK,IAAK,CAAC,CAAC,CAAC;gBACpB,MAAM,IAAI,KAAK,CAAE,sDAAsD,CAAE,CAAC;YAC3E,CAAC;YAED,EAAE,CAAC,IAAI,CAAE,GAAG,CAAE,CAAC;QAChB,CAAC;QAED,MAAM,CAAC,EAAE,CAAC,IAAI,CAAE,IAAI,CAAC,cAAc,EAAE,CAAE,CAAC;IACzC,CAAC;IAED;;;;;;;;OAQG;IACI,6BAAY,GAAnB,UAAqB,KAAa,EAAE,IAAqB,EAAE,IAAqB;QAA5C,qBAAA,EAAA,YAAqB;QAAE,qBAAA,EAAA,WAAqB;QAC/E,IAAI,GAAG,GAAW,EAAE,CAAC;QAErB,KAAK,GAAG,KAAK,CAAC,OAAO,CAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAE,CAAC;QAC7C,IAAI,OAAO,GAAG,KAAK,CAAC,KAAK,CAAE,IAAI,CAAC,cAAc,EAAE,CAAE,CAAC;QAEnD,EAAE,CAAC,CAAE,IAAI,KAAK,IAAK,CAAC,CAAC,CAAC;YACrB,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QACpB,CAAC;QAED,EAAE,CAAC,CAAE,IAAI,CAAC,MAAM,KAAK,OAAO,CAAC,MAAO,CAAC,CAAC,CAAC;YACtC,MAAM,IAAI,KAAK,CAAE,gDAAgD,CAAE,CAAC;QACrE,CAAC;QAED,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;YACtD,EAAE,CAAC,CAAE,IAAK,CAAC,CAAC,CAAC;gBACZ,GAAG,CAAE,IAAI,CAAC,CAAC,CAAC,CAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YAC7B,CAAC;YACD,IAAI,CAAC,CAAC;gBACL,IAAI,CAAC,UAAU,CAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAE,CAAC;YAC7C,CAAC;QACF,CAAC;QAED,MAAM,CAAC,GAAG,CAAC;IACZ,CAAC;IAED;;;;;;;;OAQG;IACU,wBAAO,GAApB,UAAsB,IAAgB,EAAE,KAAqB;QAArB,sBAAA,EAAA,YAAqB;;;;;;wBACxD,IAAI,GAAG,IAAI,CAAC;wBACZ,GAAG,GAAG;;;;;;iDACJ,IAAI,CAAC,SAAS,EAAd,wBAAc;;;;4CAEjB,qBAAM,IAAI,CAAC,QAAQ,CAAE,IAAI,EAAE,KAAK,CAAE,EAAA;;4CAAlC,SAAkC,CAAC;;;;4CAEnC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,GAAC,CAAC,OAAO,CAAC;;;gDAK7B,qBAAM,IAAI,CAAC,QAAQ,CAAE,IAAI,EAAE,KAAK,CAAE,EAAA;;4CAAlC,SAAkC,CAAC;;;;;;yBAEpC,CAAC;6BAEG,IAAI,CAAC,YAAY,EAAjB,wBAAiB;wBACrB,qBAAM,IAAI,CAAC,GAAG,CAAC,WAAW,CAAE,UAAe,GAAG;;;;;gDAC7C,IAAI,CAAC,gBAAgB,GAAG,GAAG,CAAC;gDAC5B,qBAAM,GAAG,EAAE,EAAA;;gDAAX,SAAW,CAAC;gDACZ,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;;;;;6BAC7B,CAAE,EAAA;;wBAJH,SAIG,CAAC;;4BAGJ,qBAAM,GAAG,EAAE,EAAA;;wBAAX,SAAW,CAAC;;4BAGb,sBAAO,IAAI,EAAC;;;;KACZ;IAiBM,yBAAQ,GAAf,UAAgB,QAAkB;QACjC,EAAE,CAAC,CAAE,QAAQ,KAAK,SAAU,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACvB,CAAC;QAED,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACU,yBAAQ,GAArB,UAAuB,MAAkB,EAAE,IAAgB;;;;;;wBAC1D,EAAE,CAAC,CAAE,IAAI,CAAC,MAAM,KAAK,QAAQ,IAAI,IAAI,CAAC,MAAM,KAAK,MAAO,CAAC,CAAC,CAAC;4BAC1D,MAAM,gBAAC,IAAI,EAAC;wBACb,CAAC;wBAEG,IAAI,GAAG,MAAM,CAAC,IAAI,CAAE,IAAI,CAAC,IAAI,CAAE,CAAC;wBAChC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;wBACvB,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;wBAErB,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBACtC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAE,IAAI,CAAC,CAAC,CAAC,CAAE,CAAC;wBAExB,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBACxC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBACL,qBAAM,KAAK,CAAC,QAAQ,CAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAE,QAAQ,EAAE,EAAE,CAAE,CAAE,EAAA;;wBAAlF,UAAU,GAAG,SAAqE;wBAEtF,EAAE,CAAC,CAAE,UAAU,KAAK,IAAK,CAAC,CAAC,CAAC;4BAC3B,MAAM,CAAC,IAAI,CAAE;gCACZ,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE;gCAClB,MAAM,EAAE,UAAU;6BAClB,CAAE,CAAC;wBACL,CAAC;;;wBAT6C,CAAC,EAAE,CAAA;;;wBAaxC,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBAChD,qBAAM,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAE,MAAM,EAAE,IAAI,EAAE,MAAM,CAAE,EAAA;;wBAApD,SAAoD,CAAC;;;wBADH,CAAC,EAAE,CAAA;;;wBAhBV,CAAC,EAAE,CAAA;;6BAqBhD,sBAAO,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;4BACzB,KAAK,CAAC,CAAC;4BACP,IAAI,EAAC;;;;KACN;IAcM,0BAAS,GAAhB,UAAiB,EAAqB;QACrC,EAAE,CAAC,CAAE,EAAE,KAAK,SAAU,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACxB,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAeM,sBAAK,GAAZ;QAAa,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QAC1B,EAAE,CAAC,CAAE,IAAI,CAAC,MAAM,KAAK,CAAE,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;QAEzB,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAED;;OAEG;IAEW,2BAAU,GAAxB;;;;;;wBACK,IAAI,GAAG,IAAI,CAAC;wBACZ,GAAG,GAAG,UAAgB,MAAM;;;;;;4CACrB,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM;;;iDAAE,CAAA,CAAC,GAAG,GAAG,CAAA;4CACxC,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;iDAE3B,MAAM,EAAN,wBAAM;4CACV,qBAAM,MAAM,CAAC,WAAW,CAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,CAAE,EAAA;;4CAA3C,SAA2C,CAAC;;;4CAJC,CAAC,EAAE,CAAA;;;;;;yBAOlD,CAAC;wBAEF,qBAAM,GAAG,CAAE,IAAI,CAAC,OAAO,CAAE,EAAA;;wBAAzB,SAAyB,CAAC;wBAEhB,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBAChD,qBAAM,GAAG,CAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAE,EAAA;;wBAAnC,SAAmC,CAAC;;;wBADc,CAAC,EAAE,CAAA;;;;;;KAGtD;IAEa,0BAAS,GAAvB,UAAyB,UAAyB,EAAE,EAAiB;QAA5C,2BAAA,EAAA,iBAAyB;QAAE,mBAAA,EAAA,SAAiB;;;;;;wBAChE,KAAK,GAAG,EAAE,CAAC;wBAEf,8BAA8B;wBAC9B,qBAAM,IAAI,CAAC,eAAe,CAAE,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,UAAU,EAAE,EAAE,CAAE,EAAA;;wBADjE,8BAA8B;wBAC9B,SAAiE,CAAC;wBAGxD,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBAChD,qBAAM,IAAI,CAAC,eAAe,CAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE,CAAE,EAAA;;wBAA3E,SAA2E,CAAC;;;wBAD1B,CAAC,EAAE,CAAA;;4BAItD,sBAAO,KAAK,EAAC;;;;KACb;IAEa,gCAAe,GAA7B,UACC,KAAa,EAAE,MAAe,EAAE,UAAkB,EAAE,EAAiB;QAAjB,mBAAA,EAAA,SAAiB;;;;;;wBAE3D,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBACxC,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;6BAE3B,MAAM,EAAN,wBAAM;wBACN,KAAK,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;wBAE3B,EAAE,CAAC,CAAE,CAAE,KAAM,CAAC,CAAC,CAAC;4BACf,MAAM,kBAAG;wBACV,CAAC;wBAED,EAAE,CAAC,CAAE,UAAU,KAAK,IAAI,IAAI,KAAK,KAAK,UAAW,CAAC,CAAC,CAAC;4BACnD,MAAM,kBAAG;wBACV,CAAC;wBAED,EAAE,CAAC,CAAE,KAAK,CAAE,KAAK,CAAG,CAAC,CAAC,CAAC;4BACtB,MAAM,kBAAG;wBACV,CAAC;wBAEc,qBAAM,MAAM,CAAC,IAAI,CAAE,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,CAAE,EAAA;;wBAA7C,QAAQ,GAAG,SAAkC;wBAEjD,EAAE,CAAC,CAAE,QAAS,CAAC,CAAC,CAAC;4BAChB,KAAK,CAAE,KAAK,CAAE,GAAG,QAAQ,CAAC;wBAC3B,CAAC;;;wBAtB4C,CAAC,EAAE,CAAA;;;;;;KAyBlD;IAEO,2BAAU,GAAlB,UAAoB,IAAY,EAAE,IAAiB;QAClD,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAE1B,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;YACrD,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAEtB,EAAE,CAAC,CAAE,IAAI,KAAK,MAAM,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,IAAK,CAAC,CAAC,CAAC;gBAChD,MAAM,CAAC,KAAK,CAAC;YACd,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAE,IAAI,KAAK,IAAI,IAAI,KAAK,CAAC,OAAO,EAAE,KAAK,IAAK,CAAC,CAAC,CAAC;gBACtD,MAAM,CAAC,KAAK,CAAC;YACd,CAAC;QACF,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAEa,qBAAI,GAAlB,UAAoB,EAAU,EAAE,IAAmB;QAAnB,qBAAA,EAAA,WAAmB;;;;;4BACrC,qBAAM,IAAI,CAAC,QAAQ,CAAE,QAAQ,EAAE,EAAE,CAAE,EAAA;;wBAA5C,MAAM,GAAG,SAAmC;wBAChD,EAAE,CAAC,CAAE,MAAM,KAAK,KAAM,CAAC,CAAC,CAAC;4BACxB,MAAM,gBAAC,EAAE,EAAC;wBACX,CAAC;wBAEG,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;wBACvB,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;wBACpB,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAE,CAAC;wBACrC,OAAO,GAAG,EAAE,CAAC;wBAEjB,GAAG,CAAC,CAAM,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;4BACpD,KAAK,CAAC,MAAM,CAAE,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAE,CAAC;wBAC9C,CAAC;wBAED,GAAG,CAAC,CAAM,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;4BACrD,EAAE,CAAC,CAAE,KAAK,CAAC,QAAQ,CAAE,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAG,CAAC,CAAC,CAAC;gCAC7C,QAAQ,CAAC;4BACV,CAAC;4BAED,EAAE,CAAC,CAAE,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,KAAK,SAAU,CAAC,CAAC,CAAC;gCAEhE,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;gCAElC,EAAE,CAAC,CAAE,OAAO,CAAC,OAAO,CAAE,GAAG,CAAC,KAAK,CAAC,CAAE,CAAC,CAAC,CAAC;oCACpC,KAAK,CAAC,MAAM,CAAE,OAAO,GAAG,MAAM,GAAG,OAAO,CAAE,CAAC;gCAC5C,CAAC;gCACD,IAAI,CAAC,CAAC;oCACL,KAAK,CAAC,MAAM,CAAE,IAAI,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,GAAG,OAAO,GAAG,OAAO,GAAG,GAAG,CAAC,CAAE,CAAC;gCAClE,CAAC;4BACF,CAAC;wBACF,CAAC;wBAED,IAAI,CAAC,SAAS,CAAE,KAAK,CAAE,CAAC;wBACxB,IAAI,CAAC,gBAAgB,CAAE,KAAK,CAAE,CAAC;wBACrB,qBAAM,IAAI,CAAC,IAAI,CAAE,KAAK,EAAE,IAAI,CAAE,EAAA;;wBAApC,GAAG,GAAG,SAA8B;wBAExC,EAAE,CAAC,CAAE,EAAE,KAAK,IAAK,CAAC,CAAC,CAAC;4BACnB,KAAK,CAAC,KAAK,CAAE,IAAI,CAAC,YAAY,CAAE,EAAE,EAAE,IAAI,CAAE,CAAE,CAAC;wBAC9C,CAAC;wBAEY,qBAAM,KAAK,EAAA;;wBAApB,MAAM,GAAG,SAAW;wBACxB,EAAE,CAAC,CAAE,CAAE,MAAO,CAAC,CAAC,CAAC;4BAChB,MAAM,IAAI,KAAK,CAAE,2DAA2D;gCAC3E,6CAA6C,CAC7C,CAAC;wBACH,CAAC;wBAEG,GAAG,GAAG,EAAE,CAAC;wBACb,GAAG,CAAC,CAAM,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;4BACjD,KAAK,GAAG;gCACX,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,WAAW,CAAE,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAE;6BAC/D,CAAC;4BAEF,GAAG,CAAC,CAAM,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;gCACrD,EAAE,CAAC,CAAE,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAE,CAAC,CAAC,CAAC;oCAC9B,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAE,CAAC;gCACrC,CAAC;4BACF,CAAC;4BAED,GAAG,CAAC,IAAI,CAAE,KAAK,CAAE,CAAC;wBACnB,CAAC;6BAGI,CAAA,EAAE,KAAK,IAAI,CAAA,EAAX,wBAAW;wBACL,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBACjC,qBAAM,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAE,IAAI,CAAC,GAAG,CAAE,EAAA;;wBAA9C,IAAI,GAAG,SAAuC;wBAElD,EAAE,CAAC,CAAE,IAAK,CAAC,CAAC,CAAC;4BACZ,OAAO,CAAE,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAE,GAAG,IAAI,CAAC;wBACpC,CAAC;;;wBAL6C,CAAC,EAAE,CAAA;;;;4BAWlD,IAAI,EAAE,GAAG;4BACT,IAAI,EAAE,GAAG,CAAC,IAAI;;wBACP,qBAAM,IAAI,CAAC,SAAS,EAAE,EAAA;;wBAH1B,QAAQ,IAGX,QAAK,GAAE,SAAsB;4BAC7B,UAAO,UAAA;4BACP,kBAAe,GAAE,GAAG,CAAC,eAAe;4BACpC,eAAY,GAAE,GAAG,CAAC,YAAY;+BAC9B;wBAGS,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBAChD,qBAAM,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAE,IAAI,EAAE,QAAQ,CAAE,EAAA;;wBAA1C,SAA0C,CAAC;;;wBADO,CAAC,EAAE,CAAA;;6BAItD,qBAAM,IAAI,CAAC,QAAQ,CAAE,SAAS,EAAE,EAAE,EAAE,GAAG,CAAE,EAAA;;wBAAzC,SAAyC,CAAC;wBAE1C,sBAAO,QAAQ,EAAC;;;;KAChB;IAEO,0BAAS,GAAjB,UAAmB,KAAW;QAC7B,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QAEzB,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;YACpD,KAAK,CAAC,KAAK,OAAX,KAAK,EAAW,KAAK,CAAC,CAAC,CAAC,EAAG;QAC5B,CAAC;IACF,CAAC;IAEa,wBAAO,GAArB,UAAuB,MAAc;;;;;;wBACpC,8DAA8D;wBAC9D,wEAAwE;wBACxE,+DAA+D;wBAC/D,oBAAoB;wBACpB,IAAI,CAAC,mBAAmB,CAAE,MAAM,CAAE,CAAC;wBAG1B,qBAAM,IAAI,CAAC,eAAe,CAAE,IAAI,EAAE,MAAM,CAAE,EAAA;;wBAA/C,EAAE,GAAG,SAA0C;wBAEnD,EAAE,CAAC,CAAE,EAAE,KAAK,IAAK,CAAC,CAAC,CAAC;4BACnB,MAAM,gBAAC,IAAI,EAAC;wBACb,CAAC;wBAED,iEAAiE;wBACjE,mBAAmB;wBACnB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;4BAC3B,IAAI,CAAC,WAAW,CAAE,MAAM,CAAE,CAAC,CAAC;4BAC5B,IAAI,CAAC,gBAAgB,CAAE,EAAE,EAAE,MAAM,CAAE,CAAC;wBAErC,OAAO;wBACP,GAAG,CAAC,CAAM,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;4BACzD,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAE,IAAI,EAAE,EAAE,EAAE,MAAM,CAAE,CAAC;wBAC1C,CAAC;wBAED,qBAAM,IAAI,CAAC,QAAQ,CAAE,aAAa,EAAE,EAAE,EAAE,MAAM,CAAE,EAAA;;wBAAhD,SAAgD,CAAC;wBAEvC,qBAAM,IAAI,CAAC,IAAI,CAAE,EAAE,CAAE,EAAA;;wBAA3B,GAAG,GAAG,SAAqB;wBAC/B,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;4BAC1B,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;4BACb,IAAI,CAAC;wBAEN,qBAAM,IAAI,CAAC,QAAQ,CAAE,YAAY,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,CAAE,EAAA;;wBAApD,SAAoD,CAAC;wBAErD,sBAAO,GAAG,EAAC;;;;KACX;IAEa,gCAAe,GAA7B,UAA+B,EAAU,EAAE,MAAc;;;;;;wBAEpD,MAAM,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;wBAEhB,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBAClC,qBAAM,IAAI,CAAC,oBAAoB,CACxC,MAAM,CAAC,CAAC,CAAC,EACT,MAAM,EACN,EAAE,KAAK,IAAI,CAAC,CAAC;gCACZ,IAAI,CAAC,YAAY,CAAE,EAAE,EAAE,IAAI,CAAE,CAAC,CAAC;gCAC/B,IAAI,CACL,EAAA;;wBANG,GAAG,GAAG,SAMT;wBAED,iEAAiE;wBACjE,iBAAiB;wBACjB,EAAE,CAAC,CAAE,GAAG,KAAK,IAAI,IAAI,EAAE,KAAK,IAAK,CAAC,CAAC,CAAC;4BACnC,EAAE,GAAG,GAAG,CAAC;wBACV,CAAC;;;wBAb6C,CAAC,EAAE,CAAA;;;wBAgBlD,+BAA+B;wBAC/B,GAAG,CAAC,CAAM,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;4BACzD,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;4BAGzB,SAAS,GAAG,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,KAAK,EAAE,OAAO,CAAE,CAAC;4BAC/C,SAAS,GAAG,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,MAAM,CAAE,CAAC;4BACtC,UAAU,SAAA,CAAC;4BACX,SAAS,SAAA,CAAC;4BACV,QAAQ,SAAA,CAAC;4BAEb,EAAE,CAAC,CAAE,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAG,CAAC,CAAC,CAAC;gCACvC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAE,GAAG,GAAG,GAAG,SAAS,CAAC;4BAC/D,CAAC;4BAED,EAAE,CAAC,CAAE,SAAS,KAAK,SAAU,CAAC,CAAC,CAAC;gCAC/B,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;gCACzB,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC;4BACzB,CAAC;4BACD,IAAI,CAAC,CAAC;gCACL,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;gCACzB,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC;4BACzB,CAAC;4BAED,EAAE,CAAC,CAAE,UAAU,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAE,CAAC,CAAC,CAAC;gCAC/D,QAAQ,GAAG,EAAE,CAAC;4BACf,CAAC;4BACD,IAAI,CAAC,CAAC;gCAID,KAAK,GAAG,IAAI,CAAC,UAAU,CAAE,UAAU,EAAE,IAAI,CAAE,CAAC;gCAEhD,EAAE,CAAC,CAAE,CAAE,KAAK,IAAI,CAAE,KAAK,CAAC,KAAK,CAAE,MAAM,EAAE,MAAM,CAAG,CAAC,CAAC,CAAC;oCAClD,mDAAmD;oCACnD,KAAK,GAAG,IAAI,CAAC,UAAU,CAAE,SAAS,EAAE,IAAI,CAAE,CAAC;oCAE3C,EAAE,CAAC,CAAE,CAAE,KAAK,IAAI,CAAE,KAAK,CAAC,KAAK,CAAE,MAAM,EAAE,MAAM,CAAG,CAAC,CAAC,CAAC;wCAClD,6CAA6C;wCAC7C,QAAQ,CAAC;oCACV,CAAC;gCACF,CAAC;gCAED,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAE,KAAK,EAAE,MAAM,CAAE,CAAC;4BACvC,CAAC;4BAEG,SAAS,GAAG,IAAI,CAAC,KAAK,CAAE,SAAS,EAAE,QAAQ,CAAE,CAAC;4BAElD,IAAI,CAAC,oBAAoB,CACxB,IAAI,CAAC,KAAK,EACV,MAAM,YACJ,GAAC,SAAS,IAAG,QAAQ,MACvB,CAAC;wBACH,CAAC;wBAED,sBAAO,EAAE,EAAC;;;;KACV;IAEa,qCAAoB,GAAlC,UAAoC,KAAa,EAAE,MAAc,EAAE,KAAoB;QAApB,sBAAA,EAAA,YAAoB;;;;;;wBAClF,GAAG,GAAG,EAAE,CAAC;wBAET,MAAM,GAAoB,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC;wBAC/D,UAAU,GAAG,IAAI,CAAC,MAAM,CAAE,KAAK,EAAE,OAAO,CAAE,CAAC;wBAC3C,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;wBAE3B,GAAG,CAAC,CAAM,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;4BACjD,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;4BAClB,SAAS,GAAG,IAAI,CAAC,KAAK,CAAE,KAAK,CAAC,OAAO,EAAE,CAAE,CAAC;4BAE9C,EAAE,CAAC,CAAE,IAAI,CAAC,KAAK,CAAE,KAAK,CAAC,OAAO,EAAE,EAAE,IAAI,CAAG,CAAC,CAAC,CAAC;gCAC3C,SAAS,GAAG,IAAI,CAAC,KAAK,CAAE,KAAK,CAAC,OAAO,EAAE,EAAE,IAAI,CAAE,GAAG,GAAG,GAAG,SAAS,CAAC;4BACnE,CAAC;4BAED,gEAAgE;4BAChE,cAAc;4BACd,EAAE,CAAC,CAAE,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,SAAS,KAAK,UAAW,CAAC,CAAC,CAAC;gCACzD,QAAQ,CAAC;4BACV,CAAC;4BAED,0DAA0D;4BAC1D,iBAAiB;4BACjB,EAAE,CAAC,CAAE,CAAE,KAAK,CAAC,KAAK,CAAE,MAAM,EAAE,MAAM,CAAG,CAAC,CAAC,CAAC;gCACvC,QAAQ,CAAC;4BACV,CAAC;4BAIG,SAAS,GAAG,IAAI,CAAC,KAAK,CAAE,KAAK,CAAC,OAAO,EAAE,EAAE,QAAQ,CAAE,CAAC;4BACxD,GAAG,CAAE,SAAS,CAAE,GAAG,KAAK,CAAC,GAAG,CAAE,KAAK,EAAE,MAAM,CAAE,CAAC;wBAC/C,CAAC;wBAED,EAAE,CAAC,CAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,CAAE,CAAC,CAAC,CAAC;4BACrC,MAAM,gBAAC,IAAI,EAAC;wBACb,CAAC;6BAEI,CAAA,MAAM,KAAK,QAAQ,CAAA,EAAnB,wBAAmB;wBACjB,qBAAM,IAAI;iCACd,GAAG,CAAE,KAAK,CAAE;iCACZ,MAAM,CAAE,GAAG,CAAE;iCACb,SAAS,CAAE,IAAI,CAAC,KAAK,CAAE,EAAA;;wBAHzB,GAAG,GAAG,SAGmB,CAAC;wBAE1B,sBAAO,OAAO,GAAG,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC;gCAClC,GAAG,CAAC,CAAC,CAAC,CAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;gCACpC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAC;4BAGnB,qBAAM,IAAI;6BACR,GAAG,CAAE,KAAK,CAAE;6BACZ,MAAM,CAAE,GAAG,CAAE;6BACb,KAAK,CAAE,KAAK,CAAE,EAAA;;wBAHhB,SAGgB,CAAC;;;;;;KAElB;IAEO,uBAAM,GAAd,UAAgB,IAAY,EAAE,IAA8B;QAA9B,qBAAA,EAAA,cAA8B;QAC3D,EAAE,CAAC,CAAE,IAAI,CAAC,OAAO,CAAE,MAAM,CAAE,KAAK,CAAC,CAAE,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC5B,MAAM,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;gBACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACN,CAAC,CAAC,CAAC,CAAC,CAAC;QACP,CAAC;QAED,EAAE,CAAC,CAAE,IAAI,CAAC,OAAO,CAAE,GAAG,CAAE,KAAK,CAAC,CAAE,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;gBACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACN,CAAC,CAAC,CAAC,CAAC,CAAC;QACP,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAEO,sBAAK,GAAb,UAAe,IAAY,EAAE,IAAqC;QAArC,qBAAA,EAAA,cAAqC;QACjE,IAAI,EAAE,CAAC;QACP,IAAI,KAAK,CAAC;QACV,IAAI,MAAM,CAAC;QAEX,EAAE,CAAC,CAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAE,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAExB,EAAE,CAAC,CAAE,CAAC,CAAC,MAAM,KAAK,CAAE,CAAC,CAAC,CAAC;gBACtB,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACV,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACb,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACf,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAE,CAAC,CAAC,MAAM,KAAK,CAAE,CAAC,CAAC,CAAC;gBAC3B,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACb,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACf,CAAC;QACF,CAAC;QACD,IAAI,CAAC,CAAC;YACL,MAAM,GAAG,IAAI,CAAC;QACf,CAAC;QAED,EAAE,CAAC,CAAE,IAAI,KAAK,IAAK,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,EAAE,CAAC;QACX,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAE,IAAI,KAAK,OAAQ,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IACf,CAAC;IAEO,0BAAS,GAAjB;QACC,EAAE,CAAC,CAAE,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAE,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC;QACR,CAAC;QAED,qEAAqE;QACrE,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;YACzD,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAExB,EAAE,CAAC,CAAE,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAE,CAAC,CAAC,CAAC;gBAC/B,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,CAAE,GAAG,GAAG,GAAG,GAAG,CAAC;YACrE,CAAC;QACF,CAAC;QAED,uEAAuE;QACvE,mEAAmE;QACnE,2DAA2D;QAC3D,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;YAC3D,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,MAAI,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;YAE3B,EAAE,CAAC,CAAE,MAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAE,CAAC,CAAC,CAAC;gBAChC,MAAM,IAAI,KAAK,CAAE,2BAA2B,GAAG,MAAI,GAAG,mBAAmB;oBACxE,gEAAgE;oBAChE,gCAAgC,CAChC,CAAC;YACH,CAAC;QACF,CAAC;IACF,CAAC;IAEO,iCAAgB,GAAxB,UAA0B,KAAW;gCAC1B,CAAC,EAAM,GAAG;YACnB,IAAI,IAAI,GAAG,OAAK,SAAS,CAAC,CAAC,CAAC,CAAC;YAE7B,KAAK,CAAC,QAAQ,CAAE,IAAI,CAAC,KAAK,EAAE;gBAC3B,IAAI,CAAC,EAAE,CAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAE,CAAC;YACpD,CAAC,CAAE,CAAC;QACL,CAAC;;QAND,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE;oBAAhD,CAAC,EAAM,GAAG;SAMnB;IACF,CAAC;IAEO,+BAAc,GAAtB;QACC,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEhC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAE,GAAG,CAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IACtC,CAAC;IAEO,iCAAgB,GAAxB,UAA0B,OAAe,EAAE,GAAW;QACrD,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QACtB,IAAI,GAAG,GAAG,IAAI,CAAC,YAAY,CAAE,OAAO,EAAE,IAAI,CAAE,CAAC;QAE7C,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;YACnD,IAAI,MAAM,GAAG,IAAI,CAAE,CAAC,CAAE,CAAC;YACvB,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAE,MAAM,EAAE,IAAI,CAAE,CAAC;YAE5C,EAAE,CAAC,CAAE,KAAK,IAAI,KAAK,CAAC,KAAK,CAAE,MAAM,EAAE,GAAG,CAAG,CAAC,CAAC,CAAC;gBAC3C,GAAG,CAAE,MAAM,CAAE,GAAG,KAAK,CAAC,GAAG,CAAE,KAAK,EAAE,GAAG,CAAE,CAAC;YACzC,CAAC;QACF,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,WAAW,CAAE,GAAG,EAAE,IAAI,CAAE,CAAC;IACtC,CAAC;IAEO,oCAAmB,GAA3B,UAA6B,GAAW;QACvC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QAEvB,EAAE,CAAC,CAAE,IAAI,CAAC,MAAM,KAAK,CAAE,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAED,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;YACnD,IAAI,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACrB,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAE,MAAM,EAAE,IAAI,CAAE,CAAC;YAE5C,EAAE,CAAC,CAAE,CAAE,KAAK,IAAI,CAAE,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAE,CAAC,CAAC,CAAC;gBAC/C,MAAM,IAAI,KAAK,CAAE,4CAA4C;oBAC5D,uDAAuD;oBACvD,kCAAkC,CAClC,CAAC;YACH,CAAC;QACF,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAEa,yBAAQ,GAAtB,UAAwB,IAAgB,EAAE,MAAe;;;;;;wBACxD,IAAI,CAAC,IAAI,GAAG;4BACX,IAAI,EAAE,EAAE;4BACR,WAAW,EAAE,EAAE;yBACf,CAAC;wBAEF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;wBACzB,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;wBAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;wBAC9C,IAAI,CAAC,SAAS,EAAE,CAAC;6BAEZ,IAAI,CAAC,UAAU,EAAf,wBAAe;wBACT,qBAAM,IAAI,CAAC,UAAU,CAAE,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAE,EAAA;;wBAAtD,GAAG,GAAG,SAAgD;wBAE1D,EAAE,CAAC,CAAE,GAAG,KAAK,IAAK,CAAC,CAAC,CAAC;4BACpB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;wBACvB,CAAC;;;6BAGG,CAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAjB,yBAAiB;6BAChB,CAAE,IAAI,CAAC,MAAM,EAAb,wBAAa;wBACH,qBAAM,IAAI,CAAC,IAAI,CAAE,IAAI,EAAE,IAAI,CAAE,EAAA;;wBAAvC,OAAO,GAAG,SAA6B;wBAE3C,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;wBAC9B,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;wBAC9B,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;wBAChC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;wBACpC,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;wBAC9C,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;;;6BAE3C,CAAA,IAAI,CAAC,MAAM,KAAK,QAAQ,CAAA,EAAxB,wBAAwB;wBACjC,qBAAM,IAAI,CAAC,OAAO,CAAE,IAAI,CAAE,EAAA;;wBAA1B,SAA0B,CAAC;;;6BAElB,CAAA,IAAI,CAAC,MAAM,KAAK,QAAQ,CAAA,EAAxB,wBAAwB;wBACjC,qBAAM,IAAI,CAAC,OAAO,CAAE,IAAI,CAAE,EAAA;;wBAA1B,SAA0B,CAAC;wBAC3B,qBAAM,IAAI,CAAC,UAAU,EAAE,EAAA;;wBAAvB,SAAuB,CAAC;;;wBAIpB,IAAI,GAAG,MAAM,CAAC,IAAI,CAAE,IAAI,CAAC,IAAI,CAAE,CAAC;wBAI1B,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBACtC,MAAM,GAAG,IAAI,CAAC;wBACd,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;wBAChB,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;6BAE3B,CAAA,IAAI,CAAC,MAAM,KAAK,QAAQ,CAAA,EAAxB,yBAAwB;wBACnB,qBAAM,IAAI,CAAC,QAAQ,CAAE,WAAW,EAAE,MAAM,CAAE,EAAA;;wBAAnD,MAAM,GAAG,SAA0C,CAAC;;;wBAGhD,EAAE,GAAG,KAAK,CAAC,OAAO,CAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAE,CAAC;wBACrC,qBAAM,IAAI,CAAC,QAAQ,CAAE,SAAS,EAAE,EAAE,EAAE,MAAM,CAAE,EAAA;;wBAArD,MAAM,GAAG,SAA4C,CAAC;;;wBAGvD,4DAA4D;wBAC5D,EAAE,CAAC,CAAE,MAAM,KAAK,KAAM,CAAC,CAAC,CAAC;4BACxB,6DAA6D;4BAC7D,OAAO,IAAI,CAAC,IAAI,CAAE,KAAK,CAAE,CAAC;4BAE1B,mDAAmD;4BACnD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,KAAK,CAAE,CAAC;wBACnC,CAAC;;;wBApB2C,CAAC,EAAE,CAAA;;6BAwBpC,qBAAM,IAAI,CAAC,QAAQ,CAAE,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAE,EAAA;;wBAA1D,KAAK,GAAG,SAAkD;6BAEzD,KAAK,EAAL,yBAAK;wBACT,IAAI,GAAG,MAAM,CAAC,IAAI,CAAE,IAAI,CAAC,IAAI,CAAE,CAAC;wBAEtB,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;6BAClC,CAAA,IAAI,CAAC,MAAM,KAAK,QAAQ,CAAA,EAAxB,yBAAwB;wBAC/B,qBAAM,IAAI,CAAC,OAAO,CAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAE,EAAA;;wBAAxC,KAAA,SAAwC,CAAA;;6BACxC,qBAAM,IAAI,CAAC,OAAO,CAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAE,EAAA;;wBAAjD,KAAA,SAAiD,CAAA;;;wBAF9C,CAAC,KAE6C;wBAElD,EAAE,CAAC,CAAE,CAAC,KAAK,IAAK,CAAC,CAAC,CAAC;4BAClB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAE,CAAC,CAAE,CAAC;wBAC1B,CAAC;;;wBAP2C,CAAC,EAAE,CAAA;;6BAWjD,qBAAM,IAAI,CAAC,UAAU,EAAE,EAAA;;wBAAvB,SAAuB,CAAC;;;wBAI1B,EAAE,CAAC,CAAE,IAAI,CAAC,MAAO,CAAC,CAAC,CAAC;4BACnB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;wBAC3C,CAAC;;;;;KACD;IAEa,wBAAO,GAArB,UAAuB,IAAgB;;;;;;wBAClC,GAAG,GAAa,EAAE,CAAC;wBACnB,IAAI,GAAG,MAAM,CAAC,IAAI,CAAE,IAAI,CAAC,IAAI,CAAE,CAAC;wBAE1B,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBAEtC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAE,CAAC;wBAEtC,qBAAM,IAAI,CAAC,QAAQ,CAAE,WAAW,EAAE,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAE,EAAA;;wBAAhE,GAAG,GAAG,SAA0D;wBAEpE,6DAA6D;wBAC7D,EAAE,CAAC,CAAE,GAAG,KAAK,KAAM,CAAC,CAAC,CAAC;4BACrB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,EAAE,CAAE,CAAC;wBAChC,CAAC;wBACD,IAAI,CAAC,CAAC;4BACL,GAAG,CAAC,IAAI,CAAE,EAAE,CAAE,CAAC;wBAChB,CAAC;;;wBAZ2C,CAAC,EAAE,CAAA;;;wBAehD,EAAE,CAAC,CAAE,GAAG,CAAC,MAAM,KAAK,CAAE,CAAC,CAAC,CAAC;4BACxB,MAAM,gBAAC;wBACR,CAAC;wBAIS,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBAChD,qBAAM,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAE,IAAI,EAAE,GAAG,CAAE,EAAA;;wBAAvC,SAAuC,CAAC;;;wBADU,CAAC,EAAE,CAAA;;;wBAK5C,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBAChD,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;wBACzB,KAAK,GAAG,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,KAAK,EAAE,MAAM,CAAE,CAAC;wBAC1C,UAAU,SAAA,CAAC;wBACX,SAAS,SAAA,CAAC;wBAEd,qDAAqD;wBACrD,EAAE,CAAC,CAAE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAE,IAAI,CAAC,KAAK,CAAE,KAAK,CAAE,CAAC,CAAC,CAAC;4BAC/C,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;4BACzB,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,CAAC;wBACD,IAAI,CAAC,CAAC;4BACL,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;4BACzB,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,CAAC;6BAMI,CAAA,UAAU,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAA,EAAvD,yBAAuD;wBAC3D,qBAAM,IAAI,CAAC,YAAY,CAAE,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,CAAE,EAAA;;wBAAvD,SAAuD,CAAC;;;wBArBH,CAAC,EAAE,CAAA;;;wBA0BtD,MAAM,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;wBAEhB,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBAC5C,qBAAM,IAAI,CAAC,YAAY,CAAE,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAE,EAAA;;wBAAzC,SAAyC,CAAC;;;wBADI,CAAC,EAAE,CAAA;;;wBAIxC,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBAC1C,qBAAM,IAAI,CAAC,QAAQ,CAAE,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAE,IAAI,CAAC,CAAC,CAAC,CAAE,CAAE,EAAA;;wBAAlE,SAAkE,CAAC;;;wBADvB,CAAC,EAAE,CAAA;;;;;;KAGhD;IAEa,6BAAY,GAA1B,UAA4B,KAAa,EAAE,GAAa,EAAE,IAAqB;QAArB,qBAAA,EAAA,WAAqB;;;;;;wBAC9E,EAAE,CAAC,CAAE,IAAI,KAAK,IAAK,CAAC,CAAC,CAAC;4BACrB,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;wBACpB,CAAC;wBAGG,KAAK,GAAG,CAAC,CAAC;wBACV,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;wBAE3B,GAAG,CAAC,CAAM,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;4BACjD,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;4BAElC,EAAE,CAAC,CAAE,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gCAC/B,CAAC,IAAI,CAAC,KAAK,CAAE,OAAO,EAAE,OAAO,CAAC,KAAK,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,eAAO,CAAC,IAAI,CAC7E,CAAC,CAAC,CAAC;gCACF,KAAK,EAAE,CAAC;4BACT,CAAC;wBACF,CAAC;6BAEI,CAAA,KAAK,GAAG,CAAC,CAAA,EAAT,wBAAS;wBACT,CAAC,GAAG,IAAI,CAAC,GAAG,CAAE,KAAK,CAAE,CAAC;4CAEhB,CAAC,EAAM,GAAG;4BACnB,IAAI,IAAI,GAAG,OAAK,YAAY,CAAE,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAE,CAAC;4BAEnD,CAAC,CAAC,OAAO,CAAE;gCACV,IAAI,CAAC,KAAK,CAAE,IAAI,CAAE,CAAC;4BACpB,CAAC,CAAE,CAAC;wBACL,CAAC;;wBAND,GAAG,CAAC,CAAM,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE;oCAArC,CAAC,EAAM,GAAG;yBAMnB;wBAED,qBAAM,CAAC,CAAC,GAAG,EAAE,EAAA;;wBAAb,SAAa,CAAC;;;;;;KAEf;IAEa,qBAAI,GAAlB,UAAoB,KAAiB,EAAE,IAAgB;;;;;;wBACtD,EAAE,CAAC,CAAE,CAAE,IAAI,IAAI,CAAE,IAAI,CAAC,IAAK,CAAC,CAAC,CAAC;4BAC7B,MAAM,gBAAC,EAAE,EAAC;wBACX,CAAC;wBAED,6DAA6D;wBAC7D,IAAI,CAAC,SAAS,CAAE,KAAK,EAAE,IAAI,CAAE,CAAC;wBAC9B,IAAI,CAAC,QAAQ,CAAE,KAAK,EAAE,IAAI,CAAE,CAAC;wBAC7B,IAAI,CAAC,UAAU,CAAE,KAAK,EAAE,IAAI,CAAE,CAAC;wBAG3B,QAAQ,GAAG,IAAI;6BACjB,GAAG,CAAE,IAAI,CAAC,KAAK,EAAE,CAAE;6BACnB,KAAK,CAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,SAAS,CAAE,CAAC;wBAErC,IAAI,CAAC,SAAS,CAAE,QAAQ,CAAE,CAAC;wBAC3B,IAAI,CAAC,UAAU,CAAE,QAAQ,EAAE,IAAI,CAAE,CAAC;wBAClC,IAAI,CAAC,gBAAgB,CAAE,QAAQ,CAAE,CAAC;wBAExB,qBAAM,QAAQ,EAAA;;wBAApB,GAAG,GAAG,SAAc;wBACpB,eAAe,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;wBAG7B,SAAS,GAAG,IAAI;6BAClB,GAAG,CAAE,IAAI,CAAC,KAAK,EAAE,CAAE;6BACnB,KAAK,CAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,SAAS,CAAE,CAAC;wBAErC,IAAI,CAAC,SAAS,CAAE,SAAS,CAAE,CAAC;wBAC5B,EAAE,CAAC,CAAE,IAAI,CAAC,MAAM,CAAC,MAAQ,CAAC,CAAC,CAAC;4BAC3B,IAAI,CAAC,gBAAgB,CAAE,SAAS,CAAE,CAAC;wBACpC,CAAC;wBACK,qBAAM,SAAS,EAAA;;wBAArB,GAAG,GAAG,SAAe,CAAC;wBAClB,YAAY,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;wBAE9B,sBAAO;gCACN,IAAI,EAAE,IAAI,CAAC,IAAI,GAAG,CAAC;gCACnB,eAAe,iBAAA;gCACf,YAAY,cAAA;6BACZ,EAAC;;;;KACF;IAEO,0BAAS,GAAjB,UAAmB,IAAgB,EAAE,KAAa;QACjD,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAE,KAAK,CAAE,CAAC,IAAI,CAAC;QACtC,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAE,IAAI,EAAE,MAAM,CAAE,CAAC;QAE5C,EAAE,CAAC,CAAE,CAAE,KAAM,CAAC,CAAC,CAAC;YACf,yBAAyB;YACzB,EAAE,CAAC,CAAE,IAAI,KAAK,UAAW,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;YAED,MAAM,IAAI,KAAK,CAAE,iBAAiB,GAAG,IAAI,GAAG,UAAU,GAAG,KAAK,GAAG,GAAG,CAAE,CAAC;QACxE,CAAC;QAED,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IAEO,2BAAU,GAAlB,UAAoB,KAAiB,EAAE,IAAgB;QAAvD,iBA+BC;QA9BA,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAE3B,gBAAgB;QAChB,EAAE,CAAC,CAAE,IAAI,CAAC,MAAM,CAAC,KAAM,CAAC,CAAC,CAAC;YACzB,KAAK,CAAC,KAAK,CAAE,UAAC,CAAC;gBACd,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;oBAC3D,EAAE,CAAC,CAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,UAAW,CAAC,CAAC,CAAC;wBAClC,IAAI,KAAK,GAAG,KAAI,CAAC,SAAS,CAAE,IAAI,EAAE,CAAC,CAAE,CAAC;wBAEtC,EAAE,CAAC,CAAE,KAAM,CAAC,CAAC,CAAC;4BACb,CAAC,CAAC,OAAO,CAAE,KAAK,EAAE,MAAM,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,GAAG,CAAE,CAAC;wBAC3D,CAAC;oBACF,CAAC;gBACF,CAAC;YACF,CAAC,CAAE,CAAC;QACL,CAAC;QAED,gBAAgB;QAChB,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;YAC3D,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;YAEjC,EAAE,CAAC,CAAE,MAAM,KAAK,EAAE,IAAI,MAAM,CAAC,UAAW,CAAC,CAAC,CAAC;gBAC1C,KAAK,CAAC,KAAK,CACV,IAAI,CAAC,SAAS,CAAE,IAAI,EAAE,CAAC,CAAE,EACzB,MAAM,EACN,GAAG,GAAG,MAAM,GAAG,GAAG,CAClB,CAAC;YACH,CAAC;QACF,CAAC;IACF,CAAC;IAEO,0BAAS,GAAjB,UAAmB,KAAiB,EAAE,IAAgB;QACrD,EAAE,CAAC,CAAE,IAAI,CAAC,MAAM,KAAK,CAAC,CAAE,CAAC,CAAC,CAAC;YAC1B,KAAK;iBACH,KAAK,CAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAE;iBACxB,MAAM,CAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAE,CAAC;QAC5B,CAAC;IACF,CAAC;IAEO,yBAAQ,GAAhB,UAAkB,KAAiB,EAAE,IAAgB;QACpD,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;YACzD,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAE1B,KAAK,CAAC,OAAO,CACZ,IAAI,CAAC,SAAS,CAAE,IAAI,EAAE,KAAK,CAAC,MAAM,CAAE,EACpC,KAAK,CAAC,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CACpC,CAAC;QACH,CAAC;IACF,CAAC;IAEa,yBAAQ,GAAtB,UAAwB,IAAY;QAAE,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,6BAAO;;;;;;;wBACxC,GAAG,GAAG,IAAI,CAAC;wBACX,MAAM,GAAG,IAAI,CAAC,OAAO,CAAE,IAAI,CAAE,CAAC;wBAElC,EAAE,CAAC,CAAE,CAAE,IAAI,CAAC,OAAO,CAAE,IAAI,CAAG,CAAC,CAAC,CAAC;4BAC9B,MAAM,gBAAC;wBACR,CAAC;wBAED,IAAI,CAAC,OAAO,CAAE,IAAI,CAAE,CAAC;wBAEX,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBAClC,qBAAM,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAE,IAAI,EAAE,IAAI,CAAE,EAAA;;wBAAzC,GAAG,GAAG,SAAmC;wBAE7C,EAAE,CAAC,CAAE,GAAG,KAAK,IAAK,CAAC,CAAC,CAAC;4BACpB,GAAG,GAAG,GAAG,CAAC;wBACX,CAAC;;;wBAL6C,CAAC,EAAE,CAAA;;4BAQlD,sBAAO,GAAG,EAAC;;;;KACX;IAEa,wBAAO,GAArB,UAAuB,EAAU,EAAE,MAAc;;;;;;wBAChD,EAAE,GAAG,EAAE,CAAC,OAAO,CAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAE,CAAC;wBAEvC,qEAAqE;wBACrE,SAAS;wBACT,qBAAM,IAAI,CAAC,eAAe,CAAE,EAAE,EAAE,MAAM,CAAE,EAAA;;wBAFxC,qEAAqE;wBACrE,SAAS;wBACT,SAAwC,CAAC;wBAG/B,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM;;;6BAAE,CAAA,CAAC,GAAG,GAAG,CAAA;wBAChD,qBAAM,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAE,IAAI,EAAE,EAAE,EAAE,MAAM,CAAE,EAAA;;wBAA9C,SAA8C,CAAC;;;wBADG,CAAC,EAAE,CAAA;;;wBAMlD,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAE,EAAE,EAAE,MAAM,CAAE,CAAC;wBAEhD,qBAAM,IAAI,CAAC,QAAQ,CAAE,WAAW,EAAE,EAAE,EAAE,MAAM,CAAE,EAAA;;wBAA9C,SAA8C,CAAC;wBAErC,qBAAM,IAAI,CAAC,IAAI,CAAE,KAAK,CAAE,EAAA;;wBAA9B,GAAG,GAAG,SAAwB;wBAClC,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;4BAC1B,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;4BACb,IAAI,CAAC;wBAEN,qBAAM,IAAI,CAAC,QAAQ,CAAE,UAAU,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,CAAE,EAAA;;wBAAlD,SAAkD,CAAC;wBAEnD,sBAAO,GAAG,EAAC;;;;KACX;IAEa,wBAAO,GAArB,UAAuB,IAAgB;;;;;;wBAElC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAE,IAAI,CAAC,WAAW,EAAE,MAAM,CAAE,CAAC;wBACpD,SAAS,GAAG,EAAE,CAAC;wBAEnB,EAAE,CAAC,CAAE,CAAE,KAAM,CAAC,CAAC,CAAC;4BACf,mCAAmC;4BACnC,GAAG,CAAC,CAAM,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;gCACrD,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gCACrB,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;gCAE3B,GAAG,CAAC,CAAM,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAG,CAAC;oCACjD,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oCACtB,SAAO,IAAI,CAAC,IAAI,EAAE,GAAG,KAAK,GAAG,SAAS,CAAC,IAAI,EAAE,CAAC;oCAElD,EAAE,CAAC,CAAE,MAAI,KAAK,IAAI,CAAC,WAAY,CAAC,CAAC,CAAC;wCACjC,KAAK,GAAG,SAAS,CAAC;wCAClB,SAAS,GAAG,MAAI,CAAC;oCAClB,CAAC;gCACF,CAAC;4BACF,CAAC;wBACF,CAAC;wBACD,IAAI,CAAC,CAAC;4BACL,SAAS,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;wBAC1B,CAAC;wBAED,EAAE,CAAC,CAAE,CAAE,IAAI,CAAC,WAAY,CAAC,CAAC,CAAC;4BAC1B,MAAM,IAAI,KAAK,CAAE,yBAAyB,CAAE,CAAC;wBAC9C,CAAC;wBAED,EAAE,CAAC,CAAE,CAAE,KAAM,CAAC,CAAC,CAAC;4BACf,MAAM,IAAI,KAAK,CAAE,qCAAqC,CAAE,CAAC;wBAC1D,CAAC;wBAEc,qBAAM,IAAI,CAAC,QAAQ,CAAE,WAAW,EAAE,IAAI,CAAE,EAAA;;wBAAnD,QAAQ,GAAG,SAAwC;wBAEvD,uDAAuD;wBACvD,EAAE,CAAC,CAAE,QAAQ,KAAK,KAAM,CAAC,CAAC,CAAC;4BAC1B,MAAM,gBAAC;wBACR,CAAC;wBAEG,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;wBAC5B,EAAE,CAAC,CAAE,CAAE,MAAO,CAAC,CAAC,CAAC;4BAChB,MAAM,IAAI,KAAK,CAAE,uEAAuE,CAAE,CAAC;wBAC5F,CAAC;wBAES,qBAAM,MAAM,CAAC,IAAI,CAAE,IAAI,EAAE,IAAI,CAAC,WAAW,CAAE,EAAA;;wBAAjD,GAAG,GAAG,SAA2C;6BAEhD,CAAE,GAAG,EAAL,wBAAK;wBACT,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAE;4BAC3B,IAAI,EAAE,SAAS;4BACf,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE;yBACtB,CAAE,CAAC;;4BAGQ,qBAAM,IAAI,CAAC,SAAS,CAAE,MAAM,CAAC,KAAK,EAAE,EAAE,GAAG,CAAE,EAAA;;wBAAnD,KAAK,GAAG,SAA2C;wBAEvD,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;wBACxB,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG;4BAClB,EAAE,EAAE,GAAG;yBACP,CAAC;;;;;;KAEH;IAz/Ca,aAAM,GAAG,MAAM,CAAC;IAEhB,cAAO,GAAW,OAAO,CAAC;IAw/CzC,aAAC;CA3/CD,AA2/CC,CA3/CmC,oBAAU,GA2/C7C;kBA3/CoB,MAAM","file":"editor.js","sourcesContent":["import * as crc from 'crc';\nimport * as knex from 'knex';\n\nimport Field, {SetType} from './field';\nimport Format from './formatters';\nimport Mjoin from './mjoin';\nimport NestedData from './nestedData';\nimport {IUpload} from './upload';\nimport Validate from './validators';\n\n/**\n * Action that has been requested by the client-side\n * (based on the `action` parameter).\n * @export\n */\nexport enum Action {\n\t/** Get data (used by DataTables). */\n\tRead,\n\n\t/** Create a new row. */\n\tCreate,\n\n\t/** Edit one or more rows. */\n\tEdit,\n\n\t/** Delete one or more rows. */\n\tDelete,\n\n\t/** Upload a file. */\n\tUpload\n}\n\n/**\n * Field error object.\n * @export\n */\nexport interface IDtError {\n\t/** Field name in error. */\n\tname: string;\n\n\t/** Error message string. */\n\tstatus: string;\n}\n\n/**\n * DataTables request's order object.\n * @export\n */\nexport interface IDtOrder {\n\t/** Sorting direction. */\n\tdir: 'asc'|'desc';\n\n\t/** Column index to sort by. */\n\tcolumn: number;\n}\n\n/**\n * DataTables request's column information object.\n * @export\n */\nexport interface IDtColumn {\n\t/** Data property (`columns.data`). */\n\tdata: string;\n\n\t/** Searchable flag. */\n\n\tsearchable: boolean;\n\n\t/** Search information object. */\n\tsearch: {\n\t\t/** Search string. */\n\t\tvalue: string;\n\t};\n}\n\n/**\n * DataTables request object. This is the information that DataTables\n * and Editor can send to the server.\n * @export\n */\nexport interface IDtRequest {\n\t/** Editor - Action being requested. */\n\taction?: string;\n\n\t/** Editor - Data being sent for create / edit / delete. */\n\tdata?: object[];\n\n\t/** DataTables SSP - Draw counter. */\n\tdraw?: number;\n\n\t/** DataTables SSP - paging start point. */\n\tstart?: number;\n\n\t/** DataTables SSP - paging length. */\n\tlength?: number;\n\n\t/** DataTables SSP - ordering. */\n\torder?: IDtOrder[];\n\n\t/** DataTables SSP - column information. */\n\tcolumns?: IDtColumn[];\n\n\t/** DataTables SSP - Global search value. */\n\tsearch?: {\n\t\tvalue: string;\n\t};\n\n\t/** Editor - Upload field name. */\n\tuploadField?: string;\n}\n\n/**\n * Response object for DataTables and Editor\n * @export\n */\nexport interface IDtResponse {\n\t/** DataTables - Array of row information. */\n\tdata?: object[];\n\n\t/** Editor - Rows which have not been acted upon. */\n\tcancelled?: string[];\n\n\t/** DataTables and Editor - General error string. */\n\terror?: string;\n\n\t/** Editor - Field information errors. */\n\tfieldErrors?: IDtError[];\n\n\t/** Editor - `select`, `radio` and `checkbox` options. */\n\toptions?: object;\n\n\t/** Editor - file information. */\n\tfiles?: object;\n\n\t/** DataTables SSP - draw counter. */\n\tdraw?: number;\n\n\t/** DataTables SSP - number of records in the result set. */\n\trecordsTotal?: number;\n\n\t/** DataTables SSP - number of records after filtering. */\n\trecordsFiltered?: number;\n\n\t/** Editor - Upload complete file id. */\n\tupload?: {\n\t\tid: string\n\t};\n\n\t/** Debug information if enabled by Editor.debug() */\n\tdebug?: any[];\n}\n\n/**\n * Global validation is performed when Editor submits a create, edit or\n * delete request. The function can be useful for cases where fields must\n * be validates together, rather than individually.\n */\nexport type IGlobalValidator =\n\t( editor: Editor, action: string, http: IDtRequest ) => Promise<true|string>;\n\n/**\n * Server-side processing object structure\n * @interface ISSP\n * @private\n */\ninterface ISSP {\n\tdraw?: number;\n\trecordsFiltered?: number;\n\trecordsTotal?: number;\n}\n\n/**\n * Left join object structure\n * @interface ILeftJoin\n * @private\n */\ninterface ILeftJoin {\n\ttable: string;\n\tfield1: string;\n\tfield2: string;\n\toperator: string;\n}\n\n/**\n * DataTables Editor base class for creating editable tables.\n *\n * Editor class instances are capable of servicing all of the requests that\n * DataTables and Editor will make from the client-side - specifically:\n *\n * * Get data\n * * Create new record\n * * Edit existing record\n * * Delete existing records\n *\n * The Editor instance is configured with information regarding the\n * database table fields that you which to make editable, and other information\n * needed to read and write to the database (table name for example!).\n *\n * This documentation is very much focused on describing the API presented\n * by these DataTables Editor classes. For a more general overview of how\n * the Editor class is used, and how to install Editor on your server, please\n * refer to the {@link http://editor.datatables.net/manual Editor manual}.\n *\n * @export\n * @class Editor\n * @extends {NestedData}\n */\nexport default class Editor extends NestedData {\n\tpublic static Action = Action;\n\n\tpublic static version: string = '1.7.3';\n\n\t/**\n\t * Determine the request type from an HTTP request.\n\t *\n\t * @static\n\t * @param {IDtRequest} http HTTP request - normally `request.body`. Note that\n\t *   if you are using `body-parser` you should use `{ extended: true }` as its\n\t *   options to ensure that nested properties are correctly resolved.\n\t * @returns {Action} Indicates what action the request is\n\t */\n\tpublic static action( http: IDtRequest ): Action {\n\t\tif ( ! http || ! http.action ) {\n\t\t\treturn Action.Read;\n\t\t}\n\n\t\tswitch ( http.action ) {\n\t\t\tcase 'create':\n\t\t\t\treturn Action.Create;\n\n\t\t\tcase 'edit':\n\t\t\t\treturn Action.Edit;\n\n\t\t\tcase 'remove':\n\t\t\t\treturn Action.Delete;\n\n\t\t\tcase 'upload':\n\t\t\t\treturn Action.Upload;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'Unknown Editor action: ' + http.action );\n\t\t}\n\t}\n\n\tprivate _db: knex;\n\tprivate _fields: Field[] = [];\n\tprivate _formData;\n\tprivate _processData;\n\tprivate _idPrefix: string = 'row_';\n\tprivate _join: Mjoin[] = [];\n\tprivate _pkey: string[] = ['id'];\n\tprivate _table: string[] = [];\n\tprivate _transaction: boolean = false;\n\tprivate _where = [];\n\tprivate _leftJoin: ILeftJoin[] = [];\n\tprivate _out: IDtResponse = {};\n\tprivate _events = [];\n\tprivate _validator: IGlobalValidator;\n\tprivate _tryCatch: boolean = false;\n\tprivate _knexTransaction: knex;\n\tprivate _uploadData: IUpload;\n\tprivate _debug: boolean = false;\n\tprivate _debugInfo: any[] = [];\n\n\t/**\n\t * Creates an instance of Editor.\n\t * @param {knex} [db=null] Database connection object\n\t * @param {(string|string[])} [table=null] The table name in the database to\n\t *   read and write information from and to. Can be given here or with the\n\t *   'table' method.\n\t * @param {(string|string[])} [pkey=null] Primary key column name in the\n\t *   table given in\n\t */\n\tconstructor( db: knex = null, table: string|string[] = null, pkey: string|string[] = null ) {\n\t\tsuper();\n\n\t\tif ( db ) {\n\t\t\tthis.db( db );\n\t\t}\n\n\t\tif ( table ) {\n\t\t\tthis.table( table );\n\t\t}\n\n\t\tif ( pkey ) {\n\t\t\tthis.pkey( pkey );\n\t\t}\n\t}\n\n\t/**\n\t * Get the data constructed in this instance.\n\t * @returns {IDtResponse} Data object\n\t */\n\tpublic data(): IDtResponse {\n\t\treturn this._out;\n\t}\n\n\t/**\n\t * Get the database connection assigned to the instance.\n\t * @returns {knex} Knex db interface\n\t */\n\tpublic db(): knex;\n\t/**\n\t * Set the database connection.\n\t * @param {knex} Knex db interface\n\t * @returns {Editor} Self for chaining\n\t */\n\tpublic db(db: knex): Editor;\n\tpublic db(db?: knex): any {\n\t\tif ( db === undefined ) {\n\t\t\treturn this._knexTransaction ?\n\t\t\t\tthis._knexTransaction :\n\t\t\t\tthis._db;\n\t\t}\n\n\t\tthis._db = db;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the debug setting for this instance\n\t * @returns {boolean} Debug enabled (true) or not\n\t */\n\tpublic debug(): boolean;\n\t/**\n\t * Set the debug setting for this instance\n\t * @param {boolean} set Debug flag\n\t * @returns {Editor} Self for chaining\n\t */\n\tpublic debug(set: boolean): Editor;\n\t/**\n\t * Add a debug message\n\t * @param {any} message Message to add\n\t * @returns {Editor} Self for chaining\n\t */\n\tpublic debug(message: any): Editor;\n\tpublic debug(param?: any): any {\n\t\tif ( param === undefined ) {\n\t\t\treturn this._debug;\n\t\t}\n\t\telse if ( param === true || param === false ) {\n\t\t\tthis._debug = param;\n\t\t\treturn this;\n\t\t}\n\n\t\t// Otherwise its a message\n\t\tthis._debugInfo.push( param );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get or field by name, or add a field instance.\n\t * @param nameOrField Field instance to add, or field name to get\n\t * @returns {Editor|Field} Editor instance returned if adding a field,\n\t *   Field instance returned if getting a field.\n\t */\n\tpublic field( nameOrField: Field|string ) {\n\t\tif ( typeof nameOrField === 'string' ) {\n\t\t\tfor ( let i = 0, ien = this._fields.length; i < ien; i++ ) {\n\t\t\t\tif ( this._fields[i].name() === nameOrField ) {\n\t\t\t\t\treturn this._fields[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new Error( 'Unknown field: ' + nameOrField );\n\t\t}\n\n\t\tthis._fields.push( nameOrField );\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the fields assigned to this instance.\n\t * @returns {Field[]} Array of fields\n\t */\n\tpublic fields(): Field[];\n\t/**\n\t * Add one or more fields to the instance.\n\t * @param {...Field[]} fields Fields to add\n\t * @returns {Editor} Self for chaining\n\t */\n\tpublic fields(...fields: Field[]): Editor;\n\tpublic fields(...fields: Field[]): any {\n\t\tif ( fields === undefined || fields.length === 0 ) {\n\t\t\treturn this._fields;\n\t\t}\n\n\t\tthis._fields.push.apply( this._fields, fields );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the id prefix.\n\t *\n\t * Typically primary keys are numeric and this is not a valid ID value in an\n\t * HTML document - is also increases the likelihood of an ID clash if multiple\n\t * tables are used on a single page. As such, a prefix is assigned to the\n\t * primary key value for each row, and this is used as the DOM ID, so Editor\n\t * can track individual rows.\n\t * @returns {string} id prefix\n\t */\n\tpublic idPrefix(): string;\n\t/**\n\t * Get the id prefix.\n\t * @param {string} idPrefix Prefix to use.\n\t * @returns {Editor} Self for chaining\n\t */\n\tpublic idPrefix(idPrefix: string): Editor;\n\tpublic idPrefix(idPrefix?: string): any {\n\t\tif ( idPrefix === undefined ) {\n\t\t\treturn this._idPrefix;\n\t\t}\n\n\t\tthis._idPrefix = idPrefix;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the data that is being processed by the Editor instance. This is only\n\t * useful once the `process()` method has been called, and is available for\n\t * use in validation and formatter methods.\n\t * @returns {IDtRequest} Data that has been passed into {@link Editor.process()}\n\t */\n\tpublic inData(): IDtRequest {\n\t\treturn this._processData;\n\t}\n\n\t/**\n\t * Get the configured Mjoin instances.\n\t *\n\t * Note that for the majority of use cases you will want to use the\n\t * `leftJoin()` method. It is significantly easier to use if you are just\n\t * doing a simple left join!\n\t *\n\t * The list of Join instances that Editor will join the parent table to\n\t * (i.e. the one that the {@link Editor.table} and {@link Editor.fields}\n\t * methods refer to in this class instance).\n\t *\n\t * @returns {Mjoin[]} Array of Mjoin instances\n\t */\n\tpublic join(): Mjoin[];\n\t/**\n\t * Add one or more Mjoin instances.\n\t * @param {...Mjoin[]} join Mjoin instance to add.\n\t * @returns {Editor} Self for chaining.\n\t */\n\tpublic join(...join: Mjoin[]): Editor;\n\tpublic join(...join: Mjoin[]): any {\n\t\tif ( join === undefined || join.length === 0 ) {\n\t\t\treturn this._join;\n\t\t}\n\n\t\tthis._join.push.apply( this._join, join );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a left join condition to the Editor instance, allowing it to operate\n\t * over multiple tables. Multiple `leftJoin()` calls can be made for a\n\t * single Editor instance to join multiple tables.\n\t *\n\t * A left join is the most common type of join that is used with Editor\n\t * so this method is provided to make its use very easy to configure. Its\n\t * parameters are basically the same as writing an SQL left join statement,\n\t * but in this case Editor will handle the create, update and remove\n\t * requirements of the join for you:\n\t *\n\t * * Create - On create Editor will insert the data into the primary table\n\t *   and then into the joined tables - selecting the required data for each\n\t *   table.\n\t * * Edit - On edit Editor will update the main table, and then either\n\t *   update the existing rows in the joined table that match the join and\n\t *   edit conditions, or insert a new row into the joined table if required.\n\t * * Remove - On delete Editor will remove the main row and then loop over\n\t *   each of the joined tables and remove the joined data matching the join\n\t *   link from the main table.\n\t *\n\t * Please note that when using join tables, Editor requires that you fully\n\t * qualify each field with the field's table name. SQL can result table\n\t * names for ambiguous field names, but for Editor to provide its full CRUD\n\t * options, the table name must also be given. For example the field\n\t * `first_name` in the table `users` would be given as `users.first_name`.\n\t * @param {string} table Table name to do a join onto\n\t * @param {string} field1 Field from the parent table to use as the join link\n\t * @param {string} operator Join condition (`=`, '<`, etc)\n\t * @param {string} field2 Field from the child table to use as the join link\n\t * @returns {Editor} Self for chaining\n\t */\n\tpublic leftJoin( table: string, field1: string, operator: string, field2: string ): Editor {\n\t\tthis._leftJoin.push( {\n\t\t\tfield1,\n\t\t\tfield2,\n\t\t\toperator,\n\t\t\ttable,\n\t\t} );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an event listener. The `Editor` class will trigger an number of\n\t * events that some action can be taken on.\n\t * @param {string} name Event name\n\t * @param {Function} callback Event callback function that will be executed\n\t *   when the event occurs.\n\t * @returns {Editor} Self for chaining.\n\t */\n\tpublic on( name: string, callback: Function ): Editor {\n\t\tif ( ! this._events[ name ] ) {\n\t\t\tthis._events[ name ] = [];\n\t\t}\n\n\t\tthis._events[ name ].push( callback );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the table name.\n\t *\n\t * The table name designated which DB table Editor will use as its data\n\t * source for working with the database. Table names can be given with an\n\t * alias, which can be used to simplify larger table names. The field\n\t * names would also need to reflect the alias, just like an SQL query. For\n\t * example: `users as a`.\n\t * @returns {string[]} Configured table name\n\t */\n\tpublic table(): string[];\n\t/**\n\t * Set the table name.\n\t * @param {(string|string[])} table Database table name to use\n\t * @returns {Editor} Self for chaining\n\t */\n\tpublic table(table: string|string[]): Editor;\n\tpublic table(table?: string|string[]): any {\n\t\tif ( table === undefined || table.length === 0 ) {\n\t\t\treturn this._table;\n\t\t}\n\n\t\tif ( typeof table === 'string' ) {\n\t\t\tthis._table.push( table );\n\t\t}\n\t\telse {\n\t\t\tthis._table.push.apply( this._table, table );\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get transaction support status\n\t *\n\t * When enabled (which it is by default) Editor will use an SQL transaction\n\t * to ensure data integrity while it is performing operations on the table.\n\t * This can be optionally disabled using this method, if required by your\n\t * database configuration.\n\t * @returns {boolean} true is transactions are enabled, false otherwise.\n\t */\n\tpublic transaction(): boolean;\n\t/**\n\t * Set transaction support state\n\t * @param {boolean} transaction Set the transaction status\n\t * @returns {Editor} Self for chaining\n\t */\n\tpublic transaction(transaction: boolean): Editor;\n\tpublic transaction(transaction?: boolean): any {\n\t\tif ( transaction === undefined ) {\n\t\t\treturn this._transaction;\n\t\t}\n\n\t\tthis._transaction = transaction;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the primary key value.\n\t *\n\t * The primary key must be known to Editor so it will know which rows are being\n\t * edited / deleted upon those actions. The default value is ['id'].\n\t * @returns {string[]} Array of column names\n\t */\n\tpublic pkey(): string[];\n\t/**\n\t * Set the primary key value(s)\n\t * @param {string|string[]} [pkey] Primary key column name. Use an array of\n\t *   strings if using a compound key.\n\t * @returns {Editor} Self for chaining.\n\t */\n\tpublic pkey(pkey: string|string[]): Editor;\n\tpublic pkey(pkey?: string|string[]): any {\n\t\tif ( pkey === undefined ) {\n\t\t\treturn this._pkey;\n\t\t}\n\n\t\tif ( typeof pkey === 'string' ) {\n\n\t\t\tthis._pkey = [ pkey ];\n\t\t}\n\t\telse {\n\t\t\tthis._pkey = pkey;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Convert a primary key array of field values to a combined value.\n\t * @param {object} row The row of data that the primary key value should\n\t *   be extracted from.\n\t * @param {boolean} [flat=false] Flag to indicate if the given array is flat\n\t *   (useful for `where` conditions) or nested for join tables.\n\t * @returns {string} The created primary key value.\n\t */\n\tpublic pkeyToValue( row: object, flat: boolean = false ): string {\n\t\tlet pkey = this.pkey();\n\t\tlet id = [];\n\t\tlet val;\n\n\t\tfor ( let i = 0, ien = pkey.length; i < ien; i++ ) {\n\t\t\tlet column = pkey[i];\n\n\t\t\tif ( flat ) {\n\t\t\t\tval = row[ column ] !== undefined ?\n\t\t\t\t\trow[ column ] :\n\t\t\t\t\tnull;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tval = this._readProp( column, row );\n\t\t\t}\n\n\t\t\tif ( val === null ) {\n\t\t\t\tthrow new Error( 'Primary key element is not available in the data set' );\n\t\t\t}\n\n\t\t\tid.push( val );\n\t\t}\n\n\t\treturn id.join( this._pkeySeparator() );\n\t}\n\n\t/**\n\t * Convert a primary key combined value to an array of field values.\n\t * @param {string} value The id that should be split apart\n\t * @param {boolean} [flat=false] Flag to indicate if the returned array should be\n\t *   flat (useful for `where` conditions) or nested for join tables.\n\t * @param {string[]} [pkey=null] The primary key name - will use the instance value\n\t *   if not given\n\t * @returns {object} Array of field values that the id was made up of\n\t */\n\tpublic pkeyToObject( value: string, flat: boolean = false, pkey: string[] = null): object {\n\t\tlet arr: object = {};\n\n\t\tvalue = value.replace( this.idPrefix(), '' );\n\t\tlet idParts = value.split( this._pkeySeparator() );\n\n\t\tif ( pkey === null ) {\n\t\t\tpkey = this.pkey();\n\t\t}\n\n\t\tif ( pkey.length !== idParts.length ) {\n\t\t\tthrow new Error( 'Primary key data does not match submitted data' );\n\t\t}\n\n\t\tfor ( let i = 0, ien = idParts.length; i < ien; i++ ) {\n\t\t\tif ( flat ) {\n\t\t\t\tarr[ pkey[i] ] = idParts[i];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._writeProp( arr, pkey[i], idParts[i] );\n\t\t\t}\n\t\t}\n\n\t\treturn arr;\n\t}\n\n\t/**\n\t * Process a request from the Editor client-side to get / set data.\n\t * @param {IDtRequest} data Form data sent from the client-side -\n\t *   e.g. `req.body`\n\t * @param {IUpload} [files=null] File information, used for upload\n\t *   requests - e.g. `req.files`\n\t * @returns {Promise<Editor>} Promise that is fulfilled when Editor\n\t *   has completed its processing - result is the Editor instance.\n\t */\n\tpublic async process( data: IDtRequest, files: IUpload = null ): Promise<Editor> {\n\t\tlet that = this;\n\t\tlet run = async function() {\n\t\t\tif ( that._tryCatch ) {\n\t\t\t\ttry {\n\t\t\t\t\tawait that._process( data, files );\n\t\t\t\t} catch ( e ) {\n\t\t\t\t\tthat._out.error = e.message;\n\t\t\t\t\t// knex does the rollback if an exception occurs\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tawait that._process( data, files );\n\t\t\t}\n\t\t};\n\n\t\tif ( this._transaction ) {\n\t\t\tawait this._db.transaction( async function(trx) {\n\t\t\t\tthat._knexTransaction = trx;\n\t\t\t\tawait run();\n\t\t\t\tthat._knexTransaction = null;\n\t\t\t} );\n\t\t}\n\t\telse {\n\t\t\tawait run();\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the try/catch status.\n\t *\n\t * Editor uses a try/catch in the {@link Editor.process} method, and it can be\n\t * useful to disable this for debugging, but its not recommended you do that\n\t * in production.\n\t * @returns {boolean} Try / catch status.\n\t */\n\tpublic tryCatch(): boolean;\n\t/**\n\t * Set the try/catch state.\n\t * @param {boolean} tryCatch Value to set. `true` will enable, `false` disable.\n\t * @returns {Editor} Self for chaining.\n\t */\n\tpublic tryCatch(tryCatch: boolean): Editor;\n\tpublic tryCatch(tryCatch?: boolean): any {\n\t\tif ( tryCatch === undefined ) {\n\t\t\treturn this._tryCatch;\n\t\t}\n\n\t\tthis._tryCatch = tryCatch;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Perform validation on a data set.\n\t *\n\t * Note that validation is performed on data only when the action is\n\t * `create` or `edit`. Additionally, validation is performed on the _wire\n\t * data_ - i.e. that which is submitted from the client, without formatting.\n\t * Any formatting required by `setFormatter` is performed after the data\n\t * from the client has been validated.\n\t * @param {IDtError[]} errors Output array to which field error information will\n\t *   be written. Each element in the array represents a field in an error\n\t *   condition. These elements are themselves arrays with two properties\n\t *   set; `name` and `status`.\n\t * @param {IDtRequest} http The format data to check\n\t * @returns {Promise<boolean>} `true` if the data is valid, `false` if not.\n\t */\n\tpublic async validate( errors: IDtError[], http: IDtRequest ): Promise<boolean> {\n\t\tif ( http.action !== 'create' && http.action !== 'edit' ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet keys = Object.keys( http.data );\n\t\tlet fields = this.fields();\n\t\tlet idPrefix = this.idPrefix();\n\n\t\tfor ( let i = 0, ien = keys.length; i < ien; i++ ) {\n\t\t\tlet values = http.data[ keys[i] ];\n\n\t\t\tfor ( let j = 0, jen = fields.length; j < jen; j++ ) {\n\t\t\t\tlet field = fields[j];\n\t\t\t\tlet validation = await field.validate( values, this, keys[i].replace( idPrefix, '' ) );\n\n\t\t\t\tif ( validation !== true ) {\n\t\t\t\t\terrors.push( {\n\t\t\t\t\t\tname: field.name(),\n\t\t\t\t\t\tstatus: validation,\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// MJoin validation\n\t\t\tfor ( let j = 0, jen = this._join.length; j < jen; j++ ) {\n\t\t\t\tawait this._join[j].validate( errors, this, values );\n\t\t\t}\n\t\t}\n\n\t\treturn errors.length > 0 ?\n\t\t\tfalse :\n\t\t\ttrue;\n\t}\n\n\t/**\n\t * Get any global validator that has been set.\n\t * @returns {IGlobalValidator} Global validator\n\t */\n\tpublic validator(): IGlobalValidator;\n\t/**\n\t * Set a global validator. This will be triggered for the create, edit\n\t * and remove actions performed from the client-side.\n\t * @param {IGlobalValidator} fn Function to execute when validating the input data.\n\t * @returns {Editor} Self for chaining\n\t */\n\tpublic validator(fn: IGlobalValidator): Editor;\n\tpublic validator(fn?: IGlobalValidator): any {\n\t\tif ( fn === undefined ) {\n\t\t\treturn this._validator;\n\t\t}\n\n\t\tthis._validator = fn;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the array of conditions applied to the method.\n\t * @returns {any[]} Knex where conditions.\n\t */\n\tpublic where(): any[];\n\t/**\n\t * Set a condition for the queries Editor will perform. Editor uses Knex\n\t * to connect to the database, and exposes the knex object using this method\n\t * so you can add any conditions you like that are supported by Knex.\n\t * @param {*} cond Knex query condition\n\t * @returns {Editor} Self for chaining.\n\t */\n\tpublic where(...cond: any[]): Editor;\n\tpublic where(...cond: any[]): any {\n\t\tif ( cond.length === 0 ) {\n\t\t\treturn this._where;\n\t\t}\n\n\t\tthis._where.push( cond );\n\n\t\treturn this;\n\t}\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Private methods\n\t */\n\n\tprivate async _fileClean(): Promise<void> {\n\t\tlet that = this;\n\t\tlet run = async function( fields ) {\n\t\t\tfor ( let i = 0, ien = fields.length; i < ien; i++ ) {\n\t\t\t\tlet upload = fields[i].upload();\n\n\t\t\t\tif ( upload ) {\n\t\t\t\t\tawait upload.dbCleanExec( that, fields[i] );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tawait run( this._fields );\n\n\t\tfor ( let i = 0, ien = this._join.length; i < ien; i++ ) {\n\t\t\tawait run( this._join[i].fields() );\n\t\t}\n\t}\n\n\tprivate async _fileData( limitTable: string = null, id: string = null ): Promise<object> {\n\t\tlet files = {};\n\n\t\t// The fields in this instance\n\t\tawait this._fileDataFields( files, this._fields, limitTable, id );\n\n\t\t// From joined tables\n\t\tfor ( let i = 0, ien = this._join.length; i < ien; i++ ) {\n\t\t\tawait this._fileDataFields( files, this._join[i].fields(), limitTable, id );\n\t\t}\n\n\t\treturn files;\n\t}\n\n\tprivate async _fileDataFields(\n\t\tfiles: object, fields: Field[], limitTable: string, id: string = null\n\t): Promise<void> {\n\t\tfor ( let i = 0, ien = fields.length; i < ien; i++ ) {\n\t\t\tlet upload = fields[i].upload();\n\n\t\t\tif ( upload ) {\n\t\t\t\tlet table = upload.table();\n\n\t\t\t\tif ( ! table ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( limitTable !== null && table !== limitTable ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( files[ table ] ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet fileData = await upload.data( this.db(), id );\n\n\t\t\t\tif ( fileData ) {\n\t\t\t\t\tfiles[ table ] = fileData;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _findField( name: string, type: 'db'|'name' ): Field {\n\t\tlet fields = this._fields;\n\n\t\tfor ( let i = 0, ien = fields.length; i < ien; i++ ) {\n\t\t\tlet field = fields[i];\n\n\t\t\tif ( type === 'name' && field.name() === name ) {\n\t\t\t\treturn field;\n\t\t\t}\n\t\t\telse if ( type === 'db' && field.dbField() === name ) {\n\t\t\t\treturn field;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate async _get( id: string, http: object = null ): Promise<IDtResponse> {\n\t\tlet cancel = await this._trigger( 'preGet', id );\n\t\tif ( cancel === false ) {\n\t\t\treturn {};\n\t\t}\n\n\t\tlet fields = this.fields();\n\t\tlet pkeys = this.pkey();\n\t\tlet query = this.db()( this.table()[0] );\n\t\tlet options = {};\n\n\t\tfor ( let i = 0, ien = pkeys.length; i < ien; i++ ) {\n\t\t\tquery.select( pkeys[i] + ' as ' + pkeys[i] );\n\t\t}\n\n\t\tfor ( let i = 0, ien = fields.length; i < ien; i++ ) {\n\t\t\tif ( pkeys.includes( fields[i].dbField() ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( fields[i].apply('get') && fields[i].getValue() === undefined ) {\n\t\t\t\t// Use the `as` to ensure that the table name is included, if using a join\n\t\t\t\tlet dbField = fields[i].dbField();\n\n\t\t\t\tif ( dbField.indexOf( '(') === -1 ) {\n\t\t\t\t\tquery.select( dbField + ' as ' + dbField );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tquery.select( this.db().raw(dbField + ' as \"' + dbField + '\"') );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._getWhere( query );\n\t\tthis._performLeftJoin( query );\n\t\tlet ssp = await this._ssp( query, http );\n\n\t\tif ( id !== null ) {\n\t\t\tquery.where( this.pkeyToObject( id, true ) );\n\t\t}\n\n\t\tlet result = await query;\n\t\tif ( ! result ) {\n\t\t\tthrow new Error( 'Error executing SQL for data get. Enable SQL debug using ' +\n\t\t\t\t'`debug: true` in your Knex db configuration'\n\t\t\t);\n\t\t}\n\n\t\tlet out = [];\n\t\tfor ( let i = 0, ien = result.length; i < ien; i++ ) {\n\t\t\tlet inner = {\n\t\t\t\tDT_RowId: this.idPrefix() + this.pkeyToValue( result[i], true )\n\t\t\t};\n\n\t\t\tfor ( let j = 0, jen = fields.length; j < jen; j++ ) {\n\t\t\t\tif ( fields[j].apply('get') ) {\n\t\t\t\t\tfields[j].write( inner, result[i] );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tout.push( inner );\n\t\t}\n\n\t\t// Field options\n\t\tif ( id === null ) {\n\t\t\tfor ( let i = 0, ien = fields.length; i < ien; i++ ) {\n\t\t\t\tlet opts = await fields[i].optionsExec( this._db );\n\n\t\t\t\tif ( opts ) {\n\t\t\t\t\toptions[ fields[i].name() ] = opts;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Build a DtResponse object\n\t\tlet response = {\n\t\t\tdata: out,\n\t\t\tdraw: ssp.draw,\n\t\t\tfiles: await this._fileData(),\n\t\t\toptions,\n\t\t\trecordsFiltered: ssp.recordsFiltered,\n\t\t\trecordsTotal: ssp.recordsTotal\n\t\t};\n\n\t\t// Row based joins\n\t\tfor ( let i = 0, ien = this._join.length; i < ien; i++ ) {\n\t\t\tawait this._join[i].data( this, response );\n\t\t}\n\n\t\tawait this._trigger( 'postGet', id, out );\n\n\t\treturn response;\n\t}\n\n\tprivate _getWhere( query: knex ): void {\n\t\tlet where = this.where();\n\n\t\tfor ( let i = 0, ien = where.length; i < ien; i++ ) {\n\t\t\tquery.where( ...where[i] );\n\t\t}\n\t}\n\n\tprivate async _insert( values: object ): Promise<object> {\n\t\t// Only allow a composite insert if the values for the key are\n\t\t// submitted. This is required because there is no reliable way in MySQL\n\t\t// to return the newly inserted row, so we can't know any newly\n\t\t// generated values.\n\t\tthis._pkeyValidateInsert( values );\n\n\t\t// Insert the new row\n\t\tlet id = await this._insertOrUpdate( null, values );\n\n\t\tif ( id === null ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Was the primary key altered as part of the edit, if so use the\n\t\t// submitted values\n\t\tid = this._pkey.length > 1 ?\n\t\t\tthis.pkeyToValue( values ) :\n\t\t\tthis._pkeySubmitMerge( id, values );\n\n\t\t// Join\n\t\tfor ( let i = 0, ien = this._join.length; i < ien; i++ ) {\n\t\t\tthis._join[i].create( this, id, values );\n\t\t}\n\n\t\tawait this._trigger( 'writeCreate', id, values );\n\n\t\tlet row = await this._get( id );\n\t\trow = row.data.length > 0 ?\n\t\t\trow.data[0] :\n\t\t\tnull;\n\n\t\tawait this._trigger( 'postCreate', id, values, row );\n\n\t\treturn row;\n\t}\n\n\tprivate async _insertOrUpdate( id: string, values: object ): Promise<string> {\n\t\t// Loop over the tables, doing the insert or update as needed\n\t\tlet tables = this.table();\n\n\t\tfor ( let i = 0, ien = tables.length; i < ien; i++ ) {\n\t\t\tlet res = await this._insertOrUpdateTable(\n\t\t\t\ttables[i],\n\t\t\t\tvalues,\n\t\t\t\tid !== null ?\n\t\t\t\t\tthis.pkeyToObject( id, true ) :\n\t\t\t\t\tnull\n\t\t\t);\n\n\t\t\t// If you don't have an id yet, then the first insert will return\n\t\t\t// the id we want\n\t\t\tif ( res !== null && id === null ) {\n\t\t\t\tid = res;\n\t\t\t}\n\t\t}\n\n\t\t// And for the left join tables\n\t\tfor ( let i = 0, ien = this._leftJoin.length; i < ien; i++ ) {\n\t\t\tlet join = this._leftJoin[i];\n\n\t\t\t// Which side of the join refers to the parent table?\n\t\t\tlet joinTable = this._alias( join.table, 'alias' );\n\t\t\tlet tablePart = this._part( join.field1 );\n\t\t\tlet parentLink;\n\t\t\tlet childLink;\n\t\t\tlet whereVal;\n\n\t\t\tif ( this._part( join.field1, 'db' ) ) {\n\t\t\t\ttablePart = this._part( join.field1, 'db' ) + '.' + tablePart;\n\t\t\t}\n\n\t\t\tif ( tablePart === joinTable ) {\n\t\t\t\tparentLink = join.field2;\n\t\t\t\tchildLink = join.field1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tparentLink = join.field1;\n\t\t\t\tchildLink = join.field2;\n\t\t\t}\n\n\t\t\tif ( parentLink === this._pkey[0] && this._pkey.length === 1 ) {\n\t\t\t\twhereVal = id;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// We need submitted information about the joined data to be\n\t\t\t\t// submitted as well as the new value. We first check if the\n\t\t\t\t// host field was submitted\n\t\t\t\tlet field = this._findField( parentLink, 'db' );\n\n\t\t\t\tif ( ! field || ! field.apply( 'edit', values ) ) {\n\t\t\t\t\t// If not, then check if the child id was submitted\n\t\t\t\t\tfield = this._findField( childLink, 'db' );\n\n\t\t\t\t\tif ( ! field || ! field.apply( 'edit', values ) ) {\n\t\t\t\t\t\t// No data available, so we can't do anything\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\twhereVal = field.val( 'set', values );\n\t\t\t}\n\n\t\t\tlet whereName = this._part( childLink, 'column' );\n\n\t\t\tthis._insertOrUpdateTable(\n\t\t\t\tjoin.table,\n\t\t\t\tvalues,\n\t\t\t\t{ [whereName]: whereVal }\n\t\t\t);\n\t\t}\n\n\t\treturn id;\n\t}\n\n\tprivate async _insertOrUpdateTable( table: string, values: object, where: object = null ) {\n\t\tlet set = {};\n\t\tlet res;\n\t\tlet action: 'create'|'edit' = (where === null) ? 'create' : 'edit';\n\t\tlet tableAlias = this._alias( table, 'alias' );\n\t\tlet fields = this.fields();\n\n\t\tfor ( let i = 0, ien = fields.length; i < ien; i++ ) {\n\t\t\tlet field = fields[i];\n\t\t\tlet tablePart = this._part( field.dbField() );\n\n\t\t\tif ( this._part( field.dbField(), 'db' ) ) {\n\t\t\t\ttablePart = this._part( field.dbField(), 'db' ) + '.' + tablePart;\n\t\t\t}\n\n\t\t\t// Does this field apply to the table (only check when a join is\n\t\t\t// being used)\n\t\t\tif ( this._leftJoin.length && tablePart !== tableAlias ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check if this field should be set, based on options and\n\t\t\t// submitted data\n\t\t\tif ( ! field.apply( action, values ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Some database's (specifically pg) don't like having the table\n\t\t\t// name prefixing the column name.\n\t\t\tlet fieldPart = this._part( field.dbField(), 'column' );\n\t\t\tset[ fieldPart ] = field.val( 'set', values );\n\t\t}\n\n\t\tif ( Object.keys(set).length === 0 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( action === 'create' ) {\n\t\t\tres = await this\n\t\t\t\t._db( table )\n\t\t\t\t.insert( set )\n\t\t\t\t.returning( this._pkey );\n\n\t\t\treturn typeof res[0] === 'object' ?\n\t\t\t\tres[0][ this._pkey[0] ].toString() :\n\t\t\t\tres[0].toString();\n\t\t}\n\t\telse {\n\t\t\tawait this\n\t\t\t\t._db( table )\n\t\t\t\t.update( set )\n\t\t\t\t.where( where );\n\t\t}\n\t}\n\n\tprivate _alias( name: string, type: 'alias'|'orig' = 'alias'): string {\n\t\tif ( name.indexOf( ' as ' ) !== -1 ) {\n\t\t\tlet a = name.split(/ as /i);\n\t\t\treturn type === 'alias' ?\n\t\t\t\ta[1] :\n\t\t\t\ta[0];\n\t\t}\n\n\t\tif ( name.indexOf( ' ' ) !== -1 ) {\n\t\t\tlet a = name.split(/ /i);\n\t\t\treturn type === 'alias' ?\n\t\t\t\ta[1] :\n\t\t\t\ta[0];\n\t\t}\n\n\t\treturn name;\n\t}\n\n\tprivate _part( name: string, type: 'table'|'db'|'column' = 'table'): string {\n\t\tlet db;\n\t\tlet table;\n\t\tlet column;\n\n\t\tif ( name.indexOf('.') !== -1 ) {\n\t\t\tlet a = name.split('.');\n\n\t\t\tif ( a.length === 3 ) {\n\t\t\t\tdb = a[0];\n\t\t\t\ttable = a[1];\n\t\t\t\tcolumn = a[2];\n\t\t\t}\n\t\t\telse if ( a.length === 2 ) {\n\t\t\t\ttable = a[0];\n\t\t\t\tcolumn = a[1];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tcolumn = name;\n\t\t}\n\n\t\tif ( type === 'db' ) {\n\t\t\treturn db;\n\t\t}\n\t\telse if ( type === 'table' ) {\n\t\t\treturn table;\n\t\t}\n\t\treturn column;\n\t}\n\n\tprivate _prepJoin(): void {\n\t\tif ( this._leftJoin.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if the primary key has a table identifier - if not - add one\n\t\tfor ( let i = 0, ien = this._pkey.length; i < ien; i++ ) {\n\t\t\tlet val = this._pkey[i];\n\n\t\t\tif ( val.indexOf('.') === -1 ) {\n\t\t\t\tthis._pkey[i] = this._alias( this.table()[0], 'alias' ) + '.' + val;\n\t\t\t}\n\t\t}\n\n\t\t// Check that all fields have a table selector, otherwise, we'd need to\n\t\t// know the structure of the tables, to know which fields belong in\n\t\t// which. This extra requirement on the fields removes that\n\t\tfor ( let i = 0, ien = this._fields.length; i < ien; i++ ) {\n\t\t\tlet field = this._fields[i];\n\t\t\tlet name = field.dbField();\n\n\t\t\tif ( name.indexOf('.') === -1 ) {\n\t\t\t\tthrow new Error( 'Table part of the field \"' + name + '\" was not found. ' +\n\t\t\t\t\t'In Editor instances that use a join, all fields must have the ' +\n\t\t\t\t\t'database table set explicitly.'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _performLeftJoin( query: knex ): void {\n\t\tfor ( let i = 0, ien = this._leftJoin.length; i < ien; i++ ) {\n\t\t\tlet join = this._leftJoin[i];\n\n\t\t\tquery.leftJoin( join.table, function() {\n\t\t\t\tthis.on( join.field1, join.operator, join.field2 );\n\t\t\t} );\n\t\t}\n\t}\n\n\tprivate _pkeySeparator(): string {\n\t\tlet str = this.pkey().join(',');\n\n\t\treturn crc.crc32( str ).toString(16);\n\t}\n\n\tprivate _pkeySubmitMerge( pkeyVal: string, row: object ): string {\n\t\tlet pkey = this._pkey;\n\t\tlet arr = this.pkeyToObject( pkeyVal, true );\n\n\t\tfor ( let i = 0, ien = pkey.length; i < ien; i++ ) {\n\t\t\tlet column = pkey[ i ];\n\t\t\tlet field = this._findField( column, 'db' );\n\n\t\t\tif ( field && field.apply( 'edit', row ) ) {\n\t\t\t\tarr[ column ] = field.val( 'set', row );\n\t\t\t}\n\t\t}\n\n\t\treturn this.pkeyToValue( arr, true );\n\t}\n\n\tprivate _pkeyValidateInsert( row: object ): boolean {\n\t\tlet pkey = this.pkey();\n\n\t\tif ( pkey.length === 1 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tfor ( let i = 0, ien = pkey.length; i < ien; i++ ) {\n\t\t\tlet column = pkey[i];\n\t\t\tlet field = this._findField( column, 'db' );\n\n\t\t\tif ( ! field || ! field.apply('create', row) ) {\n\t\t\t\tthrow new Error( 'When inserting into a compound key table, ' +\n\t\t\t\t\t'all fields that are part of the compound key must be ' +\n\t\t\t\t\t'submitted with a specific value.'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async _process( data: IDtRequest, upload: IUpload ): Promise<void> {\n\t\tthis._out = {\n\t\t\tdata: [],\n\t\t\tfieldErrors: []\n\t\t};\n\n\t\tthis._processData = data;\n\t\tthis._uploadData = upload;\n\t\tthis._formData = data.data ? data.data : null;\n\t\tthis._prepJoin();\n\n\t\tif ( this._validator ) {\n\t\t\tlet ret = await this._validator( this, data.action, data );\n\n\t\t\tif ( ret !== true ) {\n\t\t\t\tthis._out.error = ret;\n\t\t\t}\n\t\t}\n\n\t\tif ( ! this._out.error ) {\n\t\t\tif ( ! data.action ) {\n\t\t\t\tlet outData = await this._get( null, data );\n\n\t\t\t\tthis._out.data = outData.data;\n\t\t\t\tthis._out.draw = outData.draw;\n\t\t\t\tthis._out.files = outData.files;\n\t\t\t\tthis._out.options = outData.options;\n\t\t\t\tthis._out.recordsTotal = outData.recordsTotal;\n\t\t\t\tthis._out.recordsFiltered = outData.recordsFiltered;\n\t\t\t}\n\t\t\telse if ( data.action === 'upload' ) {\n\t\t\t\tawait this._upload( data );\n\t\t\t}\n\t\t\telse if ( data.action === 'remove' ) {\n\t\t\t\tawait this._remove( data );\n\t\t\t\tawait this._fileClean();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// create or edit\n\t\t\t\tlet keys = Object.keys( data.data );\n\n\t\t\t\t// Pre events so they can occur before validation, and they\n\t\t\t\t// all happen together\n\t\t\t\tfor ( let i = 0, ien = keys.length; i < ien; i++ ) {\n\t\t\t\t\tlet cancel = null;\n\t\t\t\t\tlet idSrc = keys[i];\n\t\t\t\t\tlet values = data.data[keys[i]];\n\n\t\t\t\t\tif ( data.action === 'create' ) {\n\t\t\t\t\t\tcancel = await this._trigger( 'preCreate', values );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlet id = idSrc.replace( this.idPrefix(), '' );\n\t\t\t\t\t\tcancel = await this._trigger( 'preEdit', id, values );\n\t\t\t\t\t}\n\n\t\t\t\t\t// One of the event handlers returned false - don't continue\n\t\t\t\t\tif ( cancel === false ) {\n\t\t\t\t\t\t// Remove the data from the data set so it won't be processed\n\t\t\t\t\t\tdelete data.data[ idSrc ];\n\n\t\t\t\t\t\t// Tell the client-side we aren't updating this row\n\t\t\t\t\t\tthis._out.cancelled.push( idSrc );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Field validation\n\t\t\t\tlet valid = await this.validate( this._out.fieldErrors, data );\n\n\t\t\t\tif ( valid ) {\n\t\t\t\t\tkeys = Object.keys( data.data );\n\n\t\t\t\t\tfor ( let i = 0, ien = keys.length; i < ien; i++ ) {\n\t\t\t\t\t\tlet d = data.action === 'create' ?\n\t\t\t\t\t\t\tawait this._insert( data.data[keys[i]] ) :\n\t\t\t\t\t\t\tawait this._update( keys[i], data.data[keys[i]] );\n\n\t\t\t\t\t\tif ( d !== null ) {\n\t\t\t\t\t\t\tthis._out.data.push( d );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tawait this._fileClean();\n\t\t\t}\n\t\t}\n\n\t\tif ( this._debug ) {\n\t\t\tthis._out.debug = this._debugInfo.slice();\n\t\t}\n\t}\n\n\tprivate async _remove( http: IDtRequest ): Promise<void> {\n\t\tlet ids: string[] = [];\n\t\tlet keys = Object.keys( http.data );\n\n\t\tfor ( let i = 0, ien = keys.length; i < ien; i++ ) {\n\t\t\t// Strip the ID prefix that the client-side sends back\n\t\t\tlet id = keys[i].replace( this.idPrefix(), '' );\n\n\t\t\tlet res = await this._trigger( 'preRemove', id, http.data[keys[i]] );\n\n\t\t\t// Allow the event to be cancelled and inform the client-side\n\t\t\tif ( res === false ) {\n\t\t\t\tthis._out.cancelled.push( id );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tids.push( id );\n\t\t\t}\n\t\t}\n\n\t\tif ( ids.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Row based joins - remove first as the host row will be removed which\n\t\t// is a dependency\n\t\tfor ( let i = 0, ien = this._join.length; i < ien; i++ ) {\n\t\t\tawait this._join[i].remove( this, ids );\n\t\t}\n\n\t\t// Remove from the left join tables\n\t\tfor ( let i = 0, ien = this._leftJoin.length; i < ien; i++ ) {\n\t\t\tlet join = this._leftJoin[i];\n\t\t\tlet table = this._alias( join.table, 'orig' );\n\t\t\tlet parentLink;\n\t\t\tlet childLink;\n\n\t\t\t// Which side of the join refers to the parent table?\n\t\t\tif ( join.field1.indexOf( join.table ) === 0 ) {\n\t\t\t\tparentLink = join.field2;\n\t\t\t\tchildLink = join.field1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tparentLink = join.field1;\n\t\t\t\tchildLink = join.field2;\n\t\t\t}\n\n\t\t\t// Only delete on the primary key, since that is what the ids refer\n\t\t\t// to - otherwise we'd be deleting random data! Note that this\n\t\t\t// won't work with compound keys since the parent link would be\n\t\t\t// over multiple fields.\n\t\t\tif ( parentLink === this._pkey[0] && this._pkey.length === 1 ) {\n\t\t\t\tawait this._removeTable( join.table, ids, [childLink] );\n\t\t\t}\n\t\t}\n\n\t\t// Remove from the primary tables\n\t\tlet tables = this.table();\n\n\t\tfor ( let i = 0, ien = tables.length; i < ien; i++ ) {\n\t\t\tawait this._removeTable( tables[i], ids );\n\t\t}\n\n\t\tfor ( let i = 0, ien = keys.length; i < ien; i++ ) {\n\t\t\tawait this._trigger( 'postRemove', keys[i], http.data[ keys[i] ] );\n\t\t}\n\t}\n\n\tprivate async _removeTable( table: string, ids: string[], pkey: string[] = null ): Promise<void> {\n\t\tif ( pkey === null ) {\n\t\t\tpkey = this.pkey();\n\t\t}\n\n\t\t// Check that there is actually a field which has a set option for this table\n\t\tlet count = 0;\n\t\tlet fields = this.fields();\n\n\t\tfor ( let i = 0, ien = fields.length; i < ien; i++ ) {\n\t\t\tlet dbField = fields[i].dbField();\n\n\t\t\tif ( dbField.indexOf('.') === -1 ||\n\t\t\t\t(this._part( dbField, 'table') === table && fields[i].set() !== SetType.None)\n\t\t\t) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\n\t\tif ( count > 0 ) {\n\t\t\tlet q = this._db( table );\n\n\t\t\tfor ( let i = 0, ien = ids.length; i < ien; i++ ) {\n\t\t\t\tlet cond = this.pkeyToObject( ids[i], true, pkey );\n\n\t\t\t\tq.orWhere( function() {\n\t\t\t\t\tthis.where( cond );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tawait q.del();\n\t\t}\n\t}\n\n\tprivate async _ssp( query: knex.query, http: IDtRequest ): Promise<ISSP> {\n\t\tif ( ! http || ! http.draw ) {\n\t\t\treturn {};\n\t\t}\n\n\t\t// Add the server-side processing conditions to the get query\n\t\tthis._sspLimit( query, http );\n\t\tthis._sspSort( query, http );\n\t\tthis._sspFilter( query, http );\n\n\t\t// Get the number of rows in the result set\n\t\tlet setCount = this\n\t\t\t._db( this.table() )\n\t\t\t.count( this._pkey[0] + ' as cnt' );\n\n\t\tthis._getWhere( setCount );\n\t\tthis._sspFilter( setCount, http );\n\t\tthis._performLeftJoin( setCount );\n\n\t\tlet res = await setCount;\n\t\tlet recordsFiltered = res[0].cnt;\n\n\t\t// Get the number of rows in the full set\n\t\tlet fullCount = this\n\t\t\t._db( this.table() )\n\t\t\t.count( this._pkey[0] + ' as cnt' );\n\n\t\tthis._getWhere( fullCount );\n\t\tif ( this._where.length  ) { // only needed if there is a where condition\n\t\t\tthis._performLeftJoin( fullCount );\n\t\t}\n\t\tres = await fullCount;\n\t\tlet recordsTotal = res[0].cnt;\n\n\t\treturn {\n\t\t\tdraw: http.draw * 1,\n\t\t\trecordsFiltered,\n\t\t\trecordsTotal\n\t\t};\n\t}\n\n\tprivate _sspField( http: IDtRequest, index: number ): string {\n\t\tlet name = http.columns[ index ].data;\n\t\tlet field = this._findField( name, 'name' );\n\n\t\tif ( ! field ) {\n\t\t\t// Is it the primary key?\n\t\t\tif ( name === 'DT_RowId' ) {\n\t\t\t\treturn this._pkey[0];\n\t\t\t}\n\n\t\t\tthrow new Error( 'Unknown field: ' + name + ' (index ' + index + ')' );\n\t\t}\n\n\t\treturn field.dbField();\n\t}\n\n\tprivate _sspFilter( query: knex.query, http: IDtRequest ): void {\n\t\tlet fields = this.fields();\n\n\t\t// Global filter\n\t\tif ( http.search.value ) {\n\t\t\tquery.where( (q) => {\n\t\t\t\tfor ( let i = 0, ien = http.columns.length; i < ien; i++ ) {\n\t\t\t\t\tif ( http.columns[i].searchable ) {\n\t\t\t\t\t\tlet field = this._sspField( http, i );\n\n\t\t\t\t\t\tif ( field ) {\n\t\t\t\t\t\t\tq.orWhere( field, 'LIKE', '%' + http.search.value + '%' );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Column filter\n\t\tfor ( let i = 0, ien = http.columns.length; i < ien; i++ ) {\n\t\t\tlet column = http.columns[i];\n\t\t\tlet search = column.search.value;\n\n\t\t\tif ( search !== '' && column.searchable ) {\n\t\t\t\tquery.where(\n\t\t\t\t\tthis._sspField( http, i ),\n\t\t\t\t\t'LIKE',\n\t\t\t\t\t'%' + search + '%'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _sspLimit( query: knex.query, http: IDtRequest ): void {\n\t\tif ( http.length !== -1 ) { // -1 is 'show all' in DataTables\n\t\t\tquery\n\t\t\t\t.limit( http.length * 1 )\n\t\t\t\t.offset( http.start * 1 );\n\t\t}\n\t}\n\n\tprivate _sspSort( query: knex.query, http: IDtRequest ): void {\n\t\tfor ( let i = 0, ien = http.order.length; i < ien; i++ ) {\n\t\t\tlet order = http.order[i];\n\n\t\t\tquery.orderBy(\n\t\t\t\tthis._sspField( http, order.column ),\n\t\t\t\torder.dir === 'asc' ? 'asc' : 'desc'\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async _trigger( name: string, ...args ): Promise<boolean> {\n\t\tlet out = null;\n\t\tlet events = this._events[ name ];\n\n\t\tif ( ! this._events[ name ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\targs.unshift( this );\n\n\t\tfor ( let i = 0, ien = events.length; i < ien; i++ ) {\n\t\t\tlet res = await events[i].apply( this, args );\n\n\t\t\tif ( res !== null ) {\n\t\t\t\tout = res;\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t}\n\n\tprivate async _update( id: string, values: object ): Promise<object> {\n\t\tid = id.replace( this.idPrefix(), '' );\n\n\t\t// Update or insert the rows for the parent table and the left joined\n\t\t// tables\n\t\tawait this._insertOrUpdate( id, values );\n\n\t\t// Join\n\t\tfor ( let i = 0, ien = this._join.length; i < ien; i++ ) {\n\t\t\tawait this._join[i].update( this, id, values );\n\t\t}\n\n\t\t// Was the primary key altered as part of the edit, if so use the\n\t\t// submitted values\n\t\tlet getId = this._pkeySubmitMerge( id, values );\n\n\t\tawait this._trigger( 'writeEdit', id, values );\n\n\t\tlet row = await this._get( getId );\n\t\trow = row.data.length > 0 ?\n\t\t\trow.data[0] :\n\t\t\tnull;\n\n\t\tawait this._trigger( 'postEdit', id, values, row );\n\n\t\treturn row;\n\t}\n\n\tprivate async _upload( http: IDtRequest ): Promise<void> {\n\t\t// Search for the upload field in the local fields\n\t\tlet field = this._findField( http.uploadField, 'name' );\n\t\tlet fieldName = '';\n\n\t\tif ( ! field ) {\n\t\t\t// Perhaps it is in a join instance\n\t\t\tfor ( let i = 0, ien = this._join.length; i < ien; i++ ) {\n\t\t\t\tlet join = this._join[i];\n\t\t\t\tlet fields = join.fields();\n\n\t\t\t\tfor ( let j = 0, jen = fields.length; j < jen; j++ ) {\n\t\t\t\t\tlet joinField = fields[j];\n\t\t\t\t\tlet name = join.name() + '[].' + joinField.name();\n\n\t\t\t\t\tif ( name === http.uploadField ) {\n\t\t\t\t\t\tfield = joinField;\n\t\t\t\t\t\tfieldName = name;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfieldName = field.name();\n\t\t}\n\n\t\tif ( ! this._uploadData ) {\n\t\t\tthrow new Error( 'No upload data supplied' );\n\t\t}\n\n\t\tif ( ! field ) {\n\t\t\tthrow new Error( 'Unknown upload field name submitted' );\n\t\t}\n\n\t\tlet eventRes = await this._trigger( 'preUpload', http );\n\n\t\t// Allow the upload to be cancelled by an event handler\n\t\tif ( eventRes === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet upload = field.upload();\n\t\tif ( ! upload ) {\n\t\t\tthrow new Error( 'File uploaded to a field that does not have upload options configured' );\n\t\t}\n\n\t\tlet res = await upload.exec( this, this._uploadData );\n\n\t\tif ( ! res ) {\n\t\t\tthis._out.fieldErrors.push( {\n\t\t\t\tname: fieldName,\n\t\t\t\tstatus: upload.error()\n\t\t\t} );\n\t\t}\n\t\telse {\n\t\t\tlet files = await this._fileData( upload.table(), res );\n\n\t\t\tthis._out.files = files;\n\t\t\tthis._out.upload = {\n\t\t\t\tid: res\n\t\t\t};\n\t\t}\n\t}\n}\n"]}