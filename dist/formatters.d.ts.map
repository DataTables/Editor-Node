{"version":3,"sources":["formatters.ts"],"names":[],"mappings":"AAEA,oBAAY,UAAU,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,KAAK,GAAG,CAAC;AAEzD;;;;;;;;;;GAUG;AACH,MAAM,CAAC,OAAO,OAAO,SAAS;IAC7B;;;;;;;;;OASG;WACW,eAAe,CAAE,MAAM,EAAE,MAAM,GAAI,UAAU;IAU3D;;;;;;;;;OASG;WACW,eAAe,CAAE,MAAM,EAAE,MAAM,GAAI,UAAU;IAU3D;;;;;;;;;OASG;WACW,QAAQ,CAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,GAAI,UAAU;IAU9D;;;;;;OAMG;WACW,OAAO,CAAE,SAAS,GAAE,MAAY,GAAI,UAAU;IAM5D;;;;;;;OAOG;WACW,OAAO,CAAE,SAAS,GAAE,MAAY,GAAI,UAAU;IAM5D;;;;;;;;;;OAUG;WACW,OAAO,CAAE,UAAU,EAAE,GAAG,GAAI,UAAU;IAQpD;;;;;;;;;OASG;WACW,eAAe,CAAE,IAAI,GAAE,MAAY,GAAI,UAAU;IAM/D;;;;;;;OAOG;WACW,aAAa,CAAE,IAAI,GAAE,MAAY,GAAI,UAAU;CAK7D","file":"formatters.d.ts","sourcesContent":["import * as moment from 'moment';\n\nexport type IFormatter = (val: any, data: object) => any;\n\n/**\n * Formatter methods which can be used with {@link Field.getFormatter} and\n * {@link Field.setFormatter}.\n *\n * The methods in this class return a function for use with the formatter\n * methods. Each method may define its own parameters that configure how\n * the formatter operates. For example the date / time formatters take\n * information on the formatting to be used.\n *\n * @export\n */\nexport default class Formatter {\n\t/**\n\t * Convert from SQL date / date time format (ISO8601) to a format given\n\t * by the options parameter. Typically used with a get formatter.\n\t *\n\t * Uses MomentJS - formats are defined by Moment.\n\t *\n\t * @static\n\t * @param {string} format Format to convert to.\n\t * @returns {IFormatter} Configured formatter function\n\t */\n\tpublic static sqlDateToFormat( format: string ): IFormatter {\n\t\treturn function(val: any, data: object ) {\n\t\t\tif ( val === null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn moment( val, 'YYYY-MM-DD' ).format( format );\n\t\t};\n\t}\n\n\t/**\n\t * Convert to SQL date / date time format (ISO8601) from a format given\n\t * by the options parameter. Typically used with a set formatter.\n\t *\n\t * Uses MomentJS - formats are defined by Moment.\n\t *\n\t * @static\n\t * @param {string} format Format to convert from.\n\t * @returns {IFormatter} Configured formatter function\n\t */\n\tpublic static formatToSqlDate( format: string ): IFormatter {\n\t\treturn function(val: any, data: object ) {\n\t\t\tif ( val === null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn moment( val, format ).format( 'YYYY-MM-DD' );\n\t\t};\n\t}\n\n\t/**\n\t * Convert from one date time format to another.\n\t *\n\t * Uses MomentJS - formats are defined by Moment.\n\t *\n\t * @static\n\t * @param {string} from From format\n\t * @param {string} to To format.\n\t * @returns {IFormatter} Configured formatter function\n\t */\n\tpublic static dateTime( from: string, to: string ): IFormatter {\n\t\treturn function(val: any, data: object ) {\n\t\t\tif ( val === null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn moment( val, from ).format( to );\n\t\t};\n\t}\n\n\t/**\n\t * Convert a string of values into an array for use with checkboxes.\n\t *\n\t * @static\n\t * @param {string} [delimiter='|'] Delimiter string (i.e. what to split on)\n\t * @returns {IFormatter} Configured formatter function\n\t */\n\tpublic static explode( delimiter: string = '|' ): IFormatter {\n\t\treturn function(val: any, data: object ) {\n\t\t\treturn val.toString().split( delimiter );\n\t\t};\n\t}\n\n\t/**\n\t * Convert an array of values from a checkbox into a string which can be\n\t * used to store in a text field in a database.\n\t *\n\t * @static\n\t * @param {string} [delimiter='|'] Delimiter string (i.e. what to join on)\n\t * @returns {IFormatter} Configured formatter function\n\t */\n\tpublic static implode( delimiter: string = '|' ): IFormatter {\n\t\treturn function(val: any, data: object ) {\n\t\t\treturn val.join( delimiter );\n\t\t};\n\t}\n\n\t/**\n\t * Convert an empty string to `null`. Null values are very useful in\n\t * databases, but HTTP variables have no way of representing `null` as a\n\t * value, often leading to an empty string and null overlapping. This method\n\t * will check the value to operate on and return null if it is empty.\n\t *\n\t * @static\n\t * @param {*} emptyValue Value to use if an empty value is submitted. `null`\n\t *   is the typical value.\n\t * @returns {IFormatter} Configured formatter function\n\t */\n\tpublic static ifEmpty( emptyValue: any ): IFormatter {\n\t\treturn function(val: any, data: object ) {\n\t\t\treturn val === '' ?\n\t\t\t\temptyValue :\n\t\t\t\tval;\n\t\t};\n\t}\n\n\t/**\n\t * Convert a number from using any character other than a period (dot) to\n\t * one which does use a period. This is useful for allowing numeric user\n\t * input in regions where a comma is used as the decimal character. Use with\n\t * a set formatter.\n\t *\n\t * @static\n\t * @param {string} [char=','] Decimal place character\n\t * @returns {IFormatter} Configured formatter function\n\t */\n\tpublic static fromDecimalChar( char: string = ',' ): IFormatter {\n\t\treturn function(val: any, data: object ) {\n\t\t\treturn val.replace( char, '.' );\n\t\t};\n\t}\n\n\t/**\n\t * Convert a number with a period (dot) as the decimal character to use\n\t * a different character (typically a comma). Use with a get formatter.\n\t *\n\t * @static\n\t * @param {string} [char=','] Decimal place character\n\t * @returns {IFormatter} Configured formatter function\n\t */\n\tpublic static toDecimalChar( char: string = ',' ): IFormatter {\n\t\treturn function(val: any, data: object ) {\n\t\t\treturn val.replace( '.', char );\n\t\t};\n\t}\n}\n"]}