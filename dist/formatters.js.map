{"version":3,"sources":["formatters.ts"],"names":[],"mappings":";;AAAA,+BAAiC;AAIjC;;;;;;;;;;GAUG;AACH;IAAA;IA4HA,CAAC;IA3HG;;;;;;;;;OASG;IACW,yBAAe,GAA7B,UAA+B,MAAc;QACzC,MAAM,CAAC,UAAS,GAAQ,EAAE,IAAY;YAClC,MAAM,CAAC,MAAM,CAAE,GAAG,EAAE,YAAY,CAAE,CAAC,MAAM,CAAE,MAAM,CAAE,CAAC;QACxD,CAAC,CAAC;IACN,CAAC;IAED;;;;;;;;;OASG;IACW,yBAAe,GAA7B,UAA+B,MAAc;QACzC,MAAM,CAAC,UAAS,GAAQ,EAAE,IAAY;YAClC,MAAM,CAAC,MAAM,CAAE,GAAG,EAAE,MAAM,CAAE,CAAC,MAAM,CAAE,YAAY,CAAE,CAAC;QACxD,CAAC,CAAC;IACN,CAAC;IAED;;;;;;;;;OASG;IACW,kBAAQ,GAAtB,UAAwB,IAAY,EAAE,EAAU;QAC5C,MAAM,CAAC,UAAS,GAAQ,EAAE,IAAY;YAClC,MAAM,CAAC,MAAM,CAAE,GAAG,EAAE,IAAI,CAAE,CAAC,MAAM,CAAE,EAAE,CAAE,CAAC;QAC5C,CAAC,CAAC;IACN,CAAC;IAED;;;;;;OAMG;IACW,iBAAO,GAArB,UAAuB,SAAuB;QAAvB,0BAAA,EAAA,eAAuB;QAC1C,MAAM,CAAC,UAAS,GAAQ,EAAE,IAAY;YAClC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAE,SAAS,CAAE,CAAC;QAC7C,CAAC,CAAC;IACN,CAAC;IAED;;;;;;;OAOG;IACW,iBAAO,GAArB,UAAuB,SAAuB;QAAvB,0BAAA,EAAA,eAAuB;QAC1C,MAAM,CAAC,UAAS,GAAQ,EAAE,IAAY;YAClC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAE,SAAS,CAAE,CAAC;QACjC,CAAC,CAAC;IACN,CAAC;IAED;;;;;;;;;;OAUG;IACW,iBAAO,GAArB,UAAuB,UAAe;QAClC,MAAM,CAAC,UAAS,GAAQ,EAAE,IAAY;YAClC,MAAM,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;gBACf,UAAU,CAAC,CAAC;gBACZ,GAAG,CAAC;QACZ,CAAC,CAAC;IACN,CAAC;IAED;;;;;;;;;OASG;IACW,yBAAe,GAA7B,UAA+B,IAAkB;QAAlB,qBAAA,EAAA,UAAkB;QAC7C,MAAM,CAAC,UAAS,GAAQ,EAAE,IAAY;YAClC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAE,IAAI,EAAE,GAAG,CAAE,CAAC;QACpC,CAAC,CAAC;IACN,CAAC;IAED;;;;;;;OAOG;IACW,uBAAa,GAA3B,UAA6B,IAAkB;QAAlB,qBAAA,EAAA,UAAkB;QAC3C,MAAM,CAAC,UAAS,GAAQ,EAAE,IAAY;YAClC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAE,GAAG,EAAE,IAAI,CAAE,CAAC;QACpC,CAAC,CAAC;IACN,CAAC;IACL,gBAAC;AAAD,CA5HA,AA4HC,IAAA","file":"formatters.js","sourcesContent":["import * as moment from 'moment';\n\nexport type IFormatter = (val: any, data: object) => any;\n\n/**\n * Formatter methods which can be used with {@link Field.getFormatter} and\n * {@link Field.setFormatter}.\n *\n * The methods in this class return a function for use with the formatter\n * methods. Each method may define its own parameters that configure how\n * the formatter operates. For example the date / time formatters take\n * information on the formatting to be used.\n *\n * @export\n */\nexport default class Formatter {\n    /**\n     * Convert from SQL date / date time format (ISO8601) to a format given\n     * by the options parameter. Typically used with a get formatter.\n     *\n     * Uses MomentJS - formats are defined by Moment.\n     *\n     * @static\n     * @param {string} format Format to convert to.\n     * @returns {IFormatter} Configured formatter function\n     */\n    public static sqlDateToFormat( format: string ): IFormatter {\n        return function(val: any, data: object ) {\n            return moment( val, 'YYYY-MM-DD' ).format( format );\n        };\n    }\n\n    /**\n     * Convert to SQL date / date time format (ISO8601) from a format given\n     * by the options parameter. Typically used with a set formatter.\n     *\n     * Uses MomentJS - formats are defined by Moment.\n     *\n     * @static\n     * @param {string} format Format to convert from.\n     * @returns {IFormatter} Configured formatter function\n     */\n    public static formatToSqlDate( format: string ): IFormatter {\n        return function(val: any, data: object ) {\n            return moment( val, format ).format( 'YYYY-MM-DD' );\n        };\n    }\n\n    /**\n     * Convert from one date time format to another.\n     *\n     * Uses MomentJS - formats are defined by Moment.\n     *\n     * @static\n     * @param {string} from From format\n     * @param {string} to To format.\n     * @returns {IFormatter} Configured formatter function\n     */\n    public static dateTime( from: string, to: string ): IFormatter {\n        return function(val: any, data: object ) {\n            return moment( val, from ).format( to );\n        };\n    }\n\n    /**\n     * Convert a string of values into an array for use with checkboxes.\n     *\n     * @static\n     * @param {string} [delimiter='|'] Delimiter string (i.e. what to split on)\n     * @returns {IFormatter} Configured formatter function\n     */\n    public static explode( delimiter: string = '|' ): IFormatter {\n        return function(val: any, data: object ) {\n            return val.toString().split( delimiter );\n        };\n    }\n\n    /**\n     * Convert an array of values from a checkbox into a string which can be\n     * used to store in a text field in a database.\n     *\n     * @static\n     * @param {string} [delimiter='|'] Delimiter string (i.e. what to join on)\n     * @returns {IFormatter} Configured formatter function\n     */\n    public static implode( delimiter: string = '|' ): IFormatter {\n        return function(val: any, data: object ) {\n            return val.join( delimiter );\n        };\n    }\n\n    /**\n     * Convert an empty string to `null`. Null values are very useful in\n     * databases, but HTTP variables have no way of representing `null` as a\n     * value, often leading to an empty string and null overlapping. This method\n     * will check the value to operate on and return null if it is empty.\n     *\n     * @static\n     * @param {*} emptyValue Value to use if an empty value is submitted. `null`\n     *   is the typical value.\n     * @returns {IFormatter} Configured formatter function\n     */\n    public static ifEmpty( emptyValue: any ): IFormatter {\n        return function(val: any, data: object ) {\n            return val === '' ?\n                emptyValue :\n                val;\n        };\n    }\n\n    /**\n     * Convert a number from using any character other than a period (dot) to\n     * one which does use a period. This is useful for allowing numeric user\n     * input in regions where a comma is used as the decimal character. Use with\n     * a set formatter.\n     *\n     * @static\n     * @param {string} [char=','] Decimal place character\n     * @returns {IFormatter} Configured formatter function\n     */\n    public static fromDecimalChar( char: string = ',' ): IFormatter {\n        return function(val: any, data: object ) {\n            return val.replace( char, '.' );\n        };\n    }\n\n    /**\n     * Convert a number with a period (dot) as the decimal character to use\n     * a different character (typically a comma). Use with a get formatter.\n     *\n     * @static\n     * @param {string} [char=','] Decimal place character\n     * @returns {IFormatter} Configured formatter function\n     */\n    public static toDecimalChar( char: string = ',' ): IFormatter {\n        return function(val: any, data: object ) {\n            return val.replace( '.', char );\n        };\n    }\n}\n"]}