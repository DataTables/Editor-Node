{"version":3,"sources":["formatters.ts"],"names":[],"mappings":";;AAAA,+BAAiC;AAIjC;;;;;;;;;;GAUG;AACH;IAAA;IAwIA,CAAC;IAvIA;;;;;;;;;OASG;IACW,yBAAe,GAA7B,UAA+B,MAAc;QAC5C,OAAO,UAAS,GAAQ,EAAE,IAAY;YACrC,IAAK,GAAG,KAAK,IAAI,EAAG;gBACnB,OAAO,IAAI,CAAC;aACZ;YAED,OAAO,MAAM,CAAE,GAAG,EAAE,YAAY,CAAE,CAAC,MAAM,CAAE,MAAM,CAAE,CAAC;QACrD,CAAC,CAAC;IACH,CAAC;IAED;;;;;;;;;OASG;IACW,yBAAe,GAA7B,UAA+B,MAAc;QAC5C,OAAO,UAAS,GAAQ,EAAE,IAAY;YACrC,IAAK,GAAG,KAAK,IAAI,EAAG;gBACnB,OAAO,IAAI,CAAC;aACZ;YAED,OAAO,MAAM,CAAE,GAAG,EAAE,MAAM,CAAE,CAAC,MAAM,CAAE,YAAY,CAAE,CAAC;QACrD,CAAC,CAAC;IACH,CAAC;IAED;;;;;;;;;OASG;IACW,kBAAQ,GAAtB,UAAwB,IAAY,EAAE,EAAU;QAC/C,OAAO,UAAS,GAAQ,EAAE,IAAY;YACrC,IAAK,GAAG,KAAK,IAAI,EAAG;gBACnB,OAAO,IAAI,CAAC;aACZ;YAED,OAAO,MAAM,CAAE,GAAG,EAAE,IAAI,CAAE,CAAC,MAAM,CAAE,EAAE,CAAE,CAAC;QACzC,CAAC,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACW,iBAAO,GAArB,UAAuB,SAAuB;QAAvB,0BAAA,EAAA,eAAuB;QAC7C,OAAO,UAAS,GAAQ,EAAE,IAAY;YACrC,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAE,SAAS,CAAE,CAAC;QAC1C,CAAC,CAAC;IACH,CAAC;IAED;;;;;;;OAOG;IACW,iBAAO,GAArB,UAAuB,SAAuB;QAAvB,0BAAA,EAAA,eAAuB;QAC7C,OAAO,UAAS,GAAQ,EAAE,IAAY;YACrC,OAAO,GAAG,CAAC,IAAI,CAAE,SAAS,CAAE,CAAC;QAC9B,CAAC,CAAC;IACH,CAAC;IAED;;;;;;;;;;OAUG;IACW,iBAAO,GAArB,UAAuB,UAAe;QACrC,OAAO,UAAS,GAAQ,EAAE,IAAY;YACrC,OAAO,GAAG,KAAK,EAAE,CAAC,CAAC;gBAClB,UAAU,CAAC,CAAC;gBACZ,GAAG,CAAC;QACN,CAAC,CAAC;IACH,CAAC;IAED;;;;;;;;;OASG;IACW,yBAAe,GAA7B,UAA+B,IAAkB;QAAlB,qBAAA,EAAA,UAAkB;QAChD,OAAO,UAAS,GAAQ,EAAE,IAAY;YACrC,OAAO,GAAG,CAAC,OAAO,CAAE,IAAI,EAAE,GAAG,CAAE,CAAC;QACjC,CAAC,CAAC;IACH,CAAC;IAED;;;;;;;OAOG;IACW,uBAAa,GAA3B,UAA6B,IAAkB;QAAlB,qBAAA,EAAA,UAAkB;QAC9C,OAAO,UAAS,GAAQ,EAAE,IAAY;YACrC,OAAO,GAAG,CAAC,OAAO,CAAE,GAAG,EAAE,IAAI,CAAE,CAAC;QACjC,CAAC,CAAC;IACH,CAAC;IACF,gBAAC;AAAD,CAxIA,AAwIC,IAAA","file":"formatters.js","sourcesContent":["import * as moment from 'moment';\n\nexport type IFormatter = (val: any, data: object) => any;\n\n/**\n * Formatter methods which can be used with {@link Field.getFormatter} and\n * {@link Field.setFormatter}.\n *\n * The methods in this class return a function for use with the formatter\n * methods. Each method may define its own parameters that configure how\n * the formatter operates. For example the date / time formatters take\n * information on the formatting to be used.\n *\n * @export\n */\nexport default class Formatter {\n\t/**\n\t * Convert from SQL date / date time format (ISO8601) to a format given\n\t * by the options parameter. Typically used with a get formatter.\n\t *\n\t * Uses MomentJS - formats are defined by Moment.\n\t *\n\t * @static\n\t * @param {string} format Format to convert to.\n\t * @returns {IFormatter} Configured formatter function\n\t */\n\tpublic static sqlDateToFormat( format: string ): IFormatter {\n\t\treturn function(val: any, data: object ) {\n\t\t\tif ( val === null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn moment( val, 'YYYY-MM-DD' ).format( format );\n\t\t};\n\t}\n\n\t/**\n\t * Convert to SQL date / date time format (ISO8601) from a format given\n\t * by the options parameter. Typically used with a set formatter.\n\t *\n\t * Uses MomentJS - formats are defined by Moment.\n\t *\n\t * @static\n\t * @param {string} format Format to convert from.\n\t * @returns {IFormatter} Configured formatter function\n\t */\n\tpublic static formatToSqlDate( format: string ): IFormatter {\n\t\treturn function(val: any, data: object ) {\n\t\t\tif ( val === null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn moment( val, format ).format( 'YYYY-MM-DD' );\n\t\t};\n\t}\n\n\t/**\n\t * Convert from one date time format to another.\n\t *\n\t * Uses MomentJS - formats are defined by Moment.\n\t *\n\t * @static\n\t * @param {string} from From format\n\t * @param {string} to To format.\n\t * @returns {IFormatter} Configured formatter function\n\t */\n\tpublic static dateTime( from: string, to: string ): IFormatter {\n\t\treturn function(val: any, data: object ) {\n\t\t\tif ( val === null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn moment( val, from ).format( to );\n\t\t};\n\t}\n\n\t/**\n\t * Convert a string of values into an array for use with checkboxes.\n\t *\n\t * @static\n\t * @param {string} [delimiter='|'] Delimiter string (i.e. what to split on)\n\t * @returns {IFormatter} Configured formatter function\n\t */\n\tpublic static explode( delimiter: string = '|' ): IFormatter {\n\t\treturn function(val: any, data: object ) {\n\t\t\treturn val.toString().split( delimiter );\n\t\t};\n\t}\n\n\t/**\n\t * Convert an array of values from a checkbox into a string which can be\n\t * used to store in a text field in a database.\n\t *\n\t * @static\n\t * @param {string} [delimiter='|'] Delimiter string (i.e. what to join on)\n\t * @returns {IFormatter} Configured formatter function\n\t */\n\tpublic static implode( delimiter: string = '|' ): IFormatter {\n\t\treturn function(val: any, data: object ) {\n\t\t\treturn val.join( delimiter );\n\t\t};\n\t}\n\n\t/**\n\t * Convert an empty string to `null`. Null values are very useful in\n\t * databases, but HTTP variables have no way of representing `null` as a\n\t * value, often leading to an empty string and null overlapping. This method\n\t * will check the value to operate on and return null if it is empty.\n\t *\n\t * @static\n\t * @param {*} emptyValue Value to use if an empty value is submitted. `null`\n\t *   is the typical value.\n\t * @returns {IFormatter} Configured formatter function\n\t */\n\tpublic static ifEmpty( emptyValue: any ): IFormatter {\n\t\treturn function(val: any, data: object ) {\n\t\t\treturn val === '' ?\n\t\t\t\temptyValue :\n\t\t\t\tval;\n\t\t};\n\t}\n\n\t/**\n\t * Convert a number from using any character other than a period (dot) to\n\t * one which does use a period. This is useful for allowing numeric user\n\t * input in regions where a comma is used as the decimal character. Use with\n\t * a set formatter.\n\t *\n\t * @static\n\t * @param {string} [char=','] Decimal place character\n\t * @returns {IFormatter} Configured formatter function\n\t */\n\tpublic static fromDecimalChar( char: string = ',' ): IFormatter {\n\t\treturn function(val: any, data: object ) {\n\t\t\treturn val.replace( char, '.' );\n\t\t};\n\t}\n\n\t/**\n\t * Convert a number with a period (dot) as the decimal character to use\n\t * a different character (typically a comma). Use with a get formatter.\n\t *\n\t * @static\n\t * @param {string} [char=','] Decimal place character\n\t * @returns {IFormatter} Configured formatter function\n\t */\n\tpublic static toDecimalChar( char: string = ',' ): IFormatter {\n\t\treturn function(val: any, data: object ) {\n\t\t\treturn val.replace( '.', char );\n\t\t};\n\t}\n}\n"]}