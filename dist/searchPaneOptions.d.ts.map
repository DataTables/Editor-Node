{"version":3,"sources":["searchPaneOptions.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,IAAI,EAAC,MAAM,MAAM,CAAC;AAE1B,OAAO,KAAK,MAAM,SAAS,CAAC;AAC5B,OAAO,MAAmB,MAAM,UAAU,CAAC;AAO3C,MAAM,WAAW,OAAO;IACvB,KAAK,EAAE,MAAM,CAAC;IACd,KAAK,EAAE,MAAM,GAAG,MAAM,CAAC;CACvB;AACD,MAAM,MAAM,SAAS,GAAG,CAAC,GAAG,EAAE,MAAM,KAAK,MAAM,CAAC;AAChD,MAAM,MAAM,aAAa,GAAG,CAAC,EAAE,EAAE,IAAI,KAAK,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;AAE7D;;;;;;;;;;;GAWG;AACH,MAAM,CAAC,OAAO,OAAO,iBAAiB;IACrC,OAAO,CAAC,MAAM,CAAS;IACvB,OAAO,CAAC,MAAM,CAAS;IACvB,OAAO,CAAC,MAAM,CAAW;IACzB,OAAO,CAAC,SAAS,CAAmB;IACpC,OAAO,CAAC,SAAS,CAAY;IAC7B,OAAO,CAAC,MAAM,CAAM;IACpB,OAAO,CAAC,MAAM,CAAS;IAMvB;;;;OAIG;IACI,KAAK,IAAI,MAAM,EAAE;IACxB;;;;;OAKG;IACI,KAAK,CAAC,KAAK,EAAE,MAAM,EAAE,GAAG,iBAAiB;IAahD;;;;OAIG;IACI,KAAK,IAAI,MAAM;IACtB;;;;;;;OAOG;IACI,KAAK,CAAC,KAAK,EAAE,MAAM,GAAG,iBAAiB;IAU9C;;;;OAIG;IACI,MAAM,IAAI,SAAS;IAC1B;;;;;;;OAOG;IACI,MAAM,CAAC,EAAE,EAAE,SAAS,GAAG,iBAAiB;IAU/C;;;;OAIG;IACI,KAAK,IAAI,MAAM;IACtB;;;;;OAKG;IACI,KAAK,CAAC,KAAK,EAAE,MAAM,GAAG,iBAAiB;IAU9C;;;;OAIG;IACI,KAAK,IAAI,MAAM;IACtB;;;;;;OAMG;IACI,KAAK,CAAC,KAAK,EAAE,MAAM,GAAG,iBAAiB;IAU9C;;;;OAIG;IACI,KAAK,IAAI,GAAG;IACnB;;;;;;OAMG;IACI,KAAK,CAAC,KAAK,EAAE,GAAG,GAAG,iBAAiB;IAU3C;;;;;;;;OAQG;IACI,QAAQ,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,IAAI;IA0BjG;;;;;;;OAOG;IACU,IAAI,CAChB,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,GACrE,OAAO,CAAC,OAAO,EAAE,CAAC;CAqNrB","file":"searchPaneOptions.d.ts","sourcesContent":["import * as knex from 'knex';\nimport {Knex} from 'knex';\n\nimport Field from './field';\nimport Editor, {ILeftJoin} from './editor';\nimport {leftJoin} from './helpers';\n\nfunction isNumeric(n) {\n\treturn !isNaN(parseFloat(n)) && isFinite(n);\n}\n\nexport interface IOption {\n\tlabel: string;\n\tvalue: string | number;\n}\nexport type IRenderer = (str: string) => string;\nexport type CustomOptions = (db: Knex) => Promise<IOption[]>;\n\n/**\n * The Options class provides a convenient method of specifying where Editor\n * should get the list of options for a `select`, `radio` or `checkbox` field.\n * This is normally from a table that is _left joined_ to the main table being\n * edited, and a list of the values available from the joined table is shown to\n * the end user to let them select from.\n *\n * `Options` instances are used with the {@link Field.options} method.\n *\n * @export\n * @class Options\n */\nexport default class SearchPaneOptions {\n\tprivate _table: string;\n\tprivate _value: string;\n\tprivate _label: string[];\n\tprivate _leftJoin: ILeftJoin[] = [];\n\tprivate _renderer: IRenderer;\n\tprivate _where: any;\n\tprivate _order: string;\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Public methods\n\t */\n\n\t/**\n\t * Get the column(s) to be used for the label\n\t *\n\t * @returns {string[]} Label columns\n\t */\n\tpublic label(): string[];\n\t/**\n\t * Set the column(s) to be used for the label\n\t *\n\t * @param {string[]} label Database column names\n\t * @returns {Options} Self for chaining\n\t */\n\tpublic label(label: string[]): SearchPaneOptions;\n\tpublic label(label?: string[]): any {\n\t\tif (label === undefined) {\n\t\t\treturn this._label;\n\t\t}\n\n\t\tthis._label = Array.isArray(label) ?\n\t\t\tlabel :\n\t\t\t[label];\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the ORDER BY clause for the SQL.\n\t *\n\t * @returns {string} ORDER BY clause\n\t */\n\tpublic order(): string;\n\t/**\n\t * Set the ORDER BY clause to use in the SQL. If this option is not\n\t * provided the ordering will be based on the rendered output, either\n\t * numerically or alphabetically based on the data returned by the renderer.\n\t *\n\t * @param {string} order ORDER BY statement\n\t * @returns {Options} Self for chaining\n\t */\n\tpublic order(order: string): SearchPaneOptions;\n\tpublic order(order?: string): any {\n\t\tif (order === undefined) {\n\t\t\treturn this._order;\n\t\t}\n\n\t\tthis._order = order;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the configured label renderer\n\t *\n\t * @returns {IRenderer} Self for chaining\n\t */\n\tpublic render(): IRenderer;\n\t/**\n\t * Set the label renderer. The renderer can be used to combine\n\t * multiple database columns into a single string that is shown as the label\n\t * to the end user in the list of options.\n\t *\n\t * @param {IRenderer} fn Renderering function\n\t * @returns {Options} Self for chaining\n\t */\n\tpublic render(fn: IRenderer): SearchPaneOptions;\n\tpublic render(fn?: IRenderer): any {\n\t\tif (fn === undefined) {\n\t\t\treturn this._renderer;\n\t\t}\n\n\t\tthis._renderer = fn;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the table that the options will be gathered from.\n\t *\n\t * @returns {string} Table name\n\t */\n\tpublic table(): string;\n\t/**\n\t * Set the database table from which to gather the options for the list.\n\t *\n\t * @param {string} table Table name\n\t * @returns {Options} Self for chaining\n\t */\n\tpublic table(table: string): SearchPaneOptions;\n\tpublic table(table?: string): any {\n\t\tif (table === undefined) {\n\t\t\treturn this._table;\n\t\t}\n\n\t\tthis._table = table;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the column name to use for the value in the options list.\n\t *\n\t * @returns {string} Column name\n\t */\n\tpublic value(): string;\n\t/**\n\t * Set the column name to use for the value in the options list. This would\n\t * normally be the primary key for the table.\n\t *\n\t * @param {string} value Column name\n\t * @returns {Options} Self for chaining\n\t */\n\tpublic value(value: string): SearchPaneOptions;\n\tpublic value(value?: string): any {\n\t\tif (value === undefined) {\n\t\t\treturn this._value;\n\t\t}\n\n\t\tthis._value = value;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the WHERE condition for this option set.\n\t *\n\t * @returns {*} Knex WHERE condition\n\t */\n\tpublic where(): any;\n\t/**\n\t * Set the method to use for a WHERE condition if one is to be applied to\n\t * the query to get the options.\n\t *\n\t * @param {*} where Knex WHERE condition\n\t * @returns {Options} Self for chaining\n\t */\n\tpublic where(where: any): SearchPaneOptions;\n\tpublic where(where?: any): any {\n\t\tif (where === undefined) {\n\t\t\treturn this._where;\n\t\t}\n\n\t\tthis._where = where;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the method to use for a leftJoin condition if one is to be applied\n\t * to the query to retrieve data from two tables\n\t *\n\t * @param table the table for the join\n\t * @param field1 the first field\n\t * @param operator operator for the join\n\t * @param field2 the second field\n\t */\n\tpublic leftJoin(table: string, field1: string | Function, operator: string, field2: string): this {\n\t\tif (typeof field1 === 'function') {\n\t\t\tthis._leftJoin.push({\n\t\t\t\tfield1: '',\n\t\t\t\tfield2: '',\n\t\t\t\tfn: field1,\n\t\t\t\toperator: '',\n\t\t\t\ttable,\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis._leftJoin.push({\n\t\t\t\tfield1,\n\t\t\t\tfield2,\n\t\t\t\toperator,\n\t\t\t\ttable,\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Internal methods\n\t */\n\n\t/**\n\t * Execution function for getting the SearchPane options\n\t * @param field The field to retrieve data from\n\t * @param editor The editor instance\n\t * @param http The http sent to the server\n\t * @param fieldsIn All of the fields\n\t * @param leftJoinIn Info for a leftJoin if required\n\t */\n\tpublic async exec(\n\t\tfield: Field, editor: Editor, http: any, fieldsIn: any, leftJoinIn: any\n\t): Promise<IOption[]> {\n\t\tlet fields = fieldsIn;\n\t\tlet db = editor.db();\n\t\tlet viewCount = http.searchPanes_options\n\t\t\t? http.searchPanes_options.viewCount === 'true'\n\t\t\t: true;\n\t\tlet viewTotal = http.searchPanes_options\n\t\t\t? http.searchPanes_options.viewTotal === 'true'\n\t\t\t: false;\n\t\tlet cascade = http.searchPanes_options\n\t\t\t? http.searchPanes_options.cascade === 'true'\n\t\t\t: false;\n\t\tlet entries = null;\n\n\t\t// If the value is not yet set then set the variable to be the field name\n\t\tlet value = this._value\n\t\t\t? this._value\n\t\t\t: field.dbField();\n\n\t\t// If the table is not yet set then set the table variable to be the same as editor\n\t\t// This is not taking a value from the SearchPaneOptions instance as the table should be defined in value/label. This throws up errors if not.\n\t\tlet table = editor.table()[0];\n\t\tlet readTable = editor.readTable();\n\n\t\tif (this._table) {\n\t\t\ttable = this._table;\n\t\t}\n\t\telse if(readTable.length) {\n\t\t\ttable = readTable[0];\n\t\t}\n\n\t\t// If the label value has not yet been set then just set it to be the same as value\n\t\tlet label = this._label\n\t\t\t? this._label\n\t\t\t: value;\n\n\t\tlet formatter = this._renderer\n\t\t\t? this._renderer\n\t\t\t: d => d;\n\n\t\t// Use Editor's left joins and merge in any additional from this instance\n\t\tlet join = this._leftJoin.slice();\n\n\t\tif (leftJoinIn) {\n\t\t\tfor (let i=0 ; i<leftJoinIn.length ; i++) {\n\t\t\t\tlet found = false;\n\n\t\t\t\tfor (let j=0 ; j<join.length ; j++) {\n\t\t\t\t\tif (join[j].table === leftJoinIn[i].table) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (! found) {\n\t\t\t\t\tjoin.push(leftJoinIn[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get the data for the pane options\n\t\tlet q = db\n\t\t\t.distinct()\n\t\t\t.select(label + ' as label', value + ' as value')\n\t\t\t.from(table)\n\t\t\t.groupBy(value);\n\n\t\tif (this._where) {\n\t\t\tq.where(this._where);\n\t\t}\n\n\t\t// If not cascading, then the total and count must be the same\n\t\tif (viewTotal) {\n\t\t\tq.count({total: '*'});\n\t\t}\n\n\t\tleftJoin(q, join);\n\n\t\tif (this._order) {\n\t\t\t// For cases where we are ordering by a field which isn't included in the list\n\t\t\t// of fields to display, we need to add the ordering field, due to the\n\t\t\t// select distinct.\n\t\t\tthis._order.split(',').forEach((val) => {\n\t\t\t\tlet fie = val.toLocaleLowerCase()\n\t\t\t\t\t.replace(' asc', '')\n\t\t\t\t\t.replace('desc', '')\n\t\t\t\t\t.trim();\n\n\t\t\t\tif (! fields.includes(fie)) {\n\t\t\t\t\tq.select(fie);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tq.orderBy(this._order);\n\t\t}\n\n\t\tlet rows = await q;\n\n\t\t// Remove any filtering entries that don't exist in the database (values might have changed)\n\t\tif (http.searchPanes && http.searchPanes[field.name()]) {\n\t\t\tlet values = rows.map(r => r.value);\n\t\t\tlet selected = http.searchPanes[field.name()];\n\n\t\t\tfor (let i=selected.length-1 ; i>=0 ; i--) {\n\t\t\t\tif (! values.includes(selected[i])) {\n\t\t\t\t\thttp.searchPanes[field.name()].splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Apply filters to cascade tables\n\t\tif (viewCount || cascade) {\n\t\t\tlet query = db.table(table);\n\n\t\t\tleftJoin(query, join);\n\n\t\t\tif (field.apply('get') && ! field.getValue()) {\n\t\t\t\tquery\n\t\t\t\t\t.distinct()\n\t\t\t\t\t.select(value + ' as value')\n\t\t\t\t\t.groupBy(value);\n\n\t\t\t\t// We viewTotal is enabled, we need to do a count to get the number of records,\n\t\t\t\t// If it isn't we still need to know it exists, but don't care about the cardinality\n\t\t\t\tif (viewCount) {\n\t\t\t\t\tquery.count({count: '*'});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tquery.select('(1) as count');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Construct the where queries based upon the options selected by the user\n\t\t\tfor (let fie of fields) {\n\t\t\t\tlet add = false;\n\t\t\t\tlet fieName = fie.name();\n\n\t\t\t\t// If there is a last value set then a slightly different set of results is required for cascade\n\t\t\t\t// That panes results are based off of the results when only considering the selections of all of the others\n\t\t\t\tif (http.searchPanesLast && field.name() === http.searchPanesLast) {\n\t\t\t\t\tif (http.searchPanes[fieName] !== undefined && fieName !== http.searchPanesLast) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (http.searchPanes && http.searchPanes[fieName] !== undefined) {\n\t\t\t\t\tadd = true;\n\t\t\t\t}\n\n\t\t\t\tif (add) {\n\t\t\t\t\tquery.where(function() {\n\t\t\t\t\t\tfor (let i = 0; i < http.searchPanes[fieName].length; i++) {\n\t\t\t\t\t\t\tif(http.searchPanes_null !== undefined && http.searchPanes_null[fieName][i]) {\n\t\t\t\t\t\t\t\tthis.orWhereNull(fieName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthis.orWhere(fieName, http.searchPanes[fieName][i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet entriesRows = await query;\n\n\t\t\t// Key by value for fast lookup\n\t\t\tentries = {};\n\t\t\tentriesRows.forEach(r => {\n\t\t\t\tentries[r.value] = r;\n\t\t\t});\n\t\t}\n\n\t\tlet out = [];\n\t\t\n\t\tfor (let i=0 ; i<rows.length ; i++) {\n\t\t\tlet row = rows[i];\n\t\t\tlet value = row.value;\n\t\t\tlet total = row.total !== undefined ? row.total : null;\n\t\t\tlet count = total;\n\n\t\t\tif (entries) {\n\t\t\t\tcount = entries[value] && entries[value].count\n\t\t\t\t\t? entries[value].count\n\t\t\t\t\t: 0;\n\n\t\t\t\t// For when viewCount is enabled and viewTotal is not\n\t\t\t\t// the total needs to be the same as the count!\n\t\t\t\tif (total === null) {\n\t\t\t\t\ttotal = count;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tout.push({\n\t\t\t\tlabel: formatter(row.label),\n\t\t\t\ttotal: total,\n\t\t\t\tvalue: value,\n\t\t\t\tcount: count\n\t\t\t});\n\t\t}\n\n\t\t// Only sort if there was no SQL order field\n\t\tif (! this._order) {\n\t\t\tout.sort(function(a, b) {\n\t\t\t\tif (isNumeric(a) && isNumeric(b)) {\n\t\t\t\t\treturn (a.label * 1) - (b.label * 1);\n\t\t\t\t}\n\t\t\t\treturn a.label < b.label ?\n\t\t\t\t\t-1 : a.label > b.label ?\n\t\t\t\t\t\t1 :\n\t\t\t\t\t\t0;\n\t\t\t});\n\t\t}\n\n\t\treturn out;\n\t}\n}\n"]}