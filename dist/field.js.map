{"version":3,"sources":["field.ts"],"names":[],"mappings":"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","file":"field.js","sourcesContent":["import * as knex from 'knex';\n\nimport Editor, {IDtRequest} from './editor';\nimport {IFormatter} from './formatters';\nimport NestedData from './nestedData';\nimport Options, {CustomOptions, IOption} from './options';\nimport SearchPaneOptions from './searchPaneOptions';\nimport Upload from './upload';\nimport Validator, {IValidator} from './validators';\nimport xss, {Ixss} from './xss';\n\n/**\n * Set types\n * @export\n */\nexport enum SetType {\n\t/** Do not set data */\n\tNone,\n\n\t/** Write to database on both create and edit */\n\tBoth,\n\n\t/** Write to the database only on create */\n\tCreate,\n\n\t/** Write to the database only on edit */\n\tEdit\n}\n\n/**\n * Field definitions for the DataTables Editor.\n *\n * Each Database column that is used with Editor can be described with this\n * Field method (both for Editor and Join instances). It basically tells\n * Editor what table column to use, how to format the data and if you want\n * to read and/or write this column.\n *\n * Field instances are used with the {@link Editor.field} and\n * {@link Mjoin.field} methods to describe what fields should be interacted\n * with by the editable table.\n *\n * @export\n * @class Field\n * @extends {NestedData}\n */\nexport default class Field extends NestedData {\n\tpublic static SetType = SetType;\n\n\tprivate _dbField: string;\n\tprivate _get: boolean = true;\n\tprivate _getFormatter: IFormatter;\n\tprivate _getValue: any;\n\tprivate _http: boolean = true;\n\tprivate _opts: Options & CustomOptions;\n\tprivate _name: string;\n\tprivate _spopts: SearchPaneOptions;\n\tprivate _set: SetType = SetType.Both;\n\tprivate _setFormatter: IFormatter;\n\tprivate _setValue: any;\n\tprivate _validator: Array<{setFormatted: boolean; validator: IValidator}> = [];\n\tprivate _upload: Upload;\n\tprivate _xss: Ixss;\n\tprivate _xssFormat: boolean = true;\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Constructor\n\t */\n\n\t/**\n\t * Creates an instance of Field.\n\t *\n\t * @param {string} [dbField=null] Name of the database column\n\t * @param {string} [name=null] Name to use in the JSON output from Editor and the\n\t *   HTTP submit from the client-side when editing. If not given then the\n\t *   `dbField` name is used.\n\t */\n\tconstructor(dbField: string = null, name: string = null) {\n\t\tsuper();\n\n\t\tif (! name && dbField) {\n\t\t\t// Standard usage, a single parameter\n\t\t\tthis\n\t\t\t\t.name(dbField)\n\t\t\t\t.dbField(dbField);\n\t\t}\n\t\telse {\n\t\t\tthis\n\t\t\t\t.name(name)\n\t\t\t\t.dbField(dbField);\n\t\t}\n\t}\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Public methods\n\t */\n\n\t/**\n\t * Get the database column name\n\t *\n\t * @returns {string} Configured column name\n\t */\n\tpublic dbField(): string;\n\t/**\n\t * Set the database column name\n\t *\n\t * @param {string} dbField Column name to set\n\t * @returns {Field} Self for chaining\n\t */\n\tpublic dbField(dbField: string): Field;\n\tpublic dbField(dbField?: string): any {\n\t\tif (dbField === undefined) {\n\t\t\treturn this._dbField;\n\t\t}\n\n\t\tthis._dbField = dbField;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the `get` flag for the field (i.e. if the field should be\n\t * read from the database).\n\t *\n\t * @returns {boolean} True if gettable, false otherwise.\n\t */\n\tpublic get(): boolean;\n\t/**\n\t * Set the `get` flag.\n\t *\n\t * @param {boolean} flag `true` to mark as readable, false otherwise\n\t * @returns {Field} Self for chaining\n\t */\n\tpublic get(flag: boolean): Field;\n\tpublic get(flag?: boolean): any {\n\t\tif (flag === undefined) {\n\t\t\treturn this._get;\n\t\t}\n\n\t\tthis._get = flag;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get formatter for the field's data.\n\t *\n\t * @returns {IFormatter} Formatter\n\t */\n\tpublic getFormatter(): IFormatter;\n\t/**\n\t * Set the get formatter.\n\t *\n\t * When the data has been retrieved from the server, it can be passed through\n\t * a formatter here, which will manipulate (format) the data as required. This\n\t * can be useful when, for example, working with dates and a particular format\n\t * is required on the client-side.\n\t *\n\t * @param {IFormatter} formatter Formatter to use.\n\t * @returns {Field} Self for chaining.\n\t */\n\tpublic getFormatter(formatter: IFormatter): Field;\n\tpublic getFormatter(formatter?: IFormatter): any {\n\t\tif (formatter === undefined) {\n\t\t\treturn this._getFormatter;\n\t\t}\n\n\t\tthis._getFormatter = formatter;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the currently applied get value.\n\t *\n\t * @returns {*} Value - will be undefined by default.\n\t */\n\tpublic getValue(): any;\n\t/**\n\t * Set the get value for the field.\n\t *\n\t * If given, then this value is used to send to the client-side, regardless\n\t * of what value is held by the database.\n\t *\n\t * @param {*} val Value to set\n\t * @returns {Field} Self for chaining\n\t */\n\tpublic getValue(val: any): Field;\n\tpublic getValue(val?: any): any {\n\t\tif (val === undefined) {\n\t\t\treturn this._getValue;\n\t\t}\n\n\t\tthis._getValue = val;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Indicator to say if this field can be read over http (i.e. externally)\n\t */\n\tpublic http(): boolean;\n\t/**\n\t * Set indicator to say if the field can be read via http\n\t */\n\tpublic http(set: boolean): Field;\n\tpublic http(set?: boolean): any {\n\t\tif (set === undefined) {\n\t\t\treturn this._http;\n\t\t}\n\n\t\tthis._http = set;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the field's configured name.\n\t *\n\t * @returns {string} Current name.\n\t */\n\tpublic name(): string;\n\t/**\n\t * Set the field's name.\n\t *\n\t * The name is typically the same as the dbField name, since it makes things\n\t * less confusing(!), but it is possible to set a different name for the data\n\t * which is used in the JSON returned to DataTables in a 'get' operation and\n\t * the field name used in a 'set' operation.\n\t *\n\t * @param {string} name Name to set\n\t * @returns {Field} Self for chaining\n\t */\n\tpublic name(name: string): Field;\n\tpublic name(name?: string): any {\n\t\tif (name === undefined) {\n\t\t\treturn this._name;\n\t\t}\n\n\t\tthis._name = name;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the currently configured options for the field.\n\t *\n\t * @returns {(Options & CustomOptions)} Options configuration\n\t */\n\tpublic options(): Options & CustomOptions;\n\t/**\n\t * Set how a list of options (values and labels) will be retrieved for the field.\n\t *\n\t * Gets a list of values that can be used for the options list in radio,\n\t * select and checkbox inputs from the database for this field.\n\t *\n\t * Note that this is for simple 'label / value' pairs only. For more complex\n\t * data, including pairs that require joins and where conditions, use a\n\t * closure to provide a query\n\t *\n\t * @param {(Options & CustomOptions)} opts Options configuration\n\t * @returns {Field} Self for chaining\n\t */\n\tpublic options(opts: Options & CustomOptions): Field;\n\tpublic options(opts?: Options & CustomOptions): any {\n\t\tif (opts === undefined) {\n\t\t\treturn this._opts;\n\t\t}\n\n\t\tthis._opts = opts;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set how a list iof options (values and labels) will be retrieved for the fields searchpane.\n\t *\n\t * Gets a list of values that can be used for the options list in searchpanes.\n\t *\n\t * @param spopts: SearchPaneOptions\n\t * @return this\n\t */\n\tpublic searchPaneOptions(): SearchPaneOptions;\n\tpublic searchPaneOptions(spopts: SearchPaneOptions): Field;\n\tpublic searchPaneOptions(spopts?: SearchPaneOptions): any {\n\t\tif (spopts === undefined) {\n\t\t\treturn this._spopts;\n\t\t}\n\n\t\tthis._spopts = spopts;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the current `set` property for the field.\n\t *\n\t * @returns {SetType} Set configuration\n\t */\n\tpublic set(): SetType;\n\t/**\n\t * Set the field's `set` configuration.\n\t *\n\t * A field can be marked as read only using this option, to be set only\n\t * during an create or edit action or to be set during both actions. This\n\t * provides the ability to have fields that are only set when a new row is\n\t * created (for example a \"created\" time stamp).\n\t *\n\t * @param {(boolean|SetType)} flag Set flag.\n\t * @returns {Field} Self for chaining.\n\t */\n\tpublic set(flag: boolean | SetType): Field;\n\tpublic set(flag?: boolean): any {\n\t\tif (flag === undefined) {\n\t\t\treturn this._set;\n\t\t}\n\n\t\tif (flag === true) {\n\t\t\tthis._set = SetType.Both;\n\t\t}\n\t\telse if (flag === false) {\n\t\t\tthis._set = SetType.None;\n\t\t}\n\t\telse {\n\t\t\tthis._set = flag;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set formatter for the field's data.\n\t *\n\t * @returns {IFormatter} Formatter\n\t */\n\tpublic setFormatter(): IFormatter;\n\t/**\n\t * Set the set formatter.\n\t *\n\t * When the data has been retrieved from the server, it can be passed through\n\t * a formatter here, which will manipulate (format) the data as required. This\n\t * can be useful when, for example, working with dates and a particular format\n\t * is required on the client-side.\n\t *\n\t * Editor has a number of formatters available with the {@link Format} class\n\t * which can be used directly with this method.\n\t *\n\t * @param {IFormatter} formatter Formatter to use.\n\t * @returns {Field} Self for chaining.\n\t */\n\tpublic setFormatter(formatter: IFormatter): Field;\n\tpublic setFormatter(formatter?: IFormatter): any {\n\t\tif (formatter === undefined) {\n\t\t\treturn this._setFormatter;\n\t\t}\n\n\t\tthis._setFormatter = formatter;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the currently applied set value.\n\t *\n\t * @returns {*} Value - will be undefined by default.\n\t */\n\tpublic setValue(): any;\n\t/**\n\t * Set the set value for the field.\n\t *\n\t * If given, then this value is used to write to the database regardless\n\t *  of what data is sent from the client-side.\n\t *\n\t * @param {*} val Value to set\n\t * @returns {Field} Self for chaining\n\t */\n\tpublic setValue(val: any): Field;\n\tpublic setValue(val?: any): any {\n\t\tif (val === undefined) {\n\t\t\treturn this._setValue;\n\t\t}\n\n\t\tthis._setValue = val;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the {@link Upload} class for this field.\n\t *\n\t * @returns {Upload} Configured upload class\n\t */\n\tpublic upload(): Upload;\n\t/**\n\t * Set an {@link Upload} class for this field.\n\t *\n\t * @param {Upload} upload Upload class instance\n\t * @returns {Field} Self for chaining\n\t */\n\tpublic upload(upload: Upload): Field;\n\tpublic upload(upload?: Upload): any {\n\t\tif (upload === undefined) {\n\t\t\treturn this._upload;\n\t\t}\n\n\t\tthis._upload = upload;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the validators applied to this field.\n\t *\n\t * @returns {IValidator[]} Array of validators\n\t */\n\tpublic validator(): IValidator[];\n\t/**\n\t * Set the 'validator' of the field.\n\t *\n\t * The validator can be used to check if any abstract piece of data is valid\n\t * or not according to the given rules of the validation function used.\n\t *\n\t * Multiple validation options can be applied to a field instance by calling\n\t * this method multiple times. For example, it would be possible to have a\n\t * 'required' validation and a 'maxLength' validation with multiple calls.\n\t *\n\t * Editor has a number of validation available with the {@link Validate} class\n\t * which can be used directly with this method.\n\t *\n\t * @param {IValidator} validator Validator to add to the field\n\t * @returns {Field} Self for chaining\n\t */\n\tpublic validator(validator: IValidator, setFormatted?: boolean): Field;\n\tpublic validator(validator?: IValidator, setFormatted = false): any {\n\t\tif ( validator === undefined ) {\n\t\t\treturn this._validator.map((v) => v.validator);\n\t\t}\n\n\t\tthis._validator.push( {\n\t\t\tsetFormatted,\n\t\t\tvalidator\n\t\t} );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the current XSS formatter.\n\t *\n\t * @returns {Ixss} XSS formatter. Can be null or undefined.\n\t */\n\tpublic xss(): Ixss;\n\t/**\n\t * Set a formatting method that will be used for XSS checking / removal.\n\t * This should be a function that takes a single argument (the value to be\n\t * cleaned) and returns the cleaned value.\n\t *\n\t * Editor will use `xss-filters` by default for this operation, which is built\n\t * into the software and no additional configuration is required, but a\n\t * custom function can be used if you wish to use a different formatter.\n\t *\n\t * If you wish to disable this option (which you would only do if you are\n\t * absolutely confident that your validation will pick up on any XSS inputs)\n\t * simply provide a closure function that returns the value given to the\n\t * function. This is _not_ recommended.\n\t *\n\t * @param {(boolean|Ixss)} flag Enable / disable XSS protection, or set a\n\t *   formatter.\n\t * @returns {Field} Self for chaining.\n\t */\n\tpublic xss(flag: boolean | Ixss): Field;\n\tpublic xss(flag?: boolean | Ixss): any {\n\t\tif (flag === undefined) {\n\t\t\treturn this._xss;\n\t\t}\n\n\t\tif (flag === true) {\n\t\t\tthis._xss = xss;\n\t\t}\n\t\telse if (flag === false) {\n\t\t\tthis._xss = null;\n\t\t}\n\t\telse {\n\t\t\tthis._xss = flag;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Internal methods\n\t * Used by the Editor class and not generally for public use\n\t */\n\n\t/**\n\t * @hidden\n\t */\n\tpublic apply(action: 'get' | 'create' | 'edit', data?: object): boolean {\n\t\tif (action === 'get') {\n\t\t\treturn this._get;\n\t\t}\n\n\t\tif (action === 'create' && (this._set === SetType.None || this._set === SetType.Edit)) {\n\t\t\treturn false;\n\t\t}\n\t\telse if (action === 'edit' && (this._set === SetType.None || this._set === SetType.Create)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check it was in the submitted data\n\t\tif (this._setValue === undefined && ! this._propExists(this.name(), data)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// In the data set, so use it\n\t\treturn true;\n\t}\n\n\t/**\n\t * @hidden\n\t */\n\tpublic async optionsExec(db: knex): Promise<false | IOption[]> {\n\t\tif (this._opts instanceof Options) {\n\t\t\treturn this._opts.exec(db);\n\t\t}\n\t\telse if (this._opts) {\n\t\t\treturn (this._opts as any)(db);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @hidden\n\t */\n\tpublic async searchPaneOptionsExec(\n\t\tfield: Field, editor: Editor, http, fields: Field[], leftJoin, db: knex\n\t): Promise<false | IOption[]> {\n\t\tif (this._spopts instanceof SearchPaneOptions) {\n\t\t\tlet retVal = await this._spopts.exec(field, editor, http, fields, leftJoin);\n\t\t\treturn retVal;\n\t\t}\n\t\telse if (this._spopts) {\n\t\t\treturn (this._spopts as any)(db, editor);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @hidden\n\t */\n\tpublic val(direction: 'get' | 'set', data: object): any {\n\t\tlet val;\n\n\t\tif (direction === 'get') {\n\t\t\tif (this._getValue !== undefined) {\n\t\t\t\tval = typeof this._getValue === 'function' ?\n\t\t\t\t\tthis._getValue() :\n\t\t\t\t\tthis._getValue;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Getting data, so db field name\n\t\t\t\tval = data[ this._dbField ] !== undefined ?\n\t\t\t\t\tdata[ this._dbField ] :\n\t\t\t\t\tnull;\n\t\t\t}\n\n\t\t\treturn this._format(val, data, this._getFormatter);\n\t\t}\n\n\t\t// set - using from the payload, and thus use `name`\n\t\tif (this._setValue !== undefined) {\n\t\t\tval = typeof this._setValue === 'function' ?\n\t\t\t\tthis._setValue() :\n\t\t\t\tthis._setValue;\n\t\t}\n\t\telse {\n\t\t\tval = this._readProp(this._name, data);\n\t\t}\n\n\t\treturn this._format(val, data, this._setFormatter);\n\t}\n\n\t/**\n\t * @hidden\n\t */\n\tpublic async validate(data: object, editor: Editor, id: string = null, action: IDtRequest['action']): Promise<true | string> {\n\t\tif (this._validator.length === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet val = this._readProp(this.name(), data);\n\t\tlet host = new Validator.Host({\n\t\t\taction,\n\t\t\tdb: editor.db(),\n\t\t\teditor,\n\t\t\tfield: this,\n\t\t\tid\n\t\t});\n\n\t\tfor ( let i = 0, ien = this._validator.length ; i < ien ; i++ ) {\n\t\t\tlet validator = this._validator[i].validator;\n\t\t\tlet testVal = this._validator[i].setFormatted\n\t\t\t\t? this.val('set', data)\n\t\t\t\t: val;\n\n\t\t\tlet res = await validator( testVal, data, host );\n\n\t\t\tif (res !== true) {\n\t\t\t\treturn res;\n\t\t\t}\n\t\t}\n\n\t\t// Validation methods all run, must be value\n\t\treturn true;\n\t}\n\n\t/**\n\t * @hidden\n\t */\n\tpublic write(out: object, srcData: object): void {\n\t\tthis._writeProp(out, this.name(), this.val('get', srcData));\n\t}\n\n\t/**\n\t * @hidden\n\t */\n\tpublic xssSafety(val: any) {\n\t\tif (! this._xss) {\n\t\t\treturn val;\n\t\t}\n\n\t\tif (Array.isArray(val)) {\n\t\t\tlet out = [];\n\n\t\t\tfor (let i = 0, ien = val.length ; i < ien ; i++) {\n\t\t\t\tout.push(this._xss(val[i]));\n\t\t\t}\n\n\t\t\treturn out;\n\t\t}\n\n\t\treturn this._xss(val);\n\t}\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Private methods\n\t */\n\n\tprivate _format(val: any, data: object, formatter: IFormatter): any {\n\t\treturn formatter ?\n\t\t\tformatter(val, data) :\n\t\t\tval;\n\t}\n}\n"]}