{"version":3,"sources":["validators.ts"],"names":[],"mappings":"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","file":"validators.js","sourcesContent":["import * as knex from 'knex';\nimport * as moment from 'moment';\nimport * as validUrl from 'valid-url';\n\nimport Editor from './editor';\nimport Field from './field';\nimport {IMjoinValidator} from './mjoin';\nimport {default as JoinOptions} from './options';\nimport {IFile} from './upload';\nimport ValidationHost from './validationHost';\nimport ValidationOptions from './validationOptions';\n\n// Note that validators return a Promise to allow async validators, such as\n// checking a value is unique against the database\nexport type IValidator = (val: any, data: object, host: ValidationHost) => Promise<true|string>;\nexport type IFileValidator = (file: IFile) => Promise<true|string>;\n\n/**\n * Validation methods for DataTables Editor fields. All of the methods\n * defined in this class return a function that can be used by\n * {@link Field} instance's {@link Field.Validator} method.\n *\n * Each method may define its own parameters that configure how the\n * formatter operates. For example the `minLen` validator takes information\n * on the minimum length of value to accept.\n *\n * Additionally each method can optionally take a `ValidationOptions`\n * instance that controls common validation options and error messages.\n *\n * The validation functions return `true` for valid data and a string for\n * invalid data, with the string being the error message.\n *\n * @export\n * @class Validator\n */\nexport default class Validator {\n\tpublic static Options = ValidationOptions;\n\tpublic static Host = ValidationHost;\n\n\t/**\n\t * No validation - all inputs are valid\n\t *\n\t * @static\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static none( cfg: ValidationOptions | null = null ): IValidator {\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\treturn true;\n\t\t};\n\t}\n\n\t/**\n\t * Basic validation - this is used to perform the validation provided by the\n\t * validation options only. If the validation options pass (e.g. `required`,\n\t * `empty` and `optional`) then the validation will pass regardless of the\n\t * actual value.\n\t *\n\t * @static\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static basic( cfg: ValidationOptions | null = null ): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet common = Validator._common( val, opts );\n\n\t\t\treturn common === false ?\n\t\t\t\topts.message :\n\t\t\t\ttrue;\n\t\t};\n\t}\n\n\t/**\n\t * Required field - there must be a value and it must be a non-empty value\n\t *\n\t * @static\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static required( cfg: ValidationOptions | null = null ): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\t\topts.empty = false;\n\t\topts.optional = false;\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet common = Validator._common( val, opts );\n\n\t\t\treturn common === false ?\n\t\t\t\topts.message :\n\t\t\t\ttrue;\n\t\t};\n\t}\n\n\t/**\n\t * Optional field, but if given there must be a non-empty value\n\t *\n\t * @static\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static notEmpty( cfg: ValidationOptions | null = null ): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\t\topts.empty = false;\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet common = Validator._common( val, opts );\n\n\t\t\treturn common === false ?\n\t\t\t\topts.message :\n\t\t\t\ttrue;\n\t\t};\n\t}\n\n\t/**\n\t * Validate an input as a boolean value.\n\t *\n\t * @static\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static boolean( cfg: ValidationOptions | null = null ): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet common = Validator._common( val, opts );\n\t\t\tif ( common !== null ) {\n\t\t\t\treturn common === false ?\n\t\t\t\t\topts.message :\n\t\t\t\t\ttrue;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tval === true || val === 1 || val === '1' || val === 'true' || val === 't' ||\n\t\t\t\tval === 'on' || val === 'yes' || val === false || val === 0 || val === '0' ||\n\t\t\t\tval === 'false' || val === 'f' || val === 'off' || val === 'no'\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn opts.message;\n\t\t};\n\t}\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Number validation methods\n\t */\n\n\t/**\n\t * Check that any input is numeric.\n\t *\n\t * @static\n\t * @param {string} [decimal='.'] Character to use as the decimal place\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static numeric( decimal: string = '.', cfg: ValidationOptions | null = null ): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet common = Validator._common( val, opts );\n\t\t\tif ( common !== null ) {\n\t\t\t\treturn common === false ?\n\t\t\t\t\topts.message :\n\t\t\t\t\ttrue;\n\t\t\t}\n\n\t\t\tif (typeof val === 'number') {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif ( decimal !== '.' ) {\n\t\t\t\tval = val.toString().replace(decimal, '.');\n\t\t\t}\n\n\t\t\tval = val.trim();\n\t\t\tif (val === '') {\n\t\t\t\treturn opts.message;\n\t\t\t}\n\n\t\t\treturn isNaN(Number(val)) ?\n\t\t\t\topts.message :\n\t\t\t\ttrue;\n\t\t};\n\t}\n\n\t/**\n\t * Check for a numeric input and that it is greater than a given value.\n\t *\n\t * @static\n\t * @param {number} min Minimum value\n\t * @param {string} [decimal='.'] Character to use as the decimal place\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static minNum( min: number, decimal: string = '.', cfg: ValidationOptions | null = null ): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet numeric = await Validator.numeric( decimal, opts )( val, data, host );\n\t\t\tif ( numeric !== true ) {\n\t\t\t\treturn opts.message;\n\t\t\t}\n\n\t\t\t// val.toString() for '' is 0, which would mean it would always fail, even if empty values\n\t\t\t// are allowed.\n\t\t\tif (val === '' && opts.empty) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif ( decimal !== '.' ) {\n\t\t\t\tval = val.toString().replace(decimal, '.');\n\t\t\t}\n\n\t\t\treturn val < min ?\n\t\t\t\topts.message :\n\t\t\t\ttrue;\n\t\t};\n\t}\n\n\t/**\n\t * Check for a numeric input and that it is less than a given value.\n\t *\n\t * @static\n\t * @param {number} max Maximum value\n\t * @param {string} [decimal='.'] Character to use as the decimal place\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static maxNum( max: number, decimal: string = '.', cfg: ValidationOptions | null = null ): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet numeric = await Validator.numeric( decimal, opts )( val, data, host );\n\t\t\tif ( numeric !== true ) {\n\t\t\t\treturn opts.message;\n\t\t\t}\n\n\t\t\tif ( decimal !== '.' ) {\n\t\t\t\tval = val.toString().replace(decimal, '.');\n\t\t\t}\n\n\t\t\treturn val > max ?\n\t\t\t\topts.message :\n\t\t\t\ttrue;\n\t\t};\n\t}\n\n\t/**\n\t * Check for a numeric input and that it is in between two given values.\n\t *\n\t * @static\n\t * @param {number} min Minimum value\n\t * @param {number} max Maximum value\n\t * @param {string} [decimal='.'] Character to use as the decimal place\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static minMaxNum(\n\t\tmin: number,\n\t\tmax: number,\n\t\tdecimal: string = '.',\n\t\tcfg: ValidationOptions | null = null\n\t): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet numeric = await Validator.numeric( decimal, opts )( val, data, host );\n\t\t\tif ( numeric !== true ) {\n\t\t\t\treturn opts.message;\n\t\t\t}\n\n\t\t\tif ( decimal !== '.' ) {\n\t\t\t\tval = val.toString().replace(decimal, '.');\n\t\t\t}\n\n\t\t\treturn val < min || val > max ?\n\t\t\t\topts.message :\n\t\t\t\ttrue;\n\t\t};\n\t}\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * String validation methods\n\t */\n\n\t/**\n\t * Validate an input as an e-mail address.\n\t *\n\t * @static\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static email( cfg: ValidationOptions | null = null ): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet common = Validator._common( val, opts );\n\t\t\tif ( common !== null ) {\n\t\t\t\treturn common === false ?\n\t\t\t\t\topts.message :\n\t\t\t\t\ttrue;\n\t\t\t}\n\n\t\t\tlet re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n\n\t\t\treturn re.test( val ) ?\n\t\t\t\ttrue :\n\t\t\t\topts.message;\n\t\t};\n\t}\n\n\t/**\n\t * Validate a string has a minimum length.\n\t *\n\t * @static\n\t * @param {number} min Minimum length\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static minLen( min: number, cfg: ValidationOptions | null = null ): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet common = Validator._common( val, opts );\n\t\t\tif ( common !== null ) {\n\t\t\t\treturn common === false ?\n\t\t\t\t\topts.message :\n\t\t\t\t\ttrue;\n\t\t\t}\n\n\t\t\treturn val.length < min ?\n\t\t\t\topts.message :\n\t\t\t\ttrue;\n\t\t};\n\t}\n\n\t/**\n\t * Validate a string is less or equal to a maximum length.\n\t *\n\t * @static\n\t * @param {number} max Maximum length\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static maxLen( max: number, cfg: ValidationOptions | null = null ): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet common = Validator._common( val, opts );\n\t\t\tif ( common !== null ) {\n\t\t\t\treturn common === false ?\n\t\t\t\t\topts.message :\n\t\t\t\t\ttrue;\n\t\t\t}\n\n\t\t\treturn val.length > max ?\n\t\t\t\topts.message :\n\t\t\t\ttrue;\n\t\t};\n\t}\n\n\t/**\n\t * Require a string with a certain minimum or maximum number of characters.\n\t *\n\t * @static\n\t * @param {number} min Minimum length\n\t * @param {number} max Maximum length\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static minMaxLen( min: number, max: number, cfg: ValidationOptions | null = null ): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet common = Validator._common( val, opts );\n\t\t\tif ( common !== null ) {\n\t\t\t\treturn common === false ?\n\t\t\t\t\topts.message :\n\t\t\t\t\ttrue;\n\t\t\t}\n\n\t\t\treturn val.length < min || val.length > max ?\n\t\t\t\topts.message :\n\t\t\t\ttrue;\n\t\t};\n\t}\n\n\t/**\n\t * Validate as an IP address.\n\t *\n\t * @static\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static ip( cfg: ValidationOptions | null = null ): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet common = Validator._common( val, opts );\n\t\t\tif ( common !== null ) {\n\t\t\t\treturn common === false ?\n\t\t\t\t\topts.message :\n\t\t\t\t\ttrue;\n\t\t\t}\n\n\t\t\tlet a = val.split('.');\n\t\t\tif ( a.length !== 4 ) {\n\t\t\t\treturn opts.message;\n\t\t\t}\n\n\t\t\tfor ( let i = 0 ; i < 4 ; i++ ) {\n\t\t\t\tlet parsed = parseInt( a[i], 10 );\n\t\t\t\tif ( parsed !== a[i] * 1 ) {\n\t\t\t\t\treturn opts.message;\n\t\t\t\t}\n\n\t\t\t\tif ( parsed < 0 || parsed > 255 ) {\n\t\t\t\t\treturn opts.message;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\t}\n\n\t/**\n\t * Validate as a URL.\n\t *\n\t * @static\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static url( cfg: ValidationOptions | null = null ): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet common = Validator._common( val, opts );\n\t\t\tif ( common !== null ) {\n\t\t\t\treturn common === false ?\n\t\t\t\t\topts.message :\n\t\t\t\t\ttrue;\n\t\t\t}\n\n\t\t\treturn ! validUrl.isWebUri( val ) ?\n\t\t\t\topts.message :\n\t\t\t\ttrue;\n\t\t};\n\t}\n\n\t/**\n\t * Check if string could contain an XSS attack string\n\t *\n\t * @static\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static xss( cfg: ValidationOptions | null = null ): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet common = Validator._common( val, opts );\n\t\t\tif ( common !== null ) {\n\t\t\t\treturn common === false ?\n\t\t\t\t\topts.message :\n\t\t\t\t\ttrue;\n\t\t\t}\n\n\t\t\tlet field = host.field;\n\n\t\t\treturn field.xssSafety( val ) !== val ?\n\t\t\t\topts.message :\n\t\t\t\ttrue;\n\t\t};\n\t}\n\n\t/**\n\t * Confirm that the value submitted is in a list of allowable values\n\t *\n\t * @static\n\t * @param {any[]} values List of values that are valid\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static values( values: any[], cfg: ValidationOptions | null = null ): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet common = Validator._common( val, opts );\n\t\t\tif ( common !== null ) {\n\t\t\t\treturn common === false ?\n\t\t\t\t\topts.message :\n\t\t\t\t\ttrue;\n\t\t\t}\n\n\t\t\treturn values.includes( val ) ?\n\t\t\t\ttrue :\n\t\t\t\topts.message;\n\t\t};\n\t}\n\n\t/**\n\t * Ensure that the submitted string does not contain HTML tags\n\t *\n\t * @static\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static noTags( cfg: ValidationOptions | null = null ): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet common = Validator._common( val, opts );\n\t\t\tif ( common !== null ) {\n\t\t\t\treturn common === false ?\n\t\t\t\t\topts.message :\n\t\t\t\t\ttrue;\n\t\t\t}\n\n\t\t\treturn val.toString().test(/<.*>/) ?\n\t\t\t\topts.message :\n\t\t\t\ttrue;\n\t\t};\n\t}\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t* Date validation methods\n\t*/\n\n\t/**\n\t * Check that a valid date input is given. Uses MomentJS\n\t *\n\t * @static\n\t * @param {string} format MomentJS date format\n\t * @param {string} [locale=null] MomentJS locale\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static dateFormat( format: string, locale: string | null = null, cfg: ValidationOptions | null = null ): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet common = Validator._common( val, opts );\n\t\t\tif ( common !== null ) {\n\t\t\t\treturn common === false ?\n\t\t\t\t\topts.message :\n\t\t\t\t\ttrue;\n\t\t\t}\n\n\t\t\tlet res = locale ?\n\t\t\t\tmoment( val, format, locale, true ).isValid() :\n\t\t\t\tmoment( val, format, true ).isValid();\n\n\t\t\treturn ! res ?\n\t\t\t\topts.message :\n\t\t\t\ttrue;\n\t\t};\n\t}\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t* Database validation\n\t*/\n\n\t/**\n\t * Check that the given value is unique in the database\n\t *\n\t * @static\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @param {string} [column=null] Column name to use to check as a unique\n\t *   value. If not given the host field's database column name is used\n\t * @param {string} [table=null] Table to check that this value is uniquely\n\t *   valid on. If not given the host Editor's table name is used\n\t * @param {knex} [db=null] Database connection. If not given the host\n\t *   Editor's database connection is used\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static dbUnique(\n\t\tcfg: ValidationOptions | null = null,\n\t\tcolumn: string | null = null,\n\t\ttable: string | null = null,\n\t\tdb: knex | null = null\n\t): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet common = Validator._common( val, opts );\n\t\t\tif ( common !== null ) {\n\t\t\t\treturn common === false ?\n\t\t\t\t\topts.message :\n\t\t\t\t\ttrue;\n\t\t\t}\n\n\t\t\tif ( db === null ) {\n\t\t\t\tdb = host.db;\n\t\t\t}\n\n\t\t\tif ( table === null ) {\n\t\t\t\ttable = host.editor.table()[0];\n\t\t\t}\n\n\t\t\tif ( column === null ) {\n\t\t\t\tcolumn = host.field.dbField();\n\t\t\t}\n\n\t\t\tlet q = db\n\t\t\t\t.table( table )\n\t\t\t\t.select( column )\n\t\t\t\t.where( { [column]: val } );\n\n\t\t\t// If doing an edit then we need to also discount the current row,\n\t\t\t// since it is of course already validly unique\n\t\t\tif ( host.action === 'edit' ) {\n\t\t\t\tlet cond = host.editor.pkeyToObject( host.id, true );\n\t\t\t\tq.whereNot( cond );\n\t\t\t}\n\n\t\t\tlet res = await q;\n\n\t\t\treturn res.length ?\n\t\t\t\topts.message :\n\t\t\t\ttrue;\n\t\t};\n\t}\n\n\t/**\n\t * Check that the given value is a value that is available in a database -\n\t * i.e. a join primary key. This will attempt to automatically use the table\n\t * name and value column from the field's `Options` method (under the\n\t * assumption that it will typically be used with a joined field), but the\n\t * table and field can also be specified via the options.\n\t *\n\t * @static\n\t * @param {ValidationOptions} [cfg=null] Validation options\n\t * @param {string} [column=null] Column name to use to check as a unique\n\t *   value. If not given the host field's database column name is used\n\t * @param {string} [table=null] Table to check that this value is uniquely\n\t *   valid on. If not given the host Editor's table name is used\n\t * @param {knex} [db=null] Database connection. If not given the host\n\t *   Editor's database connection is used\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static dbValues(\n\t\tcfg: ValidationOptions | null = null,\n\t\tcolumn: string | null = null,\n\t\ttable: string | null = null,\n\t\tdb: knex | null = null,\n\t\tvalues: any[] = []\n\t): IValidator {\n\t\tlet opts = ValidationOptions.select( cfg );\n\n\t\treturn async function( val: any, data: object, host: ValidationHost ): Promise<true|string> {\n\t\t\tlet common = Validator._common( val, opts );\n\t\t\tlet options = host.field.options();\n\n\t\t\tif ( common !== null ) {\n\t\t\t\treturn common === false ?\n\t\t\t\t\topts.message :\n\t\t\t\t\ttrue;\n\t\t\t}\n\n\t\t\tif ( values.indexOf(val) !== -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif ( db === null ) {\n\t\t\t\tdb = host.db;\n\t\t\t}\n\n\t\t\tif ( table === null && options instanceof JoinOptions ) {\n\t\t\t\ttable = options.table();\n\t\t\t}\n\n\t\t\tif ( column === null && options instanceof JoinOptions ) {\n\t\t\t\tcolumn = options.value();\n\t\t\t}\n\n\t\t\tif ( table === null || column === null ) {\n\t\t\t\tthrow new Error( 'Table or column for database value check is not ' +\n\t\t\t\t\t'defined for field ' + host.field.name()\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlet res = await db( table )\n\t\t\t\t.select( column )\n\t\t\t\t.where( { [column]: val } );\n\n\t\t\treturn ! res || ! res.length ?\n\t\t\t\topts.message :\n\t\t\t\ttrue;\n\t\t};\n\t}\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t* File upload validators\n\t*/\n\n\t/**\n\t * Check that the uploaded file has a given extension\n\t *\n\t * @static\n\t * @param {string[]} extns Allowed extensions\n\t * @param {string} msg Error message to return if not valid\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static fileExtensions( extns: string[], msg: string ): IFileValidator {\n\t\treturn async function( file: IFile ) {\n\t\t\tfor ( let i = 0, ien = extns.length; i < ien; i++ ) {\n\t\t\t\tif ( file.extn.toLowerCase() === extns[i].toLowerCase() ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn msg;\n\t\t};\n\t}\n\n\t/**\n\t * Check that the uploaded file is equal or less than a given size.\n\t *\n\t * @static\n\t * @param {string[]} size Max file size in bytes\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static fileSize( size: number, msg: string ): IFileValidator {\n\t\treturn async function( file: IFile ) {\n\t\t\treturn file.size > size ?\n\t\t\t\tmsg :\n\t\t\t\ttrue;\n\t\t};\n\t}\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t* Mjoin validators\n\t*/\n\n\t/**\n\t * Require a minimum value of the number of options / values submitted in\n\t * an array\n\t *\n\t * @static\n\t * @param size Min array size required to be valid\n\t * @param msg Error message\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static mjoinMinCount( size: number, msg: string ): IMjoinValidator {\n\t\treturn async function( editor: Editor, action: string, data: any[] ) {\n\t\t\tif ( action === 'create'  || action === 'edit' ) {\n\t\t\t\treturn data.length < size ?\n\t\t\t\t\tmsg :\n\t\t\t\t\ttrue;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t}\n\n\t/**\n\t * Require a maximum value of the number of options / values submitted in\n\t * an array\n\t *\n\t * @static\n\t * @param size Max array size required to be valid\n\t * @param msg Error message\n\t * @returns {IValidator} Configured validation function\n\t */\n\tpublic static mjoinMaxCount( size: number, msg: string ): IMjoinValidator {\n\t\treturn async function( editor: Editor, action: string, data: any[] ) {\n\t\t\tif ( action === 'create'  || action === 'edit' ) {\n\t\t\t\treturn data.length > size ?\n\t\t\t\t\tmsg :\n\t\t\t\t\ttrue;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t}\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t* Internal methods\n\t*/\n\n\tprivate static _common( val: any, opts: ValidationOptions ): boolean|null {\n\t\t// Error state tests\n\t\tif ( !opts.optional && val === null ) {\n\t\t\t// Value must be given\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( val !== null && opts.empty === false && val === '' ) {\n\t\t\t// Value must not be empty\n\t\t\treturn false;\n\t\t}\n\n\t\t// Validate passed states\n\t\tif ( opts.optional && val === null ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( opts.empty === true && val === '' ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Have the specific validation function perform its tests\n\t\treturn null;\n\t}\n}\n"]}