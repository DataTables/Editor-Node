{"version":3,"sources":["upload.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uBAAyB;AACzB,2BAA6B;AAI7B,uBAAyB;AAIzB,yCAAoC;AAEpC,IAAI,IAAI,GAAG,mBAAS,CAAE,EAAE,CAAC,IAAI,CAAE,CAAC;AAChC,IAAI,QAAQ,GAAG,mBAAS,CAAE,EAAE,CAAC,QAAQ,CAAE,CAAC;AACxC,IAAI,MAAM,GAAG,mBAAS,CAAE,EAAE,CAAE,CAAC;AAE7B,IAAY,MAaX;AAbD,WAAY,MAAM;IACd,yCAAO,CAAA;IACP,iDAAW,CAAA;IACX,mCAAI,CAAA;IACJ,mCAAI,CAAA;IACJ,2CAAQ,CAAA;IACR,2CAAQ,CAAA;IACR,2CAAQ,CAAA;IACR,2CAAQ,CAAA;IACR,+CAAU,CAAA;IACV,sEAAsE;IACtE,uEAAuE;IACvE,wCAAwC;AAC5C,CAAC,EAbW,MAAM,GAAN,cAAM,KAAN,cAAM,QAajB;AAoBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACH;IAaC;;OAEG;IAEA,gBAAa,MAA8B;QAA9B,uBAAA,EAAA,aAA8B;QAPnC,gBAAW,GAAG,EAAE,CAAC;QACjB,WAAM,GAAG,EAAE,CAAC;QAOhB,EAAE,CAAC,CAAE,MAAO,CAAC,CAAC,CAAC;YACX,IAAI,CAAC,MAAM,CAAE,MAAM,CAAE,CAAC;QAC1B,CAAC;IACL,CAAC;IAEJ;;OAEG;IAEA;;;;;;;;;;;;;;;;;OAiBG;IACI,uBAAM,GAAb,UAAe,MAAuB;QAClC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;;;;;;;;;;;;OAiBG;IACI,mBAAE,GAAT,UAAW,KAAa,EAAE,IAAY,EAAE,MAAc;QAClD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;QAExB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;;;;;;OAWG;IACI,wBAAO,GAAd,UAAgB,UAA2B,EAAE,QAAyB;QAAzB,yBAAA,EAAA,eAAyB;QAClE,oBAAoB;QACpB,EAAE,CAAC,CAAE,OAAO,UAAU,KAAK,UAAW,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAC/B,IAAI,CAAC,gBAAgB,GAAG,UAAU,CAAC;QACvC,CAAC;QACD,IAAI,CAAC,CAAC;YACF,IAAI,CAAC,kBAAkB,GAAG,UAAU,CAAC;YACrC,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;QACrC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;;;;OASG;IACI,0BAAS,GAAhB,UAAkB,EAAE;QAChB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAE,EAAE,CAAE,CAAC;QAE5B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;;;OAQG;IACI,sBAAK,GAAZ,UAAc,EAAE;QACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAE,EAAE,CAAE,CAAC;QAEvB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEF;;OAEG;IAEF;;OAEG;IACU,qBAAI,GAAjB,UAAmB,EAAQ,EAAE,EAAiB;QAAjB,mBAAA,EAAA,SAAiB;;gBAMtC,KAAK,EAGL,IAAI,EACE,CAAC,EAAM,GAAG,EACZ,GAAG,EAWD,CAAC,EAAM,GAAG,UAKhB,GAAG,EAEG,CAAC,EAAM,GAAG;;;;wBA5BpB,EAAE,CAAC,CAAE,CAAE,IAAI,CAAC,QAAS,CAAC,CAAC,CAAC;4BACpB,MAAM,gBAAC,IAAI,EAAC;wBAChB,CAAC;gCAGW,EAAE,CAAE,IAAI,CAAC,QAAQ,CAAE;6BAC1B,MAAM,CAAE,IAAI,CAAC,OAAO,CAAE;+BAEhB,MAAM,CAAC,IAAI,CAAE,IAAI,CAAC,SAAS,CAAE;wBACxC,GAAG,CAAC,CAAC,IAAS,CAAC,QAAQ,IAAI,CAAC,MAAM,EAAG,CAAC,GAAG,GAAG,EAAG,CAAC,EAAE,EAAG,CAAC;kCACxC,IAAI,CAAC,CAAC,CAAC;4BAEjB,EAAE,CAAC,CAAE,IAAI,CAAC,SAAS,CAAE,GAAG,CAAE,KAAK,MAAM,CAAC,OAAQ,CAAC,CAAC,CAAC;gCAC7C,KAAK,CAAC,MAAM,CAAE,GAAG,CAAE,CAAC;4BACxB,CAAC;wBACL,CAAC;wBAED,EAAE,CAAC,CAAE,EAAE,KAAK,IAAK,CAAC,CAAC,CAAC;4BAChB,KAAK,CAAC,KAAK,WAAI,GAAC,IAAI,CAAC,OAAO,IAAG,EAAE,MAAI,CAAC;wBAC1C,CAAC;wBAED,GAAG,CAAC,CAAC,IAAS,CAAC,QAAQ,IAAI,CAAC,MAAM,CAAC,MAAM,EAAG,CAAC,GAAG,GAAG,EAAG,CAAC,EAAE,EAAG,CAAC;4BACzD,KAAK,CAAC,KAAK,CAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAE,CAAC;wBAClC,CAAC;wBAEY,qBAAM,KAAK,EAAA;;iCAAX,SAAW;8BACd,EAAE;wBAEZ,GAAG,CAAC,CAAC,IAAS,CAAC,QAAQ,MAAM,CAAC,MAAM,EAAG,CAAC,GAAG,GAAG,EAAG,CAAC,EAAE,EAAG,CAAC;4BACpD,GAAG,CAAE,MAAM,CAAC,CAAC,CAAC,CAAE,IAAI,CAAC,OAAO,CAAC,CAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBAChD,CAAC;wBAED,sBAAO,GAAG,EAAC;;;;KACd;IAED;;OAEG;IACU,4BAAW,GAAxB,UAA0B,MAAc,EAAE,KAAY;;gBAG9C,MAAM;;yBAAG,MAAM,CAAC,KAAK,EAAE;gBAC3B,IAAI,CAAC,QAAQ,CAAE,MAAM,CAAC,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,OAAO,EAAE,CAAE,CAAC;;;;KAC5D;IAED;;OAEG;IACI,sBAAK,GAAZ;QACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED;;OAEG;IACU,qBAAI,GAAjB,UAAmB,MAAc,EAAE,MAAe;;gBAC1C,EAAE,YAMF,CAAC,kBAkBG,MAAM,EAEA,CAAC,EAAM,GAAG,EACZ,IAAI;;;4BAxBD,qBAAM,IAAI,CAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAE,EAAA;;mCAAhC,SAAgC;wBAC/C,MAAM,CAAC,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;4BAE3B,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;wBACzC,MAAM,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC;4BAC7B,CAAC,CAAC,GAAG,EAAE;4BACP,EAAE,CAAC;wBACP,MAAM,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;4BAGnB,CAAC,QAAQ,IAAI,CAAC,WAAW,CAAC,MAAM;;;6BAAG,CAAA,CAAC,GAAG,GAAG,CAAA;wBACvC,qBAAM,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAE,MAAM,CAAC,MAAM,CAAE,EAAA;;iCAA1C,SAA0C;wBAEvD,EAAE,CAAC,CAAE,OAAO,MAAM,KAAK,QAAS,CAAC,CAAC,CAAC;4BAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;4BACrB,MAAM,gBAAC,IAAI,EAAC;wBAChB,CAAC;;;wBANsD,CAAC,EAAE,CAAA;;;6BAUzD,IAAI,CAAC,QAAQ,EAAb,wBAAa;iCACD,MAAM,CAAC,IAAI,CAAE,IAAI,CAAC,SAAS,CAAE;wBAE1C,GAAG,CAAC,CAAC,IAAS,CAAC,QAAQ,MAAM,CAAC,MAAM,EAAG,CAAC,GAAG,GAAG,EAAG,CAAC,EAAE,EAAG,CAAC;mCACzC,IAAI,CAAC,SAAS,CAAE,MAAM,CAAC,CAAC,CAAC,CAAE;4BAEtC,6DAA6D;4BAC7D,+DAA+D;4BAC/D,EAAE,CAAC,CAAE,OAAO,IAAI,CAAC,OAAO,KAAK,QAAQ,IAAI,IAAI,KAAK,MAAM,CAAC,UAAW,CAAC,CAAC,CAAC;gCACnE,IAAI,CAAC,MAAM,GAAG,8CAA8C;oCACxD,8CAA8C,CAAC;gCAEnD,MAAM,gBAAC,IAAI,EAAC;4BAChB,CAAC;wBACL,CAAC;wBAGI,qBAAM,IAAI,CAAC,OAAO,CAAE,MAAM,CAAC,EAAE,EAAE,EAAE,MAAM,CAAE,EAAA;;wBAD9C,yBAAyB;wBACzB,EAAE,GAAG,SAAyC,CAAC;;4BAGzC,qBAAM,IAAI,CAAC,WAAW,CAAE,EAAE,EAAE,MAAM,CAAE,EAAA;;8BAApC,SAAoC;wBAC9C,sBAAO,GAAG,EAAC;;;;KACd;IAED;;OAEG;IACI,qBAAI,GAAX;QACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAED;;OAEG;IACI,sBAAK,GAAZ;QACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAEJ;;OAEG;IACc,4BAAW,GAAzB,UAA2B,EAAU,EAAE,KAAc;;qBAQ7C,EAAE;;;;6BAPD,CAAA,OAAO,IAAI,CAAC,OAAO,KAAK,UAAU,CAAA,EAAlC,wBAAkC;wBACzB,qBAAM,IAAI,CAAC,OAAO,CAAE,KAAK,CAAC,MAAM,EAAE,EAAE,CAAE,EAAA;;8BAAtC,SAAsC;wBAChD,sBAAO,GAAG,EAAC;;6BAKN,IAAI,CAAC,WAAW,CAAE,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAE;wBAChE,EAAE,GAAG,IAAI,CAAC,SAAS,CAAE,EAAE,CAAE,CAAC;;;;wBAGtB,qBAAK,CAAE,MAAM,CAAE,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC,CAAE,CAAE,EAAA;;wBAAxD,SAAwD,CAAC;;;;wBAGzD,IAAI,CAAC,MAAM,GAAG,mDAAmD,CAAC;wBAClE,sBAAO,IAAI,EAAC;4BAGhB,sBAAO,EAAE,KAAK,IAAI;4BACd,EAAE;4BACF,EAAE,EAAC;;;;KACV;IAEa,yBAAQ,GAAtB,UAAwB,EAAQ,EAAE,WAAmB,EAAE,SAAiB;;gBAChE,QAAQ,EACR,IAAI,EAaJ,KAAK,EACL,KAAK,EACL,CAAC,EAgBD,MAAM,EACN,OAAO,EACP,KAAK,EAGC,CAAC,EAAM,GAAG,EACZ,MAAM,EACN,IAAI,gBAuBJ,QAAQ;;;;mCA9DD,IAAI,CAAC,gBAAgB;+BACzB,IAAI;wBAEf,EAAE,CAAC,CAAE,CAAE,IAAI,CAAC,QAAQ,IAAI,CAAE,QAAS,CAAC,CAAC,CAAC;4BAClC,MAAM,gBAAC;wBACX,CAAC;wBAEP,uEAAuE;wBACvE,uEAAuE;wBACvE,oCAAoC;wBAC9B,EAAE,CAAC,CAAE,IAAI,CAAC,kBAAmB,CAAC,CAAC,CAAC;4BAC5B,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC;wBACxC,CAAC;4BAIO,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC;wBAE5B,EAAE,CAAC,CAAE,CAAC,CAAC,MAAM,KAAK,CAAE,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,WAAW,CAAC;4BACpB,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;wBACjB,CAAC;wBACD,IAAI,CAAC,EAAE,CAAC,CAAE,CAAC,CAAC,MAAM,KAAK,CAAE,CAAC,CAAC,CAAC;4BACxB,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;4BACb,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;wBACjB,CAAC;wBACD,IAAI,CAAC,CAAC;4BACF,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;4BACb,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;wBACjB,CAAC;iCAGY,IAAI,CAAC,SAAS;kCACb,MAAM,CAAC,IAAI,CAAE,MAAM,CAAE;gCACvB,EAAE,CAAE,IAAI,CAAC,QAAQ,CAAE;6BAC1B,MAAM,CAAE,IAAI,CAAC,OAAO,CAAE;wBAE3B,GAAG,CAAC,CAAC,IAAS,CAAC,QAAQ,OAAO,CAAC,MAAM,EAAG,CAAC,GAAG,GAAG,EAAG,CAAC,EAAE,EAAG,CAAC;qCACxC,OAAO,CAAC,CAAC,CAAC;mCACZ,MAAM,CAAE,MAAM,CAAE;4BAE3B,EAAE,CAAC,CAAE,IAAI,KAAK,MAAM,CAAC,OAAQ,CAAC,CAAC,CAAC;gCAC5B,KAAK,CAAC,MAAM,CAAE,MAAM,CAAE,CAAC;4BAC3B,CAAC;wBACL,CAAC;wBAED,KAAK,CAAC,UAAU,CAAE,IAAI,CAAC,OAAO,EAAE;4BAC5B,IAAI,CAAC,MAAM,CAAE,KAAK,CAAE,CAAC,IAAI,CAAE,KAAK,CAAE,CAAC,YAAY,CAAE,KAAK,CAAE,CAAC;wBAC7D,CAAC,CAAE,CAAC;wBAEO,qBAAM,KAAK,EAAA;;+BAAX,SAAW;wBAEtB,EAAE,CAAC,CAAE,IAAI,CAAC,MAAM,KAAK,CAAE,CAAC,CAAC,CAAC;4BACtB,MAAM,gBAAC;wBACX,CAAC;wBAEY,qBAAM,QAAQ,CAAE,IAAI,CAAE,EAAA;;iCAAtB,SAAsB;6BAK9B,CAAA,MAAM,KAAK,IAAI,CAAA,EAAf,wBAAe;mCACD,EAAE,CAAE,IAAI,CAAC,QAAQ,CAAE;6BAC7B,KAAK,CAAE;4BACJ,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAG,CAAC,GAAG,GAAG,EAAG,CAAC,EAAE,EAAG,CAAC;gCAClD,IAAI,CAAC,OAAO,WAAI,GAAC,IAAI,CAAC,OAAO,IAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAI,CAAC;4BAC9D,CAAC;;wBACL,CAAC,CAAE;wBAEP,qBAAM,QAAQ,CAAC,GAAG,EAAE,EAAA;;wBAApB,SAAoB,CAAC;;;;;;KAE5B;IAEa,wBAAO,GAArB,UAAuB,EAAQ,EAAE,KAAc;;gBACvC,UAAU,EACV,MAAM,EACN,OAAO,EACP,GAAG,EACH,MAAM,UAGF,MAAM,EACN,IAAI,cAqCI,GAAG,OAmBf,EAAE,EAOF,QAAQ,EAKJ,KAAK,EAEC,CAAC,EAAM,GAAG,EACZ,GAAG;;;;qCA/EE,EAAE;iCACN,IAAI,CAAC,SAAS;kCACb,MAAM,CAAC,IAAI,CAAE,MAAM,CAAE;8BACzB,EAAE;iCACC,KAAK,CAAC,MAAM;4BAEX,CAAC,QAAQ,OAAO,CAAC,MAAM;;;6BAAG,CAAA,CAAC,GAAG,GAAG,CAAA;iCAC9B,OAAO,CAAC,CAAC,CAAC;+BACZ,MAAM,CAAE,MAAM,CAAE;wBAElB,KAAA,IAAI,CAAA;;iCACJ,MAAM,CAAC,QAAQ,EAAf,MAAM,kBAAS;iCAGf,MAAM,CAAC,OAAO,EAAd,MAAM,kBAAQ;iCAId,MAAM,CAAC,WAAW,EAAlB,MAAM,kBAAY;iCAClB,MAAM,CAAC,QAAQ,EAAf,MAAM,kBAAS;iCAIf,MAAM,CAAC,IAAI,EAAX,MAAM,kBAAK;iCAIX,MAAM,CAAC,QAAQ,EAAf,MAAM,kBAAS;iCAIf,MAAM,CAAC,IAAI,EAAX,MAAM,kBAAK;iCAIX,MAAM,CAAC,QAAQ,EAAf,MAAM,kBAAS;iCAIf,MAAM,CAAC,UAAU,EAAjB,MAAM,mBAAW;;;4BA3BlB,yBAAM;;wBAGN,KAAA,GAAG,CAAA;wBAAE,KAAA,MAAM,CAAA;wBAAK,qBAAM,QAAQ,CAAE,MAAM,CAAC,IAAI,CAAE,EAAA;;wBAA7C,MAAa,GAAG,SAA6B,CAAC;wBAC9C,yBAAM;;wBAIN,GAAG,CAAE,MAAM,CAAE,GAAG,MAAM,CAAC,QAAQ,CAAC;wBAChC,yBAAM;;wBAGN,GAAG,CAAE,MAAM,CAAE,GAAG,MAAM,CAAC,IAAI,CAAC;wBAC5B,yBAAM;;wBAGN,GAAG,CAAE,MAAM,CAAE,GAAG,MAAM,CAAC,QAAQ,CAAC;wBAChC,yBAAM;;wBAGN,GAAG,CAAE,MAAM,CAAE,GAAG,MAAM,CAAC,IAAI,CAAC;wBAC5B,yBAAM;;wBAGN,GAAG,CAAE,MAAM,CAAE,GAAG,MAAM,CAAC,IAAI,CAAC;wBAC5B,yBAAM;;wBAGN,UAAU,CAAE,MAAM,CAAE,GAAG,IAAI,CAAC,OAAO,CAAC;wBACpC,GAAG,CAAE,MAAM,CAAE,GAAG,GAAG,CAAC,CAAC,uCAAuC;wBAC5D,yBAAM,CAAe,wCAAwC;;8BAGnD,OAAO,IAAI,KAAK,UAAU;4BAChC,IAAI,CAAE,EAAE,EAAE,MAAM,CAAE;4BAClB,IAAI;wBAER,EAAE,CAAC,CAAE,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAE,CAAC,CAAC,CAAC;4BACnD,UAAU,CAAE,MAAM,CAAE,GAAG,GAAG,CAAC;4BAC3B,GAAG,CAAE,MAAM,CAAE,GAAG,GAAG,CAAC;wBACxB,CAAC;wBACD,IAAI,CAAC,CAAC;4BACF,GAAG,CAAE,MAAM,CAAE,GAAG,GAAG,CAAC;wBACxB,CAAC;wBACD,yBAAM;;wBAlDgC,CAAC,EAAE,CAAA;;6BAsD3C,qBAAM,EAAE,CAAE,IAAI,CAAC,QAAQ,CAAE;6BAC9B,MAAM,CAAE,GAAG,CAAE;6BACb,SAAS,CAAE,IAAI,CAAC,OAAO,CAAE,EAAA;;8BAFpB,SAEoB;6BAErB,GAAG,CAAC,CAAC,CAAC;mCAOA,MAAM,CAAC,IAAI,CAAE,UAAU,CAAE;6BAEnC,QAAQ,CAAC,MAAM,EAAf,yBAAe;gCAGJ,EAAE;wBAEd,GAAG,CAAC,CAAC,IAAS,CAAC,QAAQ,QAAQ,CAAC,MAAM,EAAG,CAAC,GAAG,GAAG,EAAG,CAAC,EAAE,EAAG,CAAC;kCAC5C,QAAQ,CAAC,CAAC,CAAC;4BACrB,KAAK,CAAE,GAAG,CAAE,GAAG,IAAI,CAAC,WAAW,CAAE,UAAU,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,IAAI,EAAE,EAAE,CAAE,CAAC;wBACxE,CAAC;wBAED,qBAAM,EAAE,CAAE,IAAI,CAAC,QAAQ,CAAE;iCACpB,MAAM,CAAE,KAAK,CAAE;iCACf,KAAK,WAAI,GAAC,IAAI,CAAC,OAAO,IAAG,EAAE,MAAI,EAAA;;wBAFpC,SAEoC,CAAC;;6BAGzC,sBAAO,EAAE,EAAC;;;;KACb;IAEO,4BAAW,GAAnB,UAAqB,OAAe,EAAE,UAAkB,EAAE,EAAU;QAChE,IAAI,CAAC,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAE,GAAG,CAAE,CAAC;QAC3C,IAAI,QAAQ,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;QACvB,IAAI,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACpC,IAAI,IAAI,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC;QAC3B,IAAI,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEnC,IAAI,EAAE,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;QAC5B,EAAE,GAAG,EAAE,CAAC,OAAO,CAAE,QAAQ,EAAE,QAAQ,CAAE,CAAC;QACtC,EAAE,GAAG,EAAE,CAAC,OAAO,CAAE,MAAM,EAAE,EAAE,CAAE,CAAC;QAC9B,EAAE,GAAG,EAAE,CAAC,OAAO,CAAE,QAAQ,EAAE,IAAI,CAAE,CAAC;QAElC,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;IACL,aAAC;AAAD,CAldA,AAkdC;AAjdiB,SAAE,GAAG,MAAM,CAAC","file":"upload.js","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\n\nimport * as rootPath from 'app-root-path';\nimport knex from 'knex';\nimport * as mv from 'mv';\n\nimport Editor from './editor';\nimport Field from './field';\nimport promisify from './promisify';\n\nlet stat = promisify( fs.stat );\nlet readFile = promisify( fs.readFile );\nlet rename = promisify( mv );\n\nexport enum DbOpts {\n    Content,\n    ContentType,\n    Extn,\n    Name,\n    FileName, // Name + Extn\n    FileSize,\n    MimeType,\n    ReadOnly,\n    SystemPath\n    // Note that the PHP and .NET libraries have a WebPath, but that isn't\n    // available here as there isn't a good and reliable way to get the web\n    // root in node (it could be anywhere!).\n}\n\nexport interface IFile {\n    uuid: string;\n    field: string;\n    file: string; // full path\n    filename: string; // name + extn\n    encoding: string;\n    mimetype: string;\n    truncated: boolean;\n    done: boolean;\n    size: number; // Added\n    extn: string; // Added\n    name: string; // Added\n}\n\nexport interface IUpload {\n    upload: IFile;\n}\n\n/**\n * Upload class for Editor. This class provides the ability to easily specify\n * file upload information, specifically how the file should be recorded on\n * the server (database and file system).\n *\n * An instance of this class is attached to a field using the {@link\n * Field.upload} method. When Editor detects a file upload for that file the\n * information provided for this instance is executed.\n *\n * The configuration is primarily driven through the {@link db} and {@link\n * action} methods:\n *\n * * {@link db} Describes how information about the uploaded file is to be\n *   stored on the database.\n * * {@link action} Describes where the file should be stored on the file system\n *   and provides the option of specifying a custom action when a file is\n *   uploaded.\n *\n * Both methods are optional - you can store the file on the server using the\n * {@link db} method only if you want to store the file in the database, or if\n * you don't want to store relational data on the database us only {@link\n * action}. However, the majority of the time it is best to use both - store\n * information about the file on the database for fast retrieval (using a {@link\n * Editor.leftJoin()} for example) and the file on the file system for direct\n * web access.\n *\n * @export\n * @class Upload\n */\nexport default class Upload {\n    public static Db = DbOpts;\n\n    private _action: string|Function;\n    private _dbCleanCallback; // async function\n    private _dbCleanTableField: string;\n    private _dbTable: string;\n    private _dbPkey: string;\n    private _dbFields;\n    private _error: string;\n    private _validators = [];\n    private _where = [];\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Constructor\n\t */\n\n    constructor( action: string|Function = null ) {\n        if ( action ) {\n            this.action( action );\n        }\n    }\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Public methods\n\t */\n\n    /**\n     * Set the action to take when a file is uploaded. This can be either of:\n     *\n     * * A string - the value given is the full system path to where the\n     *   uploaded file is written to. The value given can include three \"macros\"\n     *   which are replaced by the script dependent on the uploaded file:\n     *   * `__EXTN__` - the file extension\n     *   * `__NAME__` - the uploaded file's name (including the extension)\n     *   * `__ID__` - Database primary key value if the {@link db} method is\n     *     used.\n     * * A closure - if a function is given the responsibility of what to do\n     *   with the uploaded file is transferred to this function. That will\n     *   typically involve writing it to the file system so it can be used\n     *   later.\n     *\n     * @param {(string|Function)} action Upload action\n     * @returns {Upload} Self for chaining\n     */\n    public action( action: string|Function ): Upload {\n        this._action = action;\n\n        return this;\n    }\n\n    /**\n     * Database configuration method. When used, this method will tell Editor\n     * what information you want written to a database on file upload, should\n     * you wish to store relational information about your file on the database\n     * (this is generally recommended).\n     *\n     * @param {string} table The name of the table where the file information\n     *     should be stored\n     * @param {string} pkey Primary key column name. The `Upload` class\n     *     requires that the database table have a single primary key so each\n     *     row can be uniquely identified.\n     * @param {object} fields A list of the fields to be written to on upload.\n     *     The property names are the database columns and the values can be\n     *     defined by the constants of this class. The value can also be a\n     *     string or a closure function if you wish to send custom information\n     *     to the database.\n     * @returns {Upload} Self for chaining\n     */\n    public db( table: string, pkey: string, fields: object ): Upload {\n        this._dbTable = table;\n        this._dbPkey = pkey;\n        this._dbFields = fields;\n\n        return this;\n    }\n\n    /**\n     * Set a callback function that is used to remove files which no longer have\n     * a reference in a source table.\n     *\n     * @param {(string|Function)} tableField Table field to be used for the delete match\n     * @param {Function} [callback=null] Function that will be executed on clean. It is\n     *   given an array of information from the database about the orphaned\n     *   rows, and can return true to indicate that the rows should be\n     *   removed from the database. Any other return value (including none)\n     *   will result in the records being retained.\n     * @returns {Upload} Self for chaining\n     */\n    public dbClean( tableField: string|Function, callback: Function = null ): Upload {\n        // Argument swapping\n        if ( typeof tableField === 'function' ) {\n            this._dbCleanTableField = null;\n            this._dbCleanCallback = tableField;\n        }\n        else {\n            this._dbCleanTableField = tableField;\n            this._dbCleanCallback = callback;\n        }\n\n        return this;\n    }\n\n    /**\n     * Add a validation method to check file uploads. Multiple validators can be\n     * added by calling this method multiple times - they will be executed in\n     * sequence when a file has been uploaded.\n     *\n     * @param {any} fn Validation function. A files parameter is\n     *   passed in for the uploaded file and the return is either a string\n     *   (validation failed and error message), or `true` (validation passed).\n     * @returns {Upload} Self for chaining\n     */\n    public validator( fn ): Upload {\n        this._validators.push( fn );\n\n        return this;\n    }\n\n    /**\n     * Add a condition to the data to be retrieved from the database. This\n     * must be given as a function to be executed (usually anonymous) and\n     * will be passed in a single argument, the `Query` object, to which\n     * conditions can be added. Multiple calls to this method can be made.\n     *\n     * @param {any} fn Knex WHERE condition\n     * @returns {Upload} Self for chaining\n     */\n    public where( fn ): Upload {\n        this._where.push( fn );\n\n        return this;\n    }\n\n   /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *\n    * Internal methods\n    */\n\n    /**\n     * @ignore\n     */\n    public async data( db: knex, id: string = null ): Promise<object> {\n        if ( ! this._dbTable ) {\n            return null;\n        }\n\n        // Select the details requested, for the columns requested\n        let query = db( this._dbTable )\n            .select( this._dbPkey );\n\n        let keys = Object.keys( this._dbFields );\n        for ( let i = 0, ien = keys.length ; i < ien ; i++ ) {\n            let key = keys[i];\n\n            if ( this._dbFields[ key ] !== DbOpts.Content ) {\n                query.select( key );\n            }\n        }\n\n        if ( id !== null ) {\n            query.where( { [this._dbPkey]: id } );\n        }\n\n        for ( let i = 0, ien = this._where.length ; i < ien ; i++ ) {\n            query.where( this._where[i] );\n        }\n\n        let result = await query;\n        let out = {};\n\n        for ( let i = 0, ien = result.length ; i < ien ; i++ ) {\n            out[ result[i][ this._dbPkey] ] = result[i];\n        }\n\n        return out;\n    }\n\n    /**\n     * @ignore\n     */\n    public async dbCleanExec( editor: Editor, field: Field ): Promise<void> {\n\t\t// Database and file system clean up BEFORE adding the new file to\n\t\t// the db, otherwise it will be removed immediately\n        let tables = editor.table();\n        this._dbClean( editor.db(), tables[0], field.dbField() );\n    }\n\n    /**\n     * @ignore\n     */\n    public error() {\n        return this._error;\n    }\n\n    /**\n     * @ignore\n     */\n    public async exec( editor: Editor, upload: IUpload ): Promise <string> {\n        let id;\n\n        // Add any extra information to the upload structure\n        let fileInfo = await stat( upload.upload.file );\n        upload.upload.size = fileInfo.size;\n\n        let a = upload.upload.filename.split('.');\n        upload.upload.extn = a.length > 1 ?\n            a.pop() :\n            '';\n        upload.upload.name = a.join('.');\n\n        // Validation\n        for ( let i = 0, ien = this._validators.length ; i < ien ; i++ ) {\n            let result = await this._validators[i]( upload.upload );\n\n            if ( typeof result === 'string' ) {\n                this._error = result;\n                return null;\n            }\n        }\n\n        // Database\n        if ( this._dbTable ) {\n            let fields = Object.keys( this._dbFields );\n\n            for ( let i = 0, ien = fields.length ; i < ien ; i++ ) {\n                let prop = this._dbFields[ fields[i] ];\n\n                // We can't know what the path is, if it has moved into place\n                // by an external function - throw an error if this does happen\n                if ( typeof this._action !== 'string' && prop === DbOpts.SystemPath ) {\n                    this._error = 'Cannot set path information in the database ' +\n                        'if a custom method is used to save the file.';\n\n                    return null;\n                }\n            }\n\n            // Commit to the database\n            id = await this._dbExec( editor.db(), upload );\n        }\n\n        let res = await this._actionExec( id, upload );\n        return res;\n    }\n\n    /**\n     * @ignore\n     */\n    public pkey() {\n        return this._dbPkey;\n    }\n\n    /**\n     * @ignore\n     */\n    public table() {\n        return this._dbTable;\n    }\n\n\t/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *\n\t * Private methods\n\t */\n    private async _actionExec( id: string, files: IUpload ): Promise<string> {\n        if ( typeof this._action === 'function' ) {\n            let res = await this._action( files.upload, id );\n            return res;\n        }\n\n        // Default action - move the file to the location specified by the\n        // action string\n        let to = this._substitute( this._action, files.upload.file, id );\n        to = path.normalize( to );\n\n        try {\n            await( rename( files.upload.file, to, {mkdirp: true} ) );\n        }\n        catch (e) {\n            this._error = 'An error occurred while moving the uploaded file.';\n            return null;\n        }\n\n        return id !== null ?\n            id :\n            to;\n    }\n\n    private async _dbClean( db: knex, editorTable: string, fieldName: string ): Promise<void> {\n        let callback = this._dbCleanCallback;\n        let that = this;\n\n        if ( ! this._dbTable || ! callback ) {\n            return;\n        }\n\n\t\t// If there is a table / field that we should use to check if the value\n\t\t// is in use, then use that. Otherwise we'll try to use the information\n\t\t// from the Editor / Field instance.\n        if ( this._dbCleanTableField ) {\n            fieldName = this._dbCleanTableField;\n        }\n\n        let table;\n        let field;\n        let a = fieldName.split('.');\n\n        if ( a.length === 1 ) {\n            table = editorTable;\n            field = a[0];\n        }\n        else if ( a.length === 2 ) {\n            table = a[0];\n            field = a[1];\n        }\n        else {\n            table = a[1];\n            field = a[2];\n        }\n\n\t\t// Select the details requested, for the columns requested\n        let fields = this._dbFields;\n        let columns = Object.keys( fields );\n        let query = db( this._dbTable )\n            .select( this._dbPkey );\n\n        for ( let i = 0, ien = columns.length ; i < ien ; i++ ) {\n            let column = columns[i];\n            let prop = fields[ column ];\n\n            if ( prop !== DbOpts.Content ) {\n                query.select( column );\n            }\n        }\n\n        query.whereNotIn( this._dbPkey, function() {\n            this.select( field ).from( table ).whereNotNull( field );\n        } );\n\n        let rows = await query;\n\n        if ( rows.length === 0 ) {\n            return;\n        }\n\n        let result = await callback( rows );\n\n\t\t// Delete the selected rows, iff the developer says to do so with the\n\t\t// returned value (i.e. acknowledge that the files have be removed from\n\t\t// the file system)\n        if ( result === true ) {\n            let queryDel = db( this._dbTable )\n                .where( function() {\n                    for ( let i = 0, ien = rows.length ; i < ien ; i++ ) {\n                        this.orWhere( { [that._dbPkey]: rows[i][that._dbPkey] } );\n                    }\n                } );\n\n            await queryDel.del();\n        }\n    }\n\n    private async _dbExec( db: knex, files: IUpload ): Promise<string> {\n        let pathFields = {};\n        let fields = this._dbFields;\n        let columns = Object.keys( fields );\n        let set = {};\n        let upload = files.upload;\n\n        for ( let i = 0, ien = columns.length ; i < ien ; i++ ) {\n            let column = columns[i];\n            let prop = fields[ column ];\n\n            switch ( prop ) {\n                case DbOpts.ReadOnly:\n                    break;\n\n                case DbOpts.Content:\n                    set[ column ] = await readFile( upload.file );\n                    break;\n\n                case DbOpts.ContentType:\n                case DbOpts.MimeType:\n                    set[ column ] = upload.mimetype;\n                    break;\n\n                case DbOpts.Extn:\n                    set[ column ] = upload.extn;\n                    break;\n\n                case DbOpts.FileName:\n                    set[ column ] = upload.filename;\n                    break;\n\n                case DbOpts.Name:\n                    set[ column ] = upload.name;\n                    break;\n\n                case DbOpts.FileSize:\n                    set[ column ] = upload.size;\n                    break;\n\n                case DbOpts.SystemPath:\n                    pathFields[ column ] = this._action;\n                    set[ column ] = '-'; // Use a temporary value to avoid cases\n                    break;               // where the db will reject empty values\n\n                default:\n                    let val = typeof prop === 'function' ?\n                        prop( db, upload ) :\n                        prop;\n\n                    if ( typeof val === 'string' && val.match(/\\{.*\\}/) ) {\n                        pathFields[ column ] = val;\n                        set[ column ] = '-';\n                    }\n                    else {\n                        set[ column ] = val;\n                    }\n                    break;\n            }\n        }\n\n        let res = await db( this._dbTable )\n            .insert( set )\n            .returning( this._dbPkey );\n\n        let id = res[0];\n\n\t\t// Update the newly inserted row with the path information. We have to\n\t\t// use a second statement here as we don't know in advance what the\n\t\t// database schema is and don't want to prescribe that certain triggers\n\t\t// etc be created. It makes it a bit less efficient but much more\n\t\t// compatible\n        let pathKeys = Object.keys( pathFields );\n\n        if ( pathKeys.length ) {\n            // For this to operate the action must be a string, which is\n            // validated in the `exec` method\n            let toSet = {};\n\n            for ( let i = 0, ien = pathKeys.length ; i < ien ; i++ ) {\n                let key = pathKeys[i];\n                toSet[ key ] = this._substitute( pathFields[key], upload.file, id );\n            }\n\n            await db( this._dbTable )\n                .update( toSet )\n                .where( { [this._dbPkey]: id } );\n        }\n\n        return id;\n    }\n\n    private _substitute( convert: string, uploadPath: string, id: string ): string {\n        let a = uploadPath.toString().split( '/' );\n        let fileName = a.pop();\n        let fileParts = fileName.split('.');\n        let extn = fileParts.pop();\n        let namePart = fileParts.join('.');\n\n        let to = convert.toString();\n        to = to.replace( '{name}', namePart );\n        to = to.replace( '{id}', id );\n        to = to.replace( '{extn}', extn );\n\n        return to;\n    }\n}\n"]}