{"version":3,"sources":["upload.ts"],"names":[],"mappings":"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","file":"upload.js","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\n\nimport * as rootPath  from 'app-root-path';\nimport knex from 'knex';\nimport * as mv  from 'mv';\n\nimport Editor from './editor';\nimport Field from './field';\nimport promisify from './promisify';\n\nlet stat = promisify( fs.stat );\nlet readFile = promisify( fs.readFile );\nlet rename = promisify( mv );\n\n\nexport enum DbOpts {\n    Content,\n    ContentType,\n    Extn,\n    Name,\n    FileName, // Name + Extn\n    FileSize,\n    MimeType,\n    ReadOnly,\n    SystemPath\n    // Note that the PHP and .NET libraries have a WebPath, but that isn't\n    // available here as there isn't a good and reliable way to get the web\n    // root in node (it could be anywhere!).\n}\n\nexport interface IFile {\n    uuid: string;\n    field: string;\n    file: string; // full path\n    filename: string; // name + extn\n    encoding: string;\n    mimetype: string;\n    truncated: boolean;\n    done: boolean;\n    size: number; // Added\n    extn: string; // Added\n    name: string; // Added\n}\n\nexport interface IUpload {\n    upload: IFile\n}\n\nexport default class Upload {\n    public static Db = DbOpts;\n\n    private _action: string|Function;\n    private _dbCleanCallback; // async function\n    private _dbCleanTableField: string;\n    private _dbTable: string;\n    private _dbPkey: string;\n    private _dbFields;\n    private _error: string;\n    private _validators = [];\n    private _where = [];\n\n    constructor ( action: string|Function=null ) {\n        if ( action ) {\n            this.action( action );\n        }\n    }\n\n    public action ( action: string|Function ): Upload {\n        this._action = action;\n\n        return this;\n    }\n\n    public db ( table: string, pkey: string, fields: object ): Upload {\n        this._dbTable = table;\n        this._dbPkey = pkey;\n        this._dbFields = fields;\n\n        return this;\n    }\n\n    public dbClean ( tableField: string|Function, callback: Function=null ): Upload {\n        // Argument swapping\n        if ( typeof tableField === 'function' ) {\n            this._dbCleanTableField = null;\n            this._dbCleanCallback = tableField;\n        }\n        else {\n            this._dbCleanTableField = tableField;\n            this._dbCleanCallback = callback;\n        }\n\n        return this;\n    }\n\n    public validator ( fn ): Upload {\n        this._validators.push( fn );\n\n        return this;\n    }\n\n    public where ( fn ): Upload {\n        this._where.push( fn );\n\n        return this;\n    }\n\n\n\n\t/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *\n\t * Internal methods\n\t */\n    public async data ( db: knex, id: string=null ): Promise<object> {\n        if ( ! this._dbTable ) {\n            return null;\n        }\n\n        // Select the details requested, for the columns requested\n        let query = db( this._dbTable )\n            .select( this._dbPkey );\n\n        let keys = Object.keys( this._dbFields );\n        for ( let i=0, ien=keys.length ; i<ien ; i++ ) {\n            let key = keys[i];\n\n            if ( this._dbFields[ key ] !== DbOpts.Content ) {\n                query.select( key );\n            }\n        }\n\n        if ( id !== null ) {\n            query.where( { [this._dbPkey]: id } );\n        }\n\n        for ( let i=0, ien=this._where.length ; i<ien ; i++ ) {\n            query.where( this._where[i] );\n        }\n\n        let result = await query;\n        let out = {};\n\n        for ( let i=0, ien=result.length ; i<ien ; i++ ) {\n            out[ result[i][ this._dbPkey] ] = result[i];\n        }\n\n        return out;\n    }\n\n    public async dbCleanExec ( editor: Editor, field: Field ): Promise<void> {\n\t\t// Database and file system clean up BEFORE adding the new file to\n\t\t// the db, otherwise it will be removed immediately\n        let tables = editor.table();\n        this._dbClean( editor.db(), tables[0], field.dbField() );\n    }\n\n    public error () {\n        return this._error;\n    }\n\n    public async exec ( editor: Editor, upload: IUpload ): Promise <string> {\n        let id;\n\n        // Add any extra information to the upload structure\n        let fileInfo = await stat( upload.upload.file );\n        upload.upload.size = fileInfo.size;\n\n        let a = upload.upload.filename.split('.');\n        upload.upload.extn = a.length > 1 ?\n            a.pop() :\n            '';\n        upload.upload.name = a.join('.');\n\n        // Validation\n        for ( let i=0, ien=this._validators.length ; i<ien ; i++ ) {\n            let res = await this._validators[i]( upload.upload );\n            console.log( 'validator', res );\n\n            if ( typeof res === 'string' ) {\n                this._error = res;\n                return null;\n            }\n        }\n\n        // Database\n        if ( this._dbTable ) {\n            let fields = Object.keys( this._dbFields );\n\n            for ( let i=0, ien=fields.length ; i<ien ; i++ ) {\n                let prop = this._dbFields[ fields[i] ];\n\n                // We can't know what the path is, if it has moved into place\n                // by an external function - throw an error if this does happen\n                if ( typeof this._action !== 'string' && prop === DbOpts.SystemPath ) {\n                    this._error = 'Cannot set path information in the database '+\n                        'if a custom method is used to save the file.';\n                    \n                    return null;\n                }\n            }\n\n            // Commit to the database\n            id = await this._dbExec( editor.db(), upload );\n        }\n\n        let res = await this._actionExec( id, upload );\n        return res;\n    }\n\n    public pkey () {\n        return this._dbPkey;\n    }\n\n    public table () {\n        return this._dbTable;\n    }\n\n\n\t/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *\n\t * Private methods\n\t */\n    private async _actionExec ( id: string, files: IUpload ): Promise<string> {\n        if ( typeof this._action === 'function' ) {\n            let res = await this._action( files.upload, id );\n            return res;\n        }\n\n        // Default action - move the file to the location specified by the\n        // action string\n        let to = this._substitute( this._action, files.upload.file, id );\n        to = path.normalize( to );\n\n        try {\n            await( rename( files.upload.file, to, {mkdirp: true} ) );\n        }\n        catch (e) {\n            this._error = 'An error occurred while moving the uploaded file.';\n            return null;\n        }\n\n        return id !== null ?\n            id :\n            to;\n    }\n\n    private async _dbClean ( db: knex, editorTable: string, fieldName: string ): Promise<void> {\n        let callback = this._dbCleanCallback;\n        let that = this;\n\n        if ( ! this._dbTable || ! callback ) {\n            return;\n        }\n\n\t\t// If there is a table / field that we should use to check if the value\n\t\t// is in use, then use that. Otherwise we'll try to use the information\n\t\t// from the Editor / Field instance.\n        if ( this._dbCleanTableField ) {\n            fieldName = this._dbCleanTableField;\n        }\n\n        let table, field;\n        let a = fieldName.split('.');\n \n        if ( a.length === 1 ) {\n            table = editorTable;\n            field = a[0];\n        }\n        else if ( a.length === 2 ) {\n            table = a[0];\n            field = a[1];\n        }\n        else {\n            table = a[1];\n            field = a[2];\n        }\n\n\t\t// Select the details requested, for the columns requested\n        let fields = this._dbFields;\n        let columns = Object.keys( fields );\n        let query = db( this._dbTable )\n            .select( this._dbPkey );\n        \n        for ( let i=0, ien=columns.length ; i<ien ; i++ ) {\n            let column = columns[i];\n            let prop = fields[ column ];\n\n            if ( prop !== DbOpts.Content ) {\n                query.select( column );\n            }\n        }\n\n        query.whereNotIn( this._dbPkey, function () {\n            this.select( field ).from( table ).whereNotNull( field );\n        } );\n\n        let rows = await query;\n        \n        if ( rows.length === 0 ) {\n            return;\n        }\n\n        let result = await callback( rows );\n\n\t\t// Delete the selected rows, iff the developer says to do so with the\n\t\t// returned value (i.e. acknowledge that the files have be removed from\n\t\t// the file system)\n        if ( result === true ) {\n            let queryDel = db( this._dbTable )\n                .where( function () {\n                    for ( let i=0, ien=rows.length ; i<ien ; i++ ) {\n                        this.orWhere( { [that._dbPkey]: rows[i][that._dbPkey] } );\n                    }\n                } )\n            \n            await queryDel.del();\n        }\n    }\n\n    private async _dbExec ( db: knex, files: IUpload ): Promise<string> {\n        let pathFields = {};\n        let fields = this._dbFields;\n        let columns = Object.keys( fields );\n        let set = {};\n        let upload = files.upload;\n        \n        for ( let i=0, ien=columns.length ; i<ien ; i++ ) {\n            let column = columns[i];\n            let prop = fields[ column ];\n\n            switch( prop ) {\n                case DbOpts.ReadOnly:\n                    break;\n                \n                case DbOpts.Content:\n                    set[ column ] = await readFile( upload.file );\n                    break;\n                \n                case DbOpts.ContentType:\n                case DbOpts.MimeType:\n                    set[ column ] = upload.mimetype;\n                    break;\n                \n                case DbOpts.Extn:\n                    set[ column ] = upload.extn;\n                    break;\n                \n                case DbOpts.FileName:\n                    set[ column ] = upload.filename;\n                    break;\n                \n                case DbOpts.Name:\n                    set[ column ] = upload.name;\n                    break;\n                \n                case DbOpts.FileSize:\n                    set[ column ] = upload.size;\n                    break;\n                \n                case DbOpts.SystemPath:\n                    pathFields[ column ] = this._action;\n                    set[ column ] = '-'; // Use a temporary value to avoid cases \n                    break;               // where the db will reject empty values\n\n                default:\n                    let val = typeof prop === 'function' ?\n                        prop( db, upload ) :\n                        prop;\n                    \n                    if ( typeof val === 'string' && val.match(/\\{.*\\}/) ) {\n                        pathFields[ column ] = val;\n                        set[ column ] = '-';\n                    }\n                    else {\n                        set[ column ] = val;\n                    }\n                    break;\n            }\n        }\n\n        let res = await db( this._dbTable )\n            .insert( set )\n            .returning( this._dbPkey );\n\n        let id = res[0];\n\n\t\t// Update the newly inserted row with the path information. We have to\n\t\t// use a second statement here as we don't know in advance what the\n\t\t// database schema is and don't want to prescribe that certain triggers\n\t\t// etc be created. It makes it a bit less efficient but much more\n\t\t// compatible\n        let pathKeys = Object.keys( pathFields );\n\n        if ( pathKeys.length ) {\n            // For this to operate the action must be a string, which is\n            // validated in the `exec` method\n            let set = {};\n\n            for ( let i=0, ien=pathKeys.length ; i<ien ; i++ ) {\n                let key = pathKeys[i];\n                set[ key ] = this._substitute( pathFields[key], upload.file, id );\n            }\n\n            await db( this._dbTable )\n                .update( set )\n                .where( { [this._dbPkey]: id } );\n        }\n\n        return id;\n    }\n\n    private _substitute ( convert: string, uploadPath: string, id: string ): string {\n        let a = uploadPath.toString().split( '/' );\n        let fileName = a.pop();\n        let fileParts = fileName.split('.');\n        let extn = fileParts.pop();\n        let namePart = fileParts.join('.');\n\n        let to = convert.toString();\n        to = to.replace( '{name}', namePart );\n        to = to.replace( '{id}', id );\n        to = to.replace( '{extn}', extn );\n\n        return to;\n    }\n}"]}