{"version":3,"sources":["options.ts"],"names":[],"mappings":"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","file":"options.js","sourcesContent":["import * as knex from 'knex';\nimport {Knex} from 'knex';\nimport {ILeftJoin} from './editor';\nimport {leftJoin} from './helpers';\n\nfunction isNumeric(n) {\n\treturn !isNaN(parseFloat(n)) && isFinite(n);\n}\n\nexport interface IOption {\n\tlabel: string;\n\tvalue: string | number;\n}\n\nexport type IRenderer = (row: object) => string;\nexport type CustomOptions = (db: Knex) => Promise<IOption[]>;\n\n/**\n * The Options class provides a convenient method of specifying where Editor\n * should get the list of options for a `select`, `radio` or `checkbox` field.\n * This is normally from a table that is _left joined_ to the main table being\n * edited, and a list of the values available from the joined table is shown to\n * the end user to let them select from.\n *\n * `Options` instances are used with the {@link Field.options} method.\n *\n * @export\n * @class Options\n */\nexport default class Options {\n\tprivate _table: string;\n\tprivate _value: string;\n\tprivate _label: string[];\n\tprivate _leftJoin: ILeftJoin[] = [];\n\tprivate _limit: number;\n\tprivate _renderer: IRenderer;\n\tprivate _where: any;\n\tprivate _order: string;\n\tprivate _manualOpts: IOption[] = [];\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Public methods\n\t */\n\n\t/**\n\t * Add extra options to the list, in addition to any obtained from the database\n\t *\n\t * @param label Label\n\t * @param value Value\n\t */\n\tpublic add(label: string, value?: string) {\n\t\tif (value === undefined) {\n\t\t\tvalue = label;\n\t\t}\n\n\t\tthis._manualOpts.push({\n\t\t\tlabel,\n\t\t\tvalue\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the column(s) to be used for the label\n\t *\n\t * @returns {string[]} Label columns\n\t */\n\tpublic label(): string[];\n\t/**\n\t * Set the column(s) to be used for the label\n\t *\n\t * @param {string[]} label Database column names\n\t * @returns {Options} Self for chaining\n\t */\n\tpublic label(label: string[]): Options;\n\tpublic label(label?: string[]): any {\n\t\tif (label === undefined) {\n\t\t\treturn this._label;\n\t\t}\n\n\t\tif (Array.isArray(label)) {\n\t\t\tthis._label = label;\n\t\t}\n\t\telse {\n\t\t\tthis._label = [ label ];\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a left join condition to the Options instance, allowing it to operate\n\t * over multiple tables.\n\t *\n\t * In this form the method will take a function as the second parameter which\n\t * is a Knex callback function allowing a complex join expression to be built.\n\t * @param {string} table Table name to do a join onto\n\t * @param {function} condition\n\t * @returns {Editor} Self for chaining\n\t */\n\tpublic leftJoin(\n\t\ttable: string,\n\t\tcondition: Function\n\t): Options;\n\t/**\n\t * Add a left join condition to the Options instance, allowing it to operate\n\t * over multiple tables.\n\t * @param {string} table Table name to do a join onto\n\t * @param {string} field1 Field from the parent table to use as the join link\n\t * @param {string} operator Join condition (`=`, '<`, etc)\n\t * @param {string} field2 Field from the child table to use as the join link\n\t * @returns {Editor} Self for chaining\n\t */\n\tpublic leftJoin(\n\t\ttable: string,\n\t\tfield1: string,\n\t\toperator: string,\n\t\tfield2: string\n\t): Options;\n\tpublic leftJoin(\n\t\ttable: string,\n\t\tfield1: string | Function,\n\t\toperator: string | undefined = undefined,\n\t\tfield2: string | undefined = undefined\n\t): Options {\n\t\tif (typeof field1 === 'function') {\n\t\t\tthis._leftJoin.push({\n\t\t\t\tfield1: '',\n\t\t\t\tfield2: '',\n\t\t\t\tfn: field1,\n\t\t\t\toperator: '',\n\t\t\t\ttable,\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis._leftJoin.push({\n\t\t\t\tfield1,\n\t\t\t\tfield2,\n\t\t\t\toperator,\n\t\t\t\ttable,\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the currently applied LIMIT\n\t *\n\t * @returns {number} Limit\n\t */\n\tpublic limit(): number;\n\t/**\n\t * Set the LIMIT clause to limit the number of records returned\n\t *\n\t * @param {number} limit Limit\n\t * @returns {Options} Self for chaining\n\t */\n\tpublic limit(limit: number): Options;\n\tpublic limit(limit?: number): any {\n\t\tif (limit === undefined) {\n\t\t\treturn this._limit;\n\t\t}\n\n\t\tthis._limit = limit;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the ORDER BY clause for the SQL.\n\t *\n\t * @returns {string} ORDER BY clause\n\t */\n\tpublic order(): string;\n\t/**\n\t * Set the ORDER BY clause to use in the SQL. If this option is not\n\t * provided the ordering will be based on the rendered output, either\n\t * numerically or alphabetically based on the data returned by the renderer.\n\t *\n\t * @param {string} order ORDER BY statement\n\t * @returns {Options} Self for chaining\n\t */\n\tpublic order(order: string): Options;\n\tpublic order(order?: string): any {\n\t\tif (order === undefined) {\n\t\t\treturn this._order;\n\t\t}\n\n\t\tthis._order = order;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the configured label renderer\n\t *\n\t * @returns {IRenderer} Self for chaining\n\t */\n\tpublic render(): IRenderer;\n\t/**\n\t * Set the label renderer. The renderer can be used to combine\n\t * multiple database columns into a single string that is shown as the label\n\t * to the end user in the list of options.\n\t *\n\t * @param {IRenderer} fn Renderering function\n\t * @returns {Options} Self for chaining\n\t */\n\tpublic render(fn: IRenderer): Options;\n\tpublic render(fn?: IRenderer): any {\n\t\tif (fn === undefined) {\n\t\t\treturn this._renderer;\n\t\t}\n\n\t\tthis._renderer = fn;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the table that the options will be gathered from.\n\t *\n\t * @returns {string} Table name\n\t */\n\tpublic table(): string;\n\t/**\n\t * Set the database table from which to gather the options for the list.\n\t *\n\t * @param {string} table Table name\n\t * @returns {Options} Self for chaining\n\t */\n\tpublic table(table: string): Options;\n\tpublic table(table?: string): any {\n\t\tif (table === undefined) {\n\t\t\treturn this._table;\n\t\t}\n\n\t\tthis._table = table;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the column name to use for the value in the options list.\n\t *\n\t * @returns {string} Column name\n\t */\n\tpublic value(): string;\n\t/**\n\t * Set the column name to use for the value in the options list. This would\n\t * normally be the primary key for the table.\n\t *\n\t * @param {string} value Column name\n\t * @returns {Options} Self for chaining\n\t */\n\tpublic value(value: string): Options;\n\tpublic value(value?: string): any {\n\t\tif (value === undefined) {\n\t\t\treturn this._value;\n\t\t}\n\n\t\tthis._value = value;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the WHERE condition for this option set.\n\t *\n\t * @returns {*} Knex WHERE condition\n\t */\n\tpublic where(): any;\n\t/**\n\t * Set the method to use for a WHERE condition if one is to be applied to\n\t * the query to get the options.\n\t *\n\t * @param {*} where Knex WHERE condition\n\t * @returns {Options} Self for chaining\n\t */\n\tpublic where(where: any): Options;\n\tpublic where(where?: any): any {\n\t\tif (where === undefined) {\n\t\t\treturn this._where;\n\t\t}\n\n\t\tthis._where = where;\n\t\treturn this;\n\t}\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Internal methods\n\t */\n\n\t/**\n\t * @ignore\n\t */\n\tpublic async exec(db: Knex): Promise<IOption[]> {\n\t\tlet label = this._label;\n\t\tlet value = this._value;\n\t\tlet formatter = this._renderer;\n\n\t\t// Create a list of the fields that we need to get from the db\n\t\tlet fields = [ value ].concat(label);\n\n\t\t// We need a default formatter if one isn't provided\n\t\tif (! formatter) {\n\t\t\tformatter = function(row) {\n\t\t\t\tlet a = [];\n\n\t\t\t\tfor (let i = 0, ien = label.length ; i < ien ; i++) {\n\t\t\t\t\ta.push(row[ label[i] ]);\n\t\t\t\t}\n\n\t\t\t\treturn a.join(' ');\n\t\t\t};\n\t\t}\n\n\t\t// Get the data\n\t\tlet q = db\n\t\t\t.select(fields)\n\t\t\t.distinct()\n\t\t\t.from(this._table);\n\n\t\tif (this._where) {\n\t\t\tq.where(this._where);\n\t\t}\n\n\t\tif (this._order) {\n\t\t\t// For cases where we are ordering by a field which isn't included in the list\n\t\t\t// of fields to display, we need to add the ordering field, due to the\n\t\t\t// select distinct.\n\t\t\tthis._order.split(',').forEach((val) => {\n\t\t\t\tval = val.toLocaleLowerCase();\n\t\t\t\tconst direction = val.match(/( desc$| asc$)/g);\n\t\t\t\tconst field = val.replace(/( desc$| asc$)/, '').trim();\n\n\t\t\t\tif (! fields.includes(field)) {\n\t\t\t\t\tq.select(field);\n\t\t\t\t}\n\n\t\t\t\tq.orderBy(field, direction ? direction[0].trim() : 'asc');\n\t\t\t});\n\t\t}\n\n\t\tif (this._limit) {\n\t\t\tq.limit(this.limit());\n\t\t}\n\n\t\tleftJoin(q, this._leftJoin);\n\n\t\tlet res = await q;\n\t\tlet out = [];\n\n\t\t// Create the output array\n\t\tfor (let i = 0, ien = res.length ; i < ien ; i++) {\n\t\t\tout.push({\n\t\t\t\tlabel: formatter(res[i]),\n\t\t\t\tvalue: res[i][ value ]\n\t\t\t});\n\t\t}\n\n\t\t// Stick on any extra manually added options\n\t\tif (this._manualOpts.length) {\n\t\t\tout = out.concat(this._manualOpts);\n\t\t}\n\n\t\t// Only sort if there was no SQL order field\n\t\tif (! this._order) {\n\t\t\tout.sort(function(a, b) {\n\t\t\t\tif (isNumeric(a) && isNumeric(b)) {\n\t\t\t\t\treturn (a.label * 1) - (b.label * 1);\n\t\t\t\t}\n\t\t\t\treturn a.label < b.label ?\n\t\t\t\t\t-1 : a.label > b.label ?\n\t\t\t\t\t\t1 :\n\t\t\t\t\t\t0;\n\t\t\t});\n\t\t}\n\n\t\treturn out;\n\t}\n}\n"]}