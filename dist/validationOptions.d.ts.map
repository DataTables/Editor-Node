{"version":3,"sources":["validationOptions.ts"],"names":[],"mappings":"AAAA,OAAO,UAAU,MAAM,cAAc,CAAC;AACtC,OAAO,cAAc,MAAM,kBAAkB,CAAC;AAE9C,MAAM,MAAM,aAAa,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,KAAK,OAAO,CAAC;AAEnF;;;;;GAKG;AACH,MAAM,CAAC,OAAO,OAAO,iBAAkB,SAAQ,UAAU;IACxD,OAAO,CAAC,aAAa,CAAgB;IACrC,OAAO,CAAC,aAAa,CAAa;IAClC,OAAO,CAAC,UAAU,CAAuB;IACzC,OAAO,CAAC,MAAM,CAAiB;IAC/B,OAAO,CAAC,QAAQ,CAA6B;IAC7C,OAAO,CAAC,SAAS,CAAiB;IAElC;;;;OAIG;IACI,SAAS,CAAC,EAAE,EAAE,aAAa,GAAG,IAAI;IACzC;;;;OAIG;IACI,SAAS,CAAC,KAAK,EAAE,MAAM,GAAG,IAAI;IACrC;;;;;OAKG;IACI,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI;IAazD;;;OAGG;IACI,KAAK,IAAI,OAAO;IACvB;;;;OAIG;IACI,KAAK,CAAC,GAAG,EAAE,OAAO,GAAG,IAAI;IAWhC;;OAEG;IACI,OAAO,IAAI,MAAM;IACxB;;;;OAIG;IACI,OAAO,CAAC,GAAG,EAAE,MAAM,GAAG,IAAI;IAWjC;;;;;;;OAOG;IACI,QAAQ,IAAI,OAAO;IAC1B;;;;OAIG;IACI,QAAQ,CAAC,GAAG,EAAE,OAAO,GAAG,IAAI;IAWnC;;OAEG;IACI,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,GAAG,OAAO;IAwBrE;;OAEG;WACW,MAAM,CAAC,IAAI,EAAE,iBAAiB,GAAG,IAAI,GAAG,iBAAiB;IAQvE;;;;OAIG;gBACS,OAAO,GAAE;QAAE,OAAO,CAAC,EAAE,MAAM,CAAC;QAAC,KAAK,CAAC,EAAE,OAAO,CAAC;QAAC,QAAQ,CAAC,EAAE,OAAO,CAAA;KAAO;CAanF","file":"validationOptions.d.ts","sourcesContent":["import NestedData from './nestedData';\nimport ValidationHost from './validationHost';\n\nexport type DependsOnFunc = (val: any, data: any, host: ValidationHost) => boolean;\n\n/**\n * Common validation options that can be specified for all validation methods.\n *\n * @export\n * @class ValidationOptions\n */\nexport default class ValidationOptions extends NestedData {\n\tprivate _dependsField: string = null;\n\tprivate _dependsValue: any = null;\n\tprivate _dependsFn: DependsOnFunc = null;\n\tprivate _empty: boolean = true;\n\tprivate _message: string = 'Input not valid';\n\tprivate _optional: boolean = true;\n\n\t/**\n\t * Set a function that will be executed to see if a validator should be applied or not.\n\t *\n\t * @param fn Callback function to check if the validator should apply\n\t */\n\tpublic dependsOn(fn: DependsOnFunc): this;\n\t/**\n\t * If the given field has a value, this validator will be applied.\n\t *\n\t * @param field Field to check for a value\n\t */\n\tpublic dependsOn(field: string): this;\n\t/**\n\t * If the given field has one of the value's specified, this validator will be applied.\n\t *\n\t * @param field Field to check for a value\n\t * @param value Value(s) to check for\n\t */\n\tpublic dependsOn(field: string, value: any | any[]): this;\n\tpublic dependsOn(field: any, value: any | any[] = null) {\n\t\tif (typeof field === 'function') {\n\t\t\tthis._dependsFn = field;\n\t\t}\n\t\telse {\n\t\t\tthis._dependsField = field;\n\t\t\tthis._dependsValue = value;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Allow a field to be empty, i.e. a zero length string -\n\t * `''` (`true` - default) or require it to be non-zero length (`false`).\n\t */\n\tpublic empty(): boolean;\n\t/**\n\t * Set the `empty` option for this validator\n\t *\n\t * @param set Value to set\n\t */\n\tpublic empty(set: boolean): this;\n\tpublic empty(set?: boolean) {\n\t\tif (set === undefined) {\n\t\t\treturn this._empty;\n\t\t}\n\n\t\tthis._empty = set;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the error message to be used on validation error\n\t */\n\tpublic message(): string;\n\t/**\n\t * Set the error message\n\t *\n\t * @param msg Currently set message\n\t */\n\tpublic message(msg: string): this;\n\tpublic message(msg?: string) {\n\t\tif (msg === undefined) {\n\t\t\treturn this._message;\n\t\t}\n\n\t\tthis._message = msg;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Require the field to be submitted (`false`) or not\n\t * (`true` - default). When set to `true` the field does not need to be\n\t * included in the list of parameters sent by the client - if set to `false`\n\t * then it must be included. This option can be particularly useful in Editor\n\t * as Editor will not set a value for fields which have not been submitted -\n\t * giving the ability to submit just a partial list of options.\n\t */\n\tpublic optional(): boolean;\n\t/**\n\t * Set the `optional` option for this validator\n\t *\n\t * @param set Value to set\n\t */\n\tpublic optional(set: boolean): this;\n\tpublic optional(set?: boolean) {\n\t\tif (set === undefined) {\n\t\t\treturn this._optional;\n\t\t}\n\n\t\tthis._optional = set;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @ignore internal\n\t */\n\tpublic runDepends(val: any, data: any, host: ValidationHost): boolean {\n\t\tif (this._dependsFn) {\n\t\t\t// External function - call it\n\t\t\treturn this._dependsFn(val, data, host);\n\t\t}\n\t\telse if (this._dependsField) {\n\t\t\t// Get the value that was submitted for the dependent field\n\t\t\tlet depFieldVal = this._readProp(this._dependsField, data);\n\n\t\t\tif (this._dependsValue !== null) {\n\t\t\t\t// Field and value\n\t\t\t\treturn Array.isArray(this._dependsValue)\n\t\t\t\t\t? this._dependsValue.includes(depFieldVal)\n\t\t\t\t\t: depFieldVal === this._dependsValue;\n\t\t\t}\n\n\t\t\t// Just a field - check that the field has a value\n\t\t\treturn depFieldVal !== null && depFieldVal !== '';\n\t\t}\n\n\t\t// Default is to apply the validator\n\t\treturn true;\n\t}\n\n\t/**\n\t * @ignore internal\n\t */\n\tpublic static select(user: ValidationOptions | null): ValidationOptions {\n\t\tif (user) {\n\t\t\treturn user;\n\t\t}\n\n\t\treturn new ValidationOptions();\n\t}\n\n\t/**\n\t * Create validation options\n\t *\n\t * @param options Options\n\t */\n\tconstructor(options: { message?: string; empty?: boolean; optional?: boolean } = {}) {\n\t\tsuper();\n\n\t\tif (options.message !== undefined) {\n\t\t\tthis.message(options.message);\n\t\t}\n\t\tif (options.empty !== undefined) {\n\t\t\tthis.empty(options.empty);\n\t\t}\n\t\tif (options.optional !== undefined) {\n\t\t\tthis.optional(options.optional);\n\t\t}\n\t}\n}\n"]}