import Editor, { IDtResponse } from './editor';
import Field from './field';
import NestedData from './nestedData';
export default class Mjoin extends NestedData {
    constructor(table: string);
    private _table;
    private _editor;
    private _name;
    private _get;
    private _set;
    private _where;
    private _fields;
    private _links;
    private _order;
    private _join;
    field(nameOrField: Field | string): Field | this;
    fields(): Field[];
    fields(...fields: Field[]): Mjoin;
    get(): boolean;
    get(flag: boolean): Mjoin;
    link(field1: string, field2: string): Mjoin;
    name(): string;
    name(name: string): Mjoin;
    order(): string;
    order(order: string): Mjoin;
    set(): boolean;
    set(flag: boolean): Mjoin;
    table(): string;
    table(table: string): Mjoin;
    where(): any[];
    where(cond: any): Mjoin;
    data(editor: Editor, response: IDtResponse): Promise<void>;
    create(editor: Editor, parentId: string, data: object): Promise<void>;
    update(editor: Editor, parentId: string, data: object): Promise<void>;
    remove(editor: Editor, ids: string[]): Promise<void>;
    validate(errors: any, editor: Editor, data: object): Promise<void>;
    private _applyWhere(query);
    private _insert(db, parentId, data);
    private _prepare(editor);
    private _validateFields(errors, editor, data, prefix);
}
